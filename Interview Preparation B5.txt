import pandas as pd
import json

def structure_account_data(excel_path):
    """
    Reads an Excel file, filters for rows where 'Charges' is 'Yes',
    groups the remaining data by 'Account', and structures it
    into a nested dictionary.
    """
    # 1. Load the Excel file into a pandas DataFrame
    df = pd.read_excel(excel_path)

    # 2. --- NEW FILTERING STEP ---
    # Create a new DataFrame containing only the rows where 'Charges' is 'Yes'.
    # We use .str.strip().str.upper() to make the comparison robust (handles " yes ", "YES", etc.)
    # We use .copy() to avoid potential SettingWithCopyWarning later.
    df_chargeable = df[df['Charges'].str.strip().str.upper() == 'YES'].copy()
    
    # If no chargeable rows are found, return an empty dictionary.
    if df_chargeable.empty:
        print("No rows found with 'Charges' set to 'Yes'.")
        return {}

    # 3. Convert 'Hit Date' to a real datetime object for correct sorting.
    #    This is performed on the smaller, filtered DataFrame.
    df_chargeable['Hit Date DT'] = pd.to_datetime(df_chargeable['Hit Date'], format='%d%b%y')

    # 4. Prepare the final output dictionary
    structured_data = {}

    # 5. Group the chargeable DataFrame by the 'Account' column
    for account_number, group_df in df_chargeable.groupby('Account'):
        
        # 6. Find the row with the oldest 'Hit Date' within the chargeable group
        oldest_row = group_df.loc[group_df['Hit Date DT'].idxmin()]

        # 7. Extract the 'base_info' from this oldest row.
        base_info_cols = oldest_row.drop(['Amount', 'Hit Date', 'Account', 'Hit Date DT'])
        base_info = base_info_cols.to_dict()

        # 8. Extract the list of all transactions for this account from the chargeable group.
        transactions_df = group_df[['Amount', 'Hit Date']]
        transactions = transactions_df.to_dict(orient='records')
        
        # 9. Assemble the final structure for this account
        structured_data[account_number] = {
            'base_info': base_info,
            'transactions': transactions
        }
        
    return structured_data

# --- Execution ---
excel_file_path = r"path/to/your/excel_file.xlsx"  # <--- IMPORTANT: Update this path

# Call the function to get the structured data
account_data = structure_account_data(excel_file_path)

# Print the result for an account that has "Yes" to verify the structure
# We use json.dumps for pretty printing
if 44323115 in account_data:
    print("--- Example output for Account 44323115 ---")
    print(json.dumps(account_data[44323115], indent=2))

# Verify the total number of unique accounts processed
print(f"\nTotal unique accounts with 'Charges=Yes' processed: {len(account_data)}")
