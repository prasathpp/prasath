previous_brand = None
for i, row in df.iterrows():
    try:
        # --- NEW LOGIC: Conditional check on 'Charges' column ---
        # The str().strip().upper() makes the check case-insensitive and safe against extra spaces
        if str(row.get('Charges', 'No')).strip().upper() == 'YES':
            current_brand = row['Brand']
            print(f"\nProcessing row {i}: Account {row['Account']} ({current_brand})...")

            if current_brand != previous_brand:
                print(f"Changing brand to {current_brand}")
                goto_masterIndex(current_brand)
            
            check_limit(i)
            process_account_history(i, row['Hit Date DT'], refund_date)

            previous_brand = current_brand
            print(f"Status for account {row['Account']}: {df.at[i, 'Processing_Status']}")

            if (i + 1) % 10 == 0:
                print("\n--- Saving intermediate progress ---")
                temp_df = df.copy()
                temp_df.drop(['Hit Date DT'], axis=1, inplace=True)
                temp_df.to_excel("limit_output_backup.xlsx", index=False)
        else:
            # This block runs for rows where 'Charges' is not 'Yes'
            print(f"\nSkipping row {i}: Account {row['Account']}. Reason: 'Charges' column is not 'Yes'.")
            df.at[i, 'Processing_Status'] = 'Skipped (Charges column not Yes)'

    except Exception as e:
        print(f"CRITICAL ERROR on row {i}, account {row['Account']}: {e}")
        df.at[i, 'Processing_Status'] = f"Error: {e}"
        try:
            mf.terminate()
        except: pass
        mf = MFRobot(visible=True)
        mf.connect_n_login(racf='raosx', password='pooja016')
        previous_brand = None
