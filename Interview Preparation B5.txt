import pandas as pd
import json
import numpy as np # Import numpy to check for its types

def convert_numpy_types(obj):
    """
    A custom converter function for json.dumps to handle
    common numpy types that are not JSON serializable.
    """
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    raise TypeError(f"Object of type {obj.__class__.__name__} is not JSON serializable")

def structure_account_data(excel_path):
    """
    Reads an Excel file, filters for rows where 'Charges' is 'Yes',
    groups the remaining data by 'Account', and structures it
    into a nested dictionary.
    """
    df = pd.read_excel(excel_path)
    
    # Ensure the Charges column exists and handle potential missing values
    if 'Charges' not in df.columns:
        print("Warning: 'Charges' column not found.")
        return {}
    df['Charges'] = df['Charges'].astype(str) # Treat column as string to use .str accessor

    df_chargeable = df[df['Charges'].str.strip().str.upper() == 'YES'].copy()
    
    if df_chargeable.empty:
        print("No rows found with 'Charges' set to 'Yes'.")
        return {}

    df_chargeable['Hit Date DT'] = pd.to_datetime(df_chargeable['Hit Date'], format='%d%b%y')

    structured_data = {}

    for account_number, group_df in df_chargeable.groupby('Account'):
        
        oldest_row = group_df.loc[group_df['Hit Date DT'].idxmin()]

        base_info_cols = oldest_row.drop(['Amount', 'Hit Date', 'Account', 'Hit Date DT'])
        base_info = base_info_cols.to_dict()

        transactions_df = group_df[['Amount', 'Hit Date']]
        transactions = transactions_df.to_dict(orient='records')
        
        structured_data[account_number] = {
            'base_info': base_info,
            'transactions': transactions
        }
        
    return structured_data

# --- Execution ---
excel_file_path = r"path/to/your/excel_file.xlsx"  # <--- IMPORTANT: Update this path

account_data = structure_account_data(excel_file_path)

# Example account number from your screenshot that has 'Yes'
example_account = 44323115 

if example_account in account_data:
    print(f"--- Example output for Account {example_account} ---")
    # --- FIX: Use the 'default' parameter in json.dumps to handle numpy types ---
    print(json.dumps(account_data[example_account], indent=2, default=convert_numpy_types))

print(f"\nTotal unique accounts with 'Charges=Yes' processed: {len(account_data)}")
