# (Keep all the code from the top of the script down to the end of Phase 2)
# ...

# --- Phase 3: Generating Final Report ---
print("\n--- Phase 3: Generating Final Account-Wise Report ---")
output_rows = []
for account_number, data in account_data.items():
    # .get() is used to safely access keys that might not exist for a failed item
    base_info = data.get('base_info', {})
    
    # --- FIX: Create a clean copy of base_info for JSON serialization ---
    # This prevents the circular reference by removing any keys that are themselves
    # large dictionaries that might be part of the outer 'data' object.
    clean_base_info = base_info.copy()
    if 'mainframe_unpaids' in clean_base_info:
        del clean_base_info['mainframe_unpaids']
    if 'transactions' in clean_base_info:
        del clean_base_info['transactions']

    # Create a dictionary for the new, structured row
    row_data = {
        # --- 1. Key Identifier Columns ---
        'Case Number': base_info.get('Case Number'),
        'Sort Code': str(base_info.get('Sort Code', '')).zfill(6),
        'Account': str(base_info.get('Account', '')).zfill(8),
        'Brand': base_info.get('Brand'),
        
        # --- 3. Diagnostic and Calculated Columns ---
        'Processing Status': data.get('mainframe_status'),
        'Limit': data.get('limit'),
        'Diary Refund Amount': data.get('diary_refund_amount'),
        'Replace Refund Amount': data.get('replace_refund_amount'),
        'Refund (Manual) Amount': data.get('refund_manual_amount'),
        'Diary Date': data.get('diary_date'),

        # --- 2. Richly Formatted JSON Columns (using clean/specific data) ---
        'Basic Info': json.dumps(clean_base_info, indent=4, default=convert_numpy_types),
        'Transaction Data': json.dumps(data.get('transactions'), indent=4, default=convert_numpy_types),
        'Unpaid Data': json.dumps(data.get('mainframe_unpaids'), indent=4, default=convert_numpy_types),
    }
    output_rows.append(row_data)

# Create the final DataFrame from our list of structured rows
output_df = pd.DataFrame(output_rows)

# Define the exact column order for the final Excel file
final_column_order = [
    'Case Number', 'Sort Code', 'Account', 'Brand', 'Processing Status', 'Limit',
    'Diary Refund Amount', 'Replace Refund Amount', 'Refund (Manual) Amount', 'Diary Date',
    'Basic Info', 'Transaction Data', 'Unpaid Data'
]

# Ensure all columns exist before trying to reorder, to prevent errors
existing_cols = [col for col in final_column_order if col in output_df.columns]
output_df = output_df[existing_cols]

# Save the final, structured report
output_df.to_excel(r"C:\Users\raosx\Downloads\limit_output_final_structured.xlsx", index=False)


print("\nScript finished successfully.")
if mf: mf.terminate()
