def extract_unpaid_data_from_page(source_page_number):
    """Drills down into 'U-UNPAIDS', scrapes all pages of transactions, and returns."""
    page_data = {"transactions": {}}
    mf.move_to(22, 45)
    mf.send_string("u")
    mf.send_enter()

    try:
        mf.wait_for_field()
    except Exception as e:
        print(f"  -> Warning: Timeout or error while waiting for host response after sending 'u'. Error: {e}")
        return page_data

    screen_text = mf.get_screen_text()
    
    if "UNPAID ITEMS HISTORY" not in screen_text:
        print("  -> Info: Did not navigate to UNPAID ITEMS HISTORY. Assuming no unpaids for this cycle.")
        return page_data

    for i in range(3):
        try:
            if i > 0:
                mf.wait_for_field()
                screen_text = mf.get_screen_text()

            if "accrued_charge" not in page_data:
                accrued_match = re.search(r"ACCRUED CHARGE\s*:\s*([\d,.]+|N/A)", screen_text)
                applied_match = re.search(r"APPLIED CHARGE\s*:\s*([\d,.]+|N/A)", screen_text)
                
                if accrued_match:
                    value_str = accrued_match.group(1).strip()
                    page_data["accrued_charge"] = float(value_str.replace(',', '')) if value_str.upper() != 'N/A' else 'N/A'
                
                if applied_match:
                    value_str = applied_match.group(1).strip()
                    page_data["applied_charge"] = float(value_str.replace(',', '')) if value_str.upper() != 'N/A' else 'N/A'

            # --- THE DEFINITIVE REGEX THAT HANDLES TRAILING SPACES ---
            unpaid_matches = re.findall(r"^\s*(\d{2}[A-Z]{3}\d{2}).*\*.*?([\d,.]+)\s*$", screen_text, re.MULTILINE)
            
            for date_str, amount_str in unpaid_matches:
                amount = float(amount_str.replace(',', ''))
                page_data["transactions"][date_str] = {"amount": amount}

            page_match = re.search(r"PAGE\s+(\d+)\s+OF\s+(\d+)", screen_text)
            if page_match and int(page_match.group(1)) < int(page_match.group(2)):
                mf.send_pf8()
            else:
                break

        except Exception as page_error:
            print(f"  -> WARNING: An error occurred while scraping UNPAID ITEMS page. Error: {page_error}")
            print("  -> Skipping this page and attempting to continue.")
            break

    mf.send_pf2()
    mf.wait_for_field()
    
    return page_data
