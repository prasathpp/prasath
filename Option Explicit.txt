Option Explicit
' Public app As Attachmate_Reflection_Objects_Framework.ApplicationObject ' <<< Comment this out
' Public ThisFrame As Attachmate_Reflection_Objects.frame             ' <<< Comment this out
' Public osView As Attachmate_Reflection_Objects.View                  ' <<< Comment this out

Public app As Object         ' <<< USE THIS
Public ThisFrame As Object   ' <<< USE THIS
Public osView As Object      ' <<< USE THIS

Public ibmTerminal As Attachmate_Reflection_Objects_Emulation_IbmHosts.ibmTerminal ' Keep as is
Public obScreen As Attachmate_Reflection_Objects_Emulation_IbmHosts.IbmScreen    ' Keep as is
Public sessionName As String
Public Mysession As Variant

'Variables used by ConnectExtra - ensure these are handled or defined if needed globally
Public strBoPath As String ' Used in ConnectExtra
Public stEDPFile As String ' Used in ConnectExtra

'Global Project Name Constant
Public Const sPrj_Name As String = "Interest Adjustment Automation"

Function Validate_Screen(strText As String, iRow As Integer, icol As Integer, iLen As Integer) As Boolean
    If obScreen Is Nothing Then Validate_Screen = False: Exit Function ' Safety check
    Do While obScreen.OIA.XStatus <> 0
        obScreen.WaitForHostSettle 50, 20
    Loop
    
    If UCase(VBA.Trim(obScreen.GetText(iRow, icol, iLen))) = UCase(VBA.Trim(strText)) Then
        Validate_Screen = True
    Else
        Validate_Screen = False
    End If
End Function

Function WaitForScreen()
    If obScreen Is Nothing Then Exit Function ' Safety check
    Do While obScreen.OIA.XStatus <> 0
        obScreen.WaitForHostSettle 50, 20
    Loop
    Call Check_SecurityScreen
End Function

Function Check_SecurityScreen()
    If obScreen Is Nothing Then Exit Function ' Safety check
    If Validate_Screen("SECURITY REMINDER", 1, 29, 20) = True Then
        obScreen.PutText2 "Y", 22, 11
        obScreen.SendControlKey ControlKeyCode_Transmit
        Call WaitForScreen
    End If
End Function

Sub ProcessInterestAdjustments_Main()
    Dim Ws_Data As Worksheet
    Dim lastRow As Long
    Dim i As Long

    ' --- CONFIGURATION ---
    Const START_ROW As Long = 2 ' Assuming data starts from row 2
    Const DATA_SHEET_NAME As String = "Sheet1" ' !!! UPDATE THIS to your actual sheet name !!!
    ' --- END CONFIGURATION ---

    On Error GoTo MainErrorHandler

    Set Ws_Data = ThisWorkbook.Worksheets(DATA_SHEET_NAME)

    ' Find the last row with data in Column A (Sort Code)
    lastRow = Ws_Data.Cells(Rows.Count, "A").End(xlUp).Row

    If lastRow < START_ROW Then
        MsgBox "No data found in sheet '" & DATA_SHEET_NAME & "'.", vbInformation, sPrj_Name
        Exit Sub
    End If

    ' Connect to Reflection - ensure obScreen is available after this
    Call ConnectExtra
    If obScreen Is Nothing Then
        MsgBox "Failed to connect to Reflection. Exiting.", vbCritical, sPrj_Name
        Exit Sub
    End If
    Call WaitForScreen ' Initial wait and security check

    ' Loop through each row
    For i = START_ROW To lastRow
        Ws_Data.Range("H" & i & ":J" & i).ClearContents ' Clear previous status

        Call ProcessSingleAdjustment(i, Ws_Data)
        
        If obScreen Is Nothing Then ' Check if session was lost due to critical error
             Ws_Data.Range("H" & i).Value = "Critical Error - Session Lost"
             MsgBox "Reflection session lost. Aborting further processing.", vbCritical, sPrj_Name
             Exit For
        End If
    Next i

    MsgBox "Processing complete.", vbInformation, sPrj_Name
    Exit Sub

MainErrorHandler:
    MsgBox "An unexpected error occurred in the main sub: " & Err.Description, vbCritical, sPrj_Name
    If Not Ws_Data Is Nothing Then Set Ws_Data = Nothing
End Sub


Function ProcessSingleAdjustment(iRow As Long, Ws_Data As Worksheet) As Boolean
    On Error GoTo ErrorHandler_Adjustment ' Moved to the top

    Dim sortCode As String
    Dim accountNo As String
    Dim iBrand As String
    Dim confirm As String
    
    Dim excel_D_Accrued As Double
    Dim excel_E_Cutoff As Double
    Dim excel_F_Applied_Debit As Double
    Dim excel_G_Applied_Credit As Double
    
    Dim Carry_Over_Cutoff_To_Applied_Amount As Double
    Dim Total_Applied_Debtor_Amount As Double
    
    Dim screenType As String ' "BC", "Normal", "Unknown"
    Dim tempStr As String
    Dim loopCounter As Integer

    ' Initialize
    ProcessSingleAdjustment = False ' Assume failure until success
    Carry_Over_Cutoff_To_Applied_Amount = 0
    
    ' --- Read data from Excel for the current row ---
    sortCode = Format(Ws_Data.Range("A" & iRow).Value, "000000")
    accountNo = Format(Ws_Data.Range("B" & iRow).Value, "00000000")
    iBrand = UCase(Trim(CStr(Ws_Data.Range("C" & iRow).Value)))
    
    excel_D_Accrued = Val(CStr(Ws_Data.Range("D" & iRow).Value))
    excel_E_Cutoff = Val(CStr(Ws_Data.Range("E" & iRow).Value))
    excel_F_Applied_Debit = Val(CStr(Ws_Data.Range("F" & iRow).Value))
    excel_G_Applied_Credit = Val(CStr(Ws_Data.Range("G" & iRow).Value))

    If sortCode = "000000" Or accountNo = "00000000" Or iBrand = "" Then
        Ws_Data.Range("H" & iRow).Value = "Missing Sort Code, Account, or Brand"
        GoTo NextCase_Adjustment
    End If

    ' --- 1. APPLICATION SELECTION MENU ---
    Call WaitForScreen
    obScreen.WaitForHostSettle 500, 200
    If Validate_Screen("APPLICATION SELECTION MENU", 1, 28, 30) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Application Menu. Text: " & obScreen.GetText(1, 28, 30)
        GoTo NextCase_Adjustment
    End If

    If iBrand = "RBS" Or iBrand = "RBG" Or iBrand = "RBI" Or iBrand = "VIR" Then
        confirm = "PRCIR#T#"
    ElseIf iBrand = "NWB" Or iBrand = "CTS" Or iBrand = "NWO" Or iBrand = "IOM" Then
        confirm = "PRCIN#T#"
    ElseIf iBrand = "UBN" Then
        confirm = "PRCIJ#T#"
    ElseIf iBrand = "UBR" Then
        confirm = "PRCIK#T#"
    Else
        Ws_Data.Range("H" & iRow).Value = "Unknown Brand: " & iBrand
        GoTo NextCase_Adjustment
    End If

    obScreen.PutText2 "TERM ALL", 21, 13
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen
    obScreen.PutText2 confirm, 21, 13
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen
    obScreen.WaitForHostSettle 500, 200

    If Validate_Screen("Command not recognized", 20, 36, 30) = True Then
        Ws_Data.Range("H" & iRow).Value = "Brand command not recognized."
        GoTo NextCase_Adjustment
    End If
    
    If Validate_Screen("ROYAL BANK OF SCOTLAND", 1, 1, 24) = True Then
        obScreen.SendControlKey ControlKeyCode_Transmit
        Call WaitForScreen
        obScreen.WaitForHostSettle 500, 200
        
        If Validate_Screen("", 1, 1, 80) = True Then
            loopCounter = 1
            Do
                If Validate_Screen("", 1, 1, 80) = True Then
                    obScreen.PutText2 "STAR", 1, 1
                    obScreen.SendControlKey ControlKeyCode_Transmit
                    Call WaitForScreen
                    obScreen.WaitForHostSettle 500, 200
                Else
                    If Validate_Screen("ROYAL BANK OF SCOTLAND", 1, 1, 24) = True Then
                        obScreen.SendControlKey ControlKeyCode_Transmit
                        Call WaitForScreen
                        obScreen.WaitForHostSettle 500, 200
                    End If
                End If
                obScreen.WaitForHostSettle 500, 200
                loopCounter = loopCounter + 1
            Loop While Validate_Screen("Option Handler Function Screen", 1, 26, 35) = False And loopCounter <= 10
            If Validate_Screen("Option Handler Function Screen", 1, 26, 35) = False Then
                 Ws_Data.Range("H" & iRow).Value = "Failed to navigate past STAR screen."
                 GoTo NextCase_Adjustment
            End If
        End If
    End If

    ' --- 2. Option Handler Function Screen ---
    If Validate_Screen("Option Handler Function Screen", 1, 26, 35) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Option Handler. Text: " & obScreen.GetText(1, 26, 35)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "19", 21, 16
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 3. BACK OFFICE SYSTEM ---
    If Validate_Screen("BACK OFFICE SYSTEM", 1, 7, 20) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Back Office System. Text: " & obScreen.GetText(1, 7, 20)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "01", 22, 16
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 4. MASTER INDEX ---
    If Trim(obScreen.GetText(1, 28, 12)) <> "MASTER INDEX" Then
        Ws_Data.Range("H" & iRow).Value = "Not on Master Index. Text: " & obScreen.GetText(1, 28, 12)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "20", 22, 8
    obScreen.PutText2 sortCode, 22, 74
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 5. FILE MAINTENANCE INPUT INDEX ---
    If Trim(obScreen.GetText(1, 21, 40)) <> "FILE MAINTENANCE INPUT INDEX" Then
        Ws_Data.Range("H" & iRow).Value = "Not on File Maint Input Index. Text: " & obScreen.GetText(1, 21, 40)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "20", 22, 8
    obScreen.PutText2 accountNo, 22, 21
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 6. INTERNAL TRANSACTIONS ---
    If Validate_Screen("INTERNAL TRANSACTIONS", 1, 19, 21) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Internal Transactions. Text: " & obScreen.GetText(1, 19, 21)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "04", 22, 8
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 7. INTEREST AMENDMENTS ---
    If Validate_Screen("INTEREST AMENDMENTS", 1, 27, 19) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Interest Amendments. Text: " & obScreen.GetText(1, 27, 19)
        GoTo NextCase_Adjustment
    End If

    screenType = "Unknown"
    tempStr = Trim(obScreen.GetText(3, 42, 16))
    If tempStr = "BUSINESS CURRENT" Then
        screenType = "BC"
    Else
        tempStr = Trim(obScreen.GetText(3, 42, 14))
        If tempStr = "SELECT ACCOUNT" Then
            screenType = "Normal"
        End If
    End If

    If screenType = "Unknown" Then
        Ws_Data.Range("H" & iRow).Value = "Unknown Interest Amendments screen type. Text at (3,42): " & obScreen.GetText(3, 42, 16)
        GoTo NextCase_Adjustment
    End If

    Dim current_screen_arr_val As Double
    Dim current_screen_unar_val As Double
    Dim val_to_input_in_arr As Double
    Dim val_to_input_in_unar As Double
    Dim remaining_excel_val_for_unar_accr As Double 'Specific name for accrued

    If excel_D_Accrued > 0 Then
        If screenType = "BC" Then
            obScreen.PutText2 "dec", 8, 31
            obScreen.PutText2 CStr(excel_D_Accrued), 8, 35
            obScreen.PutText2 "01", 8, 47
        ElseIf screenType = "Normal" Then
            current_screen_arr_val = Val(Trim(obScreen.GetText(8, 21, 6)))
            current_screen_unar_val = Val(Trim(obScreen.GetText(9, 21, 6)))
            val_to_input_in_arr = 0
            val_to_input_in_unar = 0

            If current_screen_arr_val > 0 Then
                val_to_input_in_arr = Application.WorksheetFunction.Min(excel_D_Accrued, current_screen_arr_val)
            End If
            remaining_excel_val_for_unar_accr = excel_D_Accrued - val_to_input_in_arr
            If remaining_excel_val_for_unar_accr > 0 And current_screen_unar_val > 0 Then
                val_to_input_in_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_unar_accr, current_screen_unar_val)
            End If

            If val_to_input_in_arr > 0 Then
                obScreen.PutText2 "dec", 8, 31
                obScreen.PutText2 CStr(val_to_input_in_arr), 8, 35
            End If
            If val_to_input_in_unar > 0 Then
                obScreen.PutText2 "dec", 9, 31
                obScreen.PutText2 CStr(val_to_input_in_unar), 9, 35
                obScreen.PutText2 "01", 9, 47
            End If
        End If
    End If

    Dim current_screen_cutoff_arr_val As Double
    Dim current_screen_cutoff_unar_val As Double
    Dim val_to_input_in_cutoff_arr As Double
    Dim val_to_input_in_cutoff_unar As Double
    Dim remaining_excel_val_for_cutoff_unar As Double 'Specific name for cutoff
    Dim cutoff_deferred As Boolean
    cutoff_deferred = False

    If excel_E_Cutoff > 0 Then
        If screenType = "BC" Then
            obScreen.PutText2 "dec", 12, 31
            obScreen.PutText2 CStr(excel_E_Cutoff), 12, 35
            obScreen.PutText2 "01", 12, 47
        ElseIf screenType = "Normal" Then
            current_screen_cutoff_arr_val = Val(Trim(obScreen.GetText(12, 21, 6)))
            current_screen_cutoff_unar_val = Val(Trim(obScreen.GetText(13, 21, 6)))

            If current_screen_cutoff_arr_val <= 0 And current_screen_cutoff_unar_val <= 0 Then
                Carry_Over_Cutoff_To_Applied_Amount = excel_E_Cutoff
                cutoff_deferred = True
            Else
                val_to_input_in_cutoff_arr = 0
                val_to_input_in_cutoff_unar = 0
                If current_screen_cutoff_arr_val > 0 Then
                    val_to_input_in_cutoff_arr = Application.WorksheetFunction.Min(excel_E_Cutoff, current_screen_cutoff_arr_val)
                End If
                remaining_excel_val_for_cutoff_unar = excel_E_Cutoff - val_to_input_in_cutoff_arr
                If remaining_excel_val_for_cutoff_unar > 0 And current_screen_cutoff_unar_val > 0 Then
                    val_to_input_in_cutoff_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_cutoff_unar, current_screen_cutoff_unar_val)
                End If

                If val_to_input_in_cutoff_arr > 0 Then
                    obScreen.PutText2 "dec", 12, 31
                    obScreen.PutText2 CStr(val_to_input_in_cutoff_arr), 12, 35
                End If
                If val_to_input_in_cutoff_unar > 0 Then
                    obScreen.PutText2 "dec", 13, 31
                    obScreen.PutText2 CStr(val_to_input_in_cutoff_unar), 13, 35
                    obScreen.PutText2 "01", 13, 47
                End If
            End If
        End If
    End If

    Total_Applied_Debtor_Amount = excel_F_Applied_Debit + Carry_Over_Cutoff_To_Applied_Amount

    If screenType = "BC" Then
        If excel_G_Applied_Credit > 0 Then
            obScreen.PutText2 "inc", 14, 31
            obScreen.PutText2 CStr(excel_G_Applied_Credit), 14, 35
            obScreen.PutText2 "01", 14, 47
        End If
        If Total_Applied_Debtor_Amount > 0 Then
            obScreen.PutText2 "dec", 15, 31
            obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 15, 35
            obScreen.PutText2 "01", 15, 47
        End If
    ElseIf screenType = "Normal" Then
        If excel_G_Applied_Credit > 0 Then
            obScreen.PutText2 "inc", 15, 31
            obScreen.PutText2 CStr(excel_G_Applied_Credit), 15, 35
            obScreen.PutText2 "01", 15, 47
        End If
        If Total_Applied_Debtor_Amount > 0 Then
            obScreen.PutText2 "dec", 16, 31
            obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 16, 35
            obScreen.PutText2 "01", 16, 47
        End If
    End If

    Dim k As Integer
    For k = 1 To 3
        obScreen.SendControlKey ControlKeyCode_Transmit
        Call WaitForScreen
        obScreen.WaitForHostSettle 300, 100
    Next k

    obScreen.SendKeys "<S_ESC>" ' Shift+Esc - !!! VERIFY THIS KEYSTROKE !!!
    Call WaitForScreen
    obScreen.WaitForHostSettle 500, 200

    If Validate_Screen("APPLICATION SELECTION MENU", 1, 28, 30) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Failed to return to App Menu after Shift+Esc. Text: " & obScreen.GetText(1, 28, 30)
        GoTo NextCase_Adjustment
    End If

    Ws_Data.Range("H" & iRow).Value = "Completed"
    ProcessSingleAdjustment = True

NextCase_Adjustment:
    If ProcessSingleAdjustment = False And Ws_Data.Range("H" & iRow).Value = "" Then
        Ws_Data.Range("H" & iRow).Value = "Unknown Error or Incomplete"
    End If
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username"))
    Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    Exit Function

ErrorHandler_Adjustment:
    Ws_Data.Range("H" & iRow).Value = "VBA Error: " & Err.Description
    On Error Resume Next
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username"))
    Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    On Error GoTo 0
    
    If Err.Number = 91 Or Err.Number = 424 Then ' Object variable not set (obScreen likely lost)
        Set obScreen = Nothing
    End If
    ProcessSingleAdjustment = False
End Function



'===============================================================================
' Supporting Attachmate Interaction Functions (from your provided code)
'===============================================================================

Sub ConnectExtra()
    Dim edpPathFromSheet As String
    Dim ws As Worksheet
    Dim currentAction As String ' For debugging
    ' Dim tempView As Object    ' Not needed in this version if we bypass Frame/View

    On Error GoTo MyHandler

    currentAction = "Initializing ConnectExtra"
    ' --- Get path from Sheet4.txtEDPPath ---
    On Error Resume Next
    Set ws = Sheet4
    If Err.Number = 0 Then
        Dim OleObj As OLEObject
        Set OleObj = ws.OLEObjects("txtEDPPath")
        If Err.Number = 0 And TypeOf OleObj.Object Is MSForms.TextBox Then
            edpPathFromSheet = OleObj.Object.Text
        End If
    End If
    On Error GoTo MyHandler

    If edpPathFromSheet <> "" Then
        stEDPFile = edpPathFromSheet
    Else
        stEDPFile = Application.GetOpenFilename(title:="Please choose a Reflection Session : Backoffice", fileFilter:="Reflection Files *.rd3x (*.rd3x),")
    End If

    If stEDPFile = "False" Or stEDPFile = "" Then
        MsgBox "No session file selected. Exiting.", vbCritical, sPrj_Name
        Set obScreen = Nothing: Exit Sub
    End If
    
    If strBoPath = "" Then strBoPath = stEDPFile
    
    Mysession = Split(strBoPath, "\")
    sessionName = Mysession(UBound(Mysession)) ' This is the FILENAME like "NTS Back Office - Prod.rd3x"
    
    currentAction = "Creating Attachmate.Reflection.Application"
    On Error Resume Next
    Set app = CreateObject("Attachmate.Reflection.Application")
    If Err.Number <> 0 Then
        Err.Clear
        Set app = CreateObject("Reflection Workspace") 
        If Err.Number <> 0 Then
             MsgBox "Could not CreateObject 'Attachmate.Reflection.Application' or 'Reflection Workspace'.", vbCritical, sPrj_Name
            GoTo MyHandler
        End If
    End If
    On Error GoTo MyHandler
    
    If app Is Nothing Then
        MsgBox "Failed to create Reflection Application object.", vbCritical, sPrj_Name
        GoTo MyHandler
    End If

    Debug.Print "TypeName of app object: " & TypeName(app) ' Expect ApplicationObject

    currentAction = "Waiting for app to be ready (simple delay)"
    Application.Wait (Now + TimeValue("0:00:02")) ' Increased delay slightly

    ' --- Attempt to access Sessions collection directly from app object ---
    currentAction = "Accessing app.Sessions collection"
    Dim sessionsCol As Object ' To hold app.Sessions
    Dim sess As Object        ' To iterate through sessions
    Dim foundSession As Boolean
    
    Set sessionsCol = app.Sessions ' This is the critical line to test now
    If sessionsCol Is Nothing Then
        MsgBox "The 'app' object (TypeName: " & TypeName(app) & ") does not have a .Sessions collection directly.", vbCritical, sPrj_Name
        GoTo MyHandler
    End If

    If sessionsCol.Count = 0 Then
        currentAction = "No sessions open, attempting to open: " & strBoPath
        ' Some versions use app.Open, others app.Sessions.Open, or app.CreateSession
        On Error Resume Next ' Try different open methods
        Set sess = app.Open(strBoPath) ' Common for "Reflection.Application"
        If sess Is Nothing Then
            Err.Clear
            Set sess = sessionsCol.Open(strBoPath) ' Common for "Attachmate.Reflection.Application" if Sessions is a collection
        End If
        If sess Is Nothing Then
             Err.Clear
             ' If CreateSession exists and returns the terminal object directly
             ' Set ibmTerminal = app.CreateSession(strBoPath) 
             ' If ibmTerminal Is Nothing Then
             '    MsgBox "Could not open or create session: " & strBoPath, vbCritical, sPrj_Name
             '    GoTo MyHandler
             ' Else
             '    foundSession = True
             ' End If
             MsgBox "Could not open session using app.Open or sessionsCol.Open: " & strBoPath & ". Try opening it manually first.", vbCritical, sPrj_Name
             GoTo MyHandler
        Else
             foundSession = True
        End If
        On Error GoTo MyHandler
    Else
        currentAction = "Searching for already open session: " & sessionName
        For Each sess In sessionsCol
            ' Compare by looking for the session file name in the session's caption or name
            ' The property for caption/name can vary: .Name, .Caption, .Window.Caption, .FullName, .FileName
            Dim sessTitle As String
            On Error Resume Next ' Try different properties to get a title
            sessTitle = sess.Window.Caption
            If sessTitle = "" Then sessTitle = sess.Caption
            If sessTitle = "" Then sessTitle = sess.Name
            If sessTitle = "" Then sessTitle = sess.FileName ' Often contains just the file name
            On Error GoTo MyHandler

            If InStr(1, sessTitle, sessionName, vbTextCompare) > 0 Then
                foundSession = True
                Exit For
            End If
        Next sess
        
        If Not foundSession Then
            MsgBox "Session '" & sessionName & "' not found in open sessions. Please ensure it's running or path is correct.", vbInformation, sPrj_Name
            ' Optionally, try to open it if not found
            currentAction = "Session not found, attempting to open: " & strBoPath
            Set sess = sessionsCol.Open(strBoPath)
            If sess Is Nothing Then GoTo MyHandler Else foundSession = True
        End If
    End If

    If Not foundSession Or sess Is Nothing Then
        MsgBox "Failed to find or open session: " & sessionName, vbCritical, sPrj_Name
        GoTo MyHandler
    End If

    currentAction = "Getting Terminal and Screen from Session object"
    ' Now, 'sess' should be our session object.
    ' We need to get the IbmScreen object from it.
    ' For Attachmate_Reflection_Objects_Framework.ApplicationObject, 'sess' is usually 
    ' an Attachmate_Reflection_Objects.Session object.
    ' This Session object should have a .Control property which is the IbmTerminal.
    
    On Error Resume Next ' sess.Control might fail if 'sess' is not the expected type
    Set ibmTerminal = sess.Control ' This is the key for framework's Session object
    If Err.Number <> 0 Or ibmTerminal Is Nothing Then
        Err.Clear
        ' If sess.Control doesn't work, perhaps 'sess' *is* the terminal object
        ' or has a direct .Screen property (older models)
        If TypeName(sess) Like "*Terminal*" Or TypeName(sess) Like "*IbmTerminal*" Then
            Set ibmTerminal = sess
        ElseIf Not sess.Screen Is Nothing Then ' Direct .Screen property?
            Set obScreen = sess.Screen
        End If
    End If
    On Error GoTo MyHandler

    If Not obScreen Is Nothing Then ' If we got screen directly
        ' ibmTerminal might still be Nothing, but obScreen is what we need for GetText etc.
        ' However, SetProperties needs ibmTerminal.
        If ibmTerminal Is Nothing And TypeName(obScreen) Like "*IbmScreen*" Then
            ' This is tricky; can't easily get parent terminal from screen alone.
            ' For now, we'll assume if obScreen is set, we can proceed, but properties won't be set.
             Debug.Print "Got obScreen directly, but ibmTerminal is not set. Cannot set terminal properties."
        End If
    ElseIf Not ibmTerminal Is Nothing Then ' If we got ibmTerminal (from sess.Control or sess being the terminal)
        Set obScreen = ibmTerminal.Screen
    End If
        
    If obScreen Is Nothing Then
        MsgBox "Could not get Screen from Session/Terminal object. TypeName(sess) was: " & TypeName(sess), vbCritical, sPrj_Name
        GoTo MyHandler
    End If
        
    currentAction = "Setting Terminal Properties"
    If Not ibmTerminal Is Nothing Then ' Only if we have the terminal object
        ibmTerminal.DisableKeystrokeProductivity = True
        ibmTerminal.DisableScreenHistory = True
    Else
        Debug.Print "Skipping terminal properties setup as ibmTerminal object not available."
    End If
    
    currentAction = "ConnectExtra Successful"
    Exit Sub
                         
MyHandler:
    MsgBox "Session connection error during: '" & currentAction & "'" & vbNewLine & _
           "Error: " & Err.Description & " (Error No. " & Err.Number & ")" & vbNewLine & vbNewLine & _
           "You may need to open: " & sessionName & " manually or check session path/Reflection version/References.", vbCritical, sPrj_Name
    Set obScreen = Nothing
End Sub
