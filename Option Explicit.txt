' Attribute VB_Name = "mod_BackOffice_Automation_V3" ' Module name reflecting version
Option Explicit

' --- Reflection COM Object Declarations ---
' These variables will hold the references to the Reflection objects
' needed to control the host session.
Public objReflectionApp As Object          ' Represents the main Reflection Workspace application
Public objFrame As Object        ' Represents the main window frame containing views
Public objView As Object         ' Represents the specific session view/tab (e.g., the TN3270 session)
Public objTerminal As Object     ' Represents the terminal control within the view
Public objScreen As Object       ' Represents the interactive screen area of the terminal

' --- Excel Constants ---
Private Const DATA_SHEET_NAME As String = "Sheet1"
Private Const FIRST_DATA_ROW As Long = 2
Private Const COL_SORT_CODE As Long = 1 ' Column A
Private Const COL_ACCOUNT As Long = 2 ' Column B
Private Const COL_BRAND As Long = 3 ' Column C
Private Const COL_STATUS As Long = 8 ' Column H (for recording status)
Private Const COL_ERROR_DESC As Long = 9 ' Column I (for recording error descriptions)

' --- Reflection Connection Constant ---
' Define the EXACT title of the session window we will look for using GetViewByTitleText.
' *** IMPORTANT: This must match the window title EXACTLY! ***
Private Const SESSION_TITLE_PART As String = "NTS Back Office - Prod.rd3x"

' --- Screen Title Constants and Coordinates (Version 3) ---
Private Const SCREEN_APP_MENU As String = "APPLICATION SELECTION MENU"
Private Const SCREEN_APP_MENU_ROW As Long = 1
Private Const SCREEN_APP_MENU_COL As Long = 28
Private Const SCREEN_APP_MENU_LENGTH As Long = 30

Private Const SCREEN_OPT_HANDLER_MAIN As String = "OPTION HANDLER FUNCTION SCREEN"
Private Const SCREEN_OPT_HANDLER_ROW As Long = 1
Private Const SCREEN_OPT_HANDLER_COL As Long = 26
Private Const SCREEN_OPT_HANDLER_LENGTH As Long = 35

Private Const SCREEN_BO_SYSTEM As String = "BACK OFFICE SYSTEM"
Private Const SCREEN_BO_SYSTEM_ROW As Long = 1
Private Const SCREEN_BO_SYSTEM_COL As Long = 7
Private Const SCREEN_BO_SYSTEM_LENGTH As Long = 20

Private Const SCREEN_MASTER_INDEX As String = "MASTER INDEX"
Private Const SCREEN_MASTER_INDEX_ROW As Long = 1
Private Const SCREEN_MASTER_INDEX_COL As Long = 28
Private Const SCREEN_MASTER_INDEX_LENGTH As Long = 12

Private Const SCREEN_FILE_MAINT_IDX As String = "FILE MAINTENANCE INPUT INDEX"
Private Const SCREEN_FILE_MAINT_IDX_ROW As Long = 1
Private Const SCREEN_FILE_MAINT_IDX_COL As Long = 21
Private Const SCREEN_FILE_MAINT_IDX_LENGTH As Long = 30

Private Const SCREEN_INTERNAL_TXNS As String = "INTERNAL TRANSACTIONS"
Private Const SCREEN_INTERNAL_TXNS_ROW As Long = 1
Private Const SCREEN_INTERNAL_TXNS_COL As Long = 19
Private Const SCREEN_INTERNAL_TXNS_LENGTH As Long = 21

Private Const SCREEN_INTEREST_AMENDMENTS As String = "INTEREST AMENDMENTS" ' Corrected title again
Private Const SCREEN_INTEREST_AMENDMENTS_ROW As Long = 1
Private Const SCREEN_INTEREST_AMENDMENTS_COL As Long = 27 ' Adjusted based on screenshot
Private Const SCREEN_INTEREST_AMENDMENTS_LENGTH As Long = 19

' Intermediate screen constants (for handling)
Private Const SCREEN_SECURITY_REMINDER As String = "SECURITY REMINDER"
Private Const SECURITY_REMINDER_ROW As Long = 1
Private Const SECURITY_REMINDER_COL As Long = 29
Private Const SECURITY_REMINDER_LEN As Long = 20
Private Const SECURITY_REMINDER_INPUT_ROW As Long = 22
Private Const SECURITY_REMINDER_INPUT_COL As Long = 11

Private Const SCREEN_CMD_NOT_RECOGNIZED As String = "Command not recognized" ' Location approx R20, C36
Private Const SCREEN_RBS_HEADER As String = "ROYAL BANK OF SCOTLAND" ' Location approx R1, C1

' --- Host Input Coordinates ---
Private Const CMD_LINE_ROW As Long = 21
Private Const CMD_LINE_COL As Long = 13

Private Const OPTION_INPUT_ROW As Long = 21 ' For options on Option Handler (19)
Private Const OPTION_INPUT_COL As Long = 16

Private Const BACK_OFFICE_OPT_ROW As Long = 22 ' For options on Back Office System (1)
Private Const BACK_OFFICE_OPT_COL As Long = 16

Private Const MASTER_INDEX_ACTION_ROW As Long = 22
Private Const MASTER_INDEX_ACTION_COL As Long = 8
Private Const MASTER_INDEX_SC_ROW As Long = 22
Private Const MASTER_INDEX_SC_COL As Long = 74

Private Const FILE_MAINT_IDX_ACTION_ROW As Long = 22
Private Const FILE_MAINT_IDX_ACTION_COL As Long = 8
Private Const FILE_MAINT_IDX_ACCOUNT_ROW As Long = 22
Private Const FILE_MAINT_IDX_ACCOUNT_COL As Long = 21

Private Const INTERNAL_TXNS_ACTION_ROW As Long = 22
Private Const INTERNAL_TXNS_ACTION_COL As Long = 8

' --- Navigation Back Target Constants ---
Private Const NAV_TARGET_APP_MENU As Long = 1
Private Const NAV_TARGET_MASTER_INDEX As Long = 2


' --- Script Title for MsgBoxes / Debugging ---
Private Const SCRIPT_TITLE As String = "Back Office Automation V3"


' --- Main Entry Sub (Version 3 - Process Multiple Accounts) ---
' This is the procedure you will run to read data from Excel,
' connect to Reflection, and navigate for each account,
' optimizing navigation based on Brand.
Sub ProcessAccounts_V3()
    On Error GoTo ErrorHandler

    Debug.Print "--- Starting " & SCRIPT_TITLE & " ---"

    Dim ws As Worksheet
    Dim currentRow As Long
    Dim sortCode As String, accountNumber As String, brand As String
    Dim nextBrand As String
    Dim navigationSuccess As Boolean
    Dim prevBrand As String ' To track Brand of the previous row
    Dim lastReturnScreen As Long ' To track where we returned after the previous row (use NAV_TARGET constants)

    ' Initialize state for the first row
    prevBrand = "" ' No previous brand
    lastReturnScreen = NAV_TARGET_APP_MENU ' Assume we start from App Menu

    ' 1. Connect to Reflection
    If Not ConnectToReflection_V3(SESSION_TITLE_PART) Then
        MsgBox "Failed to connect to Reflection session: '" & SESSION_TITLE_PART & "'." & vbCrLf & _
               "Ensure session is open and Automation is enabled.", vbCritical, SCRIPT_TITLE
        GoTo CleanupAndExit
    End If
    Debug.Print SCRIPT_TITLE & ": Successfully connected to Reflection session."

    ' 2. Get Excel Worksheet
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets(DATA_SHEET_NAME)
    If ws Is Nothing Then
        On Error GoTo 0
        MsgBox "Could not find worksheet named '" & DATA_SHEET_NAME & "'. Please check the sheet name.", vbCritical, SCRIPT_TITLE
        GoTo CleanupAndExit ' Clean up Reflection objects before exiting
    End If
    On Error GoTo 0
    Debug.Print SCRIPT_TITLE & ": Successfully got worksheet '" & DATA_SHEET_NAME & "'."

    ' 3. Find the last row with data in Column A
    Dim lastRow As Long
    lastRow = ws.Cells(Rows.Count, COL_SORT_CODE).End(xlUp).Row

    If lastRow < FIRST_DATA_ROW Then
        MsgBox "No data found in column A starting from row " & FIRST_DATA_ROW & ".", vbInformation, SCRIPT_TITLE
        GoTo CleanupAndExit
    End If
    Debug.Print SCRIPT_TITLE & ": Found last data row: " & lastRow & " in column " & COL_SORT_CODE & "."


    ' 4. Loop through each data row
    For currentRow = FIRST_DATA_ROW To lastRow
        ' Read data for the current row
        sortCode = Trim(CStr(ws.Cells(currentRow, COL_SORT_CODE).Value))
        accountNumber = Trim(CStr(ws.Cells(currentRow, COL_ACCOUNT).Value))
        brand = UCase(Trim(CStr(ws.Cells(currentRow, COL_BRAND).Value)))

        Debug.Print "----------------------------------------------------"
        Debug.Print SCRIPT_TITLE & ": Processing Row " & currentRow & " | S/C: [" & sortCode & "] | Acc: [" & accountNumber & "] | Brand: [" & brand & "]"

        ' Skip row if essential data is missing after trimming
        If sortCode = "" Or accountNumber = "" Or brand = "" Then
            Debug.Print SCRIPT_TITLE & ": Skipping Row " & currentRow & " - Missing Sort Code, Account, or Brand."
            ws.Cells(currentRow, COL_STATUS).Value = "Skipped - Missing Data"
            ws.Cells(currentRow, COL_ERROR_DESC).Value = "Missing essential data"
            ' Do NOT update prevBrand or lastReturnScreen, state is unknown after skip
            GoTo NextRow ' Skip to the next iteration of the loop
        End If

        ' Determine Brand of the next row (or if it's the last row)
        If currentRow < lastRow Then
            nextBrand = UCase(Trim(CStr(ws.Cells(currentRow + 1, COL_BRAND).Value)))
        Else
            nextBrand = "" ' Indicate this is the last row
        End If

        ' 5. Conditional Forward Navigation
        Dim startScreenSuccess As Boolean
        If currentRow = FIRST_DATA_ROW Or brand <> prevBrand Or lastReturnScreen <> NAV_TARGET_MASTER_INDEX Then
            ' Full navigation needed (First row, Brand change, or not returned to Master Index)
            Debug.Print SCRIPT_TITLE & ": Starting navigation from " & SCREEN_APP_MENU & "."
            startScreenSuccess = NavigateFromAppMenu_V3(sortCode, accountNumber, brand)
        Else
            ' Shorter navigation from Master Index
            Debug.Print SCRIPT_TITLE & ": Starting navigation from " & SCREEN_MASTER_INDEX & " (Same Brand)."
            startScreenSuccess = NavigateFromMasterIndex_V3(sortCode, accountNumber)
        End If


        ' 6. Process and Record Status
        If startScreenSuccess Then
            Debug.Print SCRIPT_TITLE & ": Navigation successful for Row " & currentRow & ". Now on " & SCREEN_INTEREST_AMENDMENTS & "."
            ws.Cells(currentRow, COL_STATUS).Value = "Navigated - OK"
            ws.Cells(currentRow, COL_ERROR_DESC).Value = "" ' Clear any previous error

            ' *** PLACEHOLDER FOR CORE BUSINESS LOGIC (Interest Amendment/Checking) ***
            ' If navigation was successful, you would call other subs/functions here
            ' to perform the actual interest amendment or checking steps using objScreen.
            ' Example: Call PerformInterestAmendment_V3(ws, currentRow)
            ' Ensure these functions handle screen interactions and updates.
            ' *For this version, we will just pause if desired.*

            ' To allow manual checking after navigation, uncomment the MsgBox below:
             'MsgBox "PAUSED: On target screen for S/C: " & sortCode & ", A/N: " & accountNumber, vbInformation, SCRIPT_TITLE
            ' To proceed without pausing, keep it commented out.
            ' *** END PLACEHOLDER ***

            ' 7. Conditional Back Navigation
            Dim targetReturn As Long
            If currentRow < lastRow And brand = nextBrand Then
                ' Same Brand for next row, navigate back to Master Index
                targetReturn = NAV_TARGET_MASTER_INDEX
                Debug.Print SCRIPT_TITLE & ": Next row is same brand. Navigating back to " & SCREEN_MASTER_INDEX & "."
            Else
                ' Different Brand or last row, navigate back to App Menu
                targetReturn = NAV_TARGET_APP_MENU
                Debug.Print SCRIPT_TITLE & ": Next row is different brand or last row. Navigating back to " & SCREEN_APP_MENU & "."
            End If

            ' Execute the determined back navigation
            Dim backNavSuccess As Boolean
            backNavSuccess = NavigateBack_V3(targetReturn)

            ' Update last return screen state
            If backNavSuccess Then
                 lastReturnScreen = targetReturn
                 Debug.Print SCRIPT_TITLE & ": Successfully navigated back to target return screen."
            Else
                 ' Critical failure in navigating back - cannot guarantee state for next row
                 ' Show a message and potentially exit, or force full re-nav on next row
                 Debug.Print SCRIPT_TITLE & ": CRITICAL FAILURE during back navigation for row " & currentRow & ". Cannot guarantee state."
                 ws.Cells(currentRow, COL_STATUS).Value = "Failed - Back Nav"
                 ws.Cells(currentRow, COL_ERROR_DESC).Value = "Failed during back navigation."
                 ' Force full re-navigation for the next row if loop continues
                 lastReturnScreen = NAV_TARGET_APP_MENU
                 ' Optionally exit loop or macro here if back navigation failure is critical
                 ' MsgBox "Critical Failure: Failed to navigate back. Stopping.", vbCritical, SCRIPT_TITLE
                 ' GoTo CleanupAndExit
            End If

        Else
            ' Forward navigation failed - status already set inside navigation functions
            Debug.Print SCRIPT_TITLE & ": Forward navigation failed for Row " & currentRow & "."
            ws.Cells(currentRow, COL_STATUS).Value = "Navigation Failed"
             ' Error details should have been set by the navigation function or error handler

            ' After a failed forward navigation, we are on an unpredictable screen.
            ' It's safest to try and get back to a known state (like App Menu) before next row.
            ' Attempt to navigate back to App Menu, ignore if it fails as we're already in a bad state.
            Debug.Print SCRIPT_TITLE & ": Attempting to return to " & SCREEN_APP_MENU & " after forward nav failure."
            NavigateBack_V3 NAV_TARGET_APP_MENU ' Attempt back nav, ignore result
            lastReturnScreen = NAV_TARGET_APP_MENU ' Force full re-nav for next row

        End If

        ' Update previous brand regardless of navigation success/failure
        prevBrand = brand

NextRow: ' Label for the GoTo statement
        ' Loop moves to the next row automatically

    Next currentRow

    Debug.Print "----------------------------------------------------"
    Debug.Print SCRIPT_TITLE & ": Finished processing all rows."

CleanupAndExit:
    ' 8. Clean up the Reflection objects after the loop finishes or on error
    Call CleanUpReflectionObjects_V3
    Set ws = Nothing

    Debug.Print "--- Finished " & SCRIPT_TITLE & " ---"
End Sub


' --- Connection Logic (Version 3) ---
' Connects to an existing Reflection Workspace and finds the specified session
' using GetViewByTitleText.
' Returns True if connection and object retrieval is successful, False otherwise.
Private Function ConnectToReflection_V3(ByVal targetSessionExactTitle As String) As Boolean
    On Error GoTo ConnectErrorHandler_V3
    ConnectToReflection_V3 = False ' Assume failure initially

    Debug.Print "Connect_V3: Attempting GetObject(""Reflection Workspace"")..."
    On Error Resume Next ' Temporarily disable error handling for GetObject
    Set objReflectionApp = GetObject("Reflection Workspace")
    If Err.Number <> 0 Or objReflectionApp Is Nothing Then
        Err.Clear ' Clear the "Object not found" error
        Debug.Print "Connect_V3: GetObject(""Reflection Workspace"") FAILED."
        MsgBox "Could not connect to Reflection Workspace." & vbCrLf & _
               "Please ensure Reflection is running and that 'Enable Reflection Automation' is checked in Reflection settings.", vbCritical, SCRIPT_TITLE
        Exit Function ' Exit the function indicating failure
    End If
    Debug.Print "Connect_V3: RApp obtained. TypeName: " & TypeName(objReflectionApp)
    On Error GoTo ConnectErrorHandler_V3 ' Restore error handling

    Debug.Print "Connect_V3: Attempting objReflectionApp.GetObject(""Frame"")..."
    Set objFrame = objReflectionApp.GetObject("Frame")
    If objFrame Is Nothing Then Debug.Print "Connect_V3: Frame object is Nothing.": Exit Function
    Debug.Print "Connect_V3: objFrame obtained. TypeName: " & TypeName(objFrame)

    ' Ensure the frame is visible and brought to front (optional but helpful)
    If Not objFrame.Visible Then objFrame.Visible = True
    objFrame.Activate ' Brings the main Reflection Workspace window to front
    Debug.Print "Connect_V3: Frame Visible/Activated."

    ' Using GetViewByTitleText
    Debug.Print "Connect_V3: Attempting objFrame.GetViewByTitleText(""" & targetSessionExactTitle & """)..."
    On Error Resume Next ' Allow GetViewByTitleText to fail if title doesn't match
    Set objView = objFrame.GetViewByTitleText(targetSessionExactTitle)
    If Err.Number <> 0 Or objView Is Nothing Then
        Err.Clear ' Clear the "Object not found" error
        Debug.Print "Connect_V3: objFrame.GetViewByTitleText FAILED or returned Nothing."
        MsgBox "Could not find a Reflection session with the EXACT title: '" & targetSessionExactTitle & "'." & vbCrLf & _
               "Please ensure the correct session file is open in Reflection and its window title matches exactly.", vbCritical, SCRIPT_TITLE
        Exit Function ' Exit function if the target view was not found
    End If
    Debug.Print "Connect_V3: objFrame.GetViewByTitleText SUCCEEDED. View Title: '" & objView.TitleText & "'. TypeName(objView): " & TypeName(objView)
    On Error GoTo ConnectErrorHandler_V3 ' Restore error handling

    ' Skipping explicit objView.Activate to avoid previous Error 438
    Debug.Print "Connect_V3: Skipping objView.Activate to avoid previous Error 438."

    Debug.Print "Connect_V3: Attempting objView.Control..."
    Set objTerminal = objView.Control
    If objTerminal Is Nothing Then Debug.Print "Connect_V3: Terminal object is Nothing.": Exit Function
    Debug.Print "Connect_V3: objTerminal obtained. TypeName: " & TypeName(objTerminal)

    Debug.Print "Connect_V3: Attempting objTerminal.Screen..."
    Set objScreen = objTerminal.Screen
    If objScreen Is Nothing Then Debug.Print "Connect_V3: Screen object is Nothing.": Exit Function
    Debug.Print "Connect_V3: objScreen obtained. TypeName: " & TypeName(objScreen)

    ' Optional but recommended settings for automation (ignore errors if properties don't exist)
    On Error Resume Next
    objTerminal.DisableKeystrokeProductivity = True
    If Err.Number <> 0 Then Debug.Print "Connect_V3: Info - Error setting DisableKeystrokeProductivity: " & Err.Description: Err.Clear
    objTerminal.DisableScreenHistory = True
    If Err.Number <> 0 Then Debug.Print "Connect_V3: Info - Error setting DisableScreenHistory: " & Err.Description: Err.Clear
    On Error GoTo ConnectErrorHandler_V3 ' Restore error handling

    ConnectToReflection_V3 = True ' Connection successful
    Debug.Print "Connect_V3: All core Reflection objects set successfully."
    Exit Function ' Exit function indicating success

ConnectErrorHandler_V3:
    Debug.Print "Connect_V3: Error (captured) - " & Err.Number & ": " & Err.Description
    ConnectToReflection_V3 = False
    Exit Function
End Function

' Releases the Reflection COM objects to free up resources.
Private Sub CleanUpReflectionObjects_V3()
    On Error Resume Next ' Ignore errors during cleanup

    Set objScreen = Nothing
    Set objTerminal = Nothing
    Set objView = Nothing
    Set objFrame = Nothing
    Set objReflectionApp = Nothing

    On Error GoTo 0 ' Reset error handling
    Debug.Print SCRIPT_TITLE & ": Reflection objects released."
End Sub

' --- Screen Interaction Helpers (Version 3 - Manual Wait) ---

' Waits for the host to be ready (OIA XStatus=0) using a manual loop with App.Wait and DoEvents.
' Also checks for and handles the Security Reminder screen within the loop.
Private Sub WaitUntilReady_V3(Optional ByVal timeoutMilliseconds As Long = 10000)
    If objScreen Is Nothing Or objReflectionApp Is Nothing Then
        Debug.Print "WaitUntilReady_V3: objScreen or objReflectionApp is Nothing. Cannot wait."
        Exit Sub
    End If

    Dim startTime As Date: startTime = Now
    Dim timeoutTime As Date: timeoutTime = DateAdd("s", timeoutMilliseconds / 1000, startTime)

    Do While objScreen.OIA.XStatus <> 0 And Now < timeoutTime

        If CheckForAndHandleSecurityReminder_V3() Then
            ' Reminder handled, loop continues waiting for main OIA status
        End If

        objReflectionApp.Wait 50
        DoEvents

    Loop

    If Now >= timeoutTime And objScreen.OIA.XStatus <> 0 Then
        Debug.Print "WaitUntilReady_V3: Timeout occurred (" & timeoutMilliseconds & "ms) waiting for XStatus=0. Last XStatus: " & objScreen.OIA.XStatus
        ' Optional: Error handling for timeout
    End If

    CheckForAndHandleSecurityReminder_V3 ' Check again after OIA is 0

    objReflectionApp.Wait 200 ' Final settle

End Sub

' Checks for the Security Reminder screen and handles it by sending 'Y' and Transmit.
' Returns True if the reminder was detected and handled, False otherwise.
Private Function CheckForAndHandleSecurityReminder_V3() As Boolean
    CheckForAndHandleSecurityReminder_V3 = False
    If objScreen Is Nothing Or objReflectionApp Is Nothing Then Exit Function

    objReflectionApp.Wait 50 ' Minimal settle before checking

    If ScreenContainsText_V3(SCREEN_SECURITY_REMINDER, SECURITY_REMINDER_ROW, SECURITY_REMINDER_COL, SECURITY_REMINDER_LEN) Then
        Debug.Print "CheckForAndHandleSecurityReminder_V3: Detected Security Reminder. Sending 'Y'..."

        objScreen.PutText2 "Y", SECURITY_REMINDER_INPUT_ROW, SECURITY_REMINDER_INPUT_COL
        objScreen.SendControlKey ControlKeyCode_Transmit
        Debug.Print "CheckForAndHandleSecurityReminder_V3: Sent Transmit."

        CheckForAndHandleSecurityReminder_V3 = True

        ' After sending Transmit, OIA will be busy. The outer loop/calling code must handle the wait.
    End If
End Function

' Helper function to check for text at specific coordinates on the screen.
' Returns True if text is found, False otherwise.
Private Function ScreenContainsText_V3(expectedText As String, rowNum As Long, colNum As Long, Optional ByVal length As Long = 0, Optional minSettleTimeMs As Long = 50) As Boolean
    If objScreen Is Nothing Or objReflectionApp Is Nothing Then ScreenContainsText_V3 = False: Exit Function

    If minSettleTimeMs > 0 Then objReflectionApp.Wait minSettleTimeMs

    If length = 0 Then length = Len(expectedText)

    Dim actualText As String: actualText = ""
    On Error Resume Next
    actualText = Trim(objScreen.GetText(rowNum, colNum, length))
    On Error GoTo 0

    ScreenContainsText_V3 = (UCase(actualText) = UCase(expectedText))

End Function

' Helper function to verify screen title after waiting. Uses WaitUntilReady_V3.
' Returns True if the expected text is found, False otherwise.
Private Function VerifyScreen_V3(expectedText As String, rowNum As Long, colNum As Long, Optional ByVal length As Long = 0) As Boolean
    If objScreen Is Nothing Then VerifyScreen_V3 = False: Exit Function

    Call WaitUntilReady_V3() ' Wait for the screen to be ready first

    If length = 0 Then length = Len(expectedText)

    Dim actualText As String: actualText = ""
    On Error Resume Next
    actualText = Trim(objScreen.GetText(rowNum, colNum, length))
    On Error GoTo 0

    If UCase(actualText) = UCase(expectedText) Then
        VerifyScreen_V3 = True
        Debug.Print "VerifyScreen_V3: Confirmed '" & expectedText & "' at R" & rowNum & "C" & colNum & "L" & length & "."
    Else
        VerifyScreen_V3 = False
        Debug.Print "VerifyScreen_V3 FAILED: Expected '" & expectedText & "' at R" & rowNum & "C" & colNum & "L" & length & ", Found '" & actualText & "'."
        ' Optional: Add a MsgBox here on critical screen verification failures
        ' MsgBox "Screen verification failed. Expected '" & expectedText & "' but found '" & actualText & "' at R" & rowNum & "C" & colNum & ".", vbCritical, SCRIPT_TITLE
    End If
End Function

' *** NEW HELPER: Sends TERM ALL and 3 Transmits ***
Private Sub SendTermAll_V3(data As String, rowNum As Long, colNum As Long)
    If objScreen Is Nothing Then Exit Sub

    Call WaitUntilReady_V3() ' Wait for the screen to be ready before attempting input

    objScreen.PutText2 data, rowNum, colNum ' Put the text onto the screen
    Debug.Print "SendTermAll_V3: Put data '" & data & "' at R" & rowNum & "C" & colNum & "."

    Debug.Print "SendTermAll_V3: Sending Transmit key (x3)."
    objScreen.SendControlKey ControlKeyCode_Transmit
    objScreen.SendControlKey ControlKeyCode_Transmit
    objScreen.SendControlKey ControlKeyCode_Transmit ' Send the Enter key (Transmit) thrice

    Call WaitUntilReady_V3(5000) ' Wait for the host to process the input and update the screen (use a slightly longer wait after Transmit)
End Sub

' *** MODIFIED HELPER: Sends text and 1 Transmit (standard behavior) ***
Private Sub SendText_V3(data As String, rowNum As Long, colNum As Long)
    If objScreen Is Nothing Then Exit Sub

    Call WaitUntilReady_V3() ' Wait for the screen to be ready before attempting input

    objScreen.PutText2 data, rowNum, colNum ' Put the text onto the screen
    Debug.Print "SendText_V3: Put data '" & data & "' at R" & rowNum & "C" & colNum & "."

    Debug.Print "SendText_V3: Sending Transmit key (x1)."
    objScreen.SendControlKey ControlKeyCode_Transmit ' Send the Enter key (Transmit) once

    Call WaitUntilReady_V3(5000) ' Wait for the host to process the input and update the screen (use a slightly longer wait after Transmit)
End Sub

' Sends a control key (like PF keys, Enter/Transmit, etc.) to the screen.
' Uses WaitUntilReady_V3 internally before and after sending the key.
Private Sub SendControlKey_V3(keyCode As Long, Optional waitAfterMs As Long = 500)
     If objScreen Is Nothing Then Exit Sub

     Call WaitUntilReady_V3() ' Wait before sending the key

     Debug.Print "SendControlKey_V3: Sending key code " & keyCode & "."
     objScreen.SendControlKey keyCode ' Send the specified control key

     Call WaitUntilReady_V3(waitAfterMs) ' Wait after sending key
End Sub

' --- Forward Navigation Functions (Version 3) ---

' Navigates from the Application Selection Menu through the full path
' to the Interest Amendments screen.
' Returns True if successful, False otherwise. Handles errors internally.
Private Function NavigateFromAppMenu_V3(ByVal sc As String, ByVal acct As String, ByVal brnd As String) As Boolean
    Dim confirmCode As String
    Dim starLoopCount As Long
    Const maxStarLoops As Long = 15 ' Prevent infinite loop

    NavigateFromAppMenu_V3 = False ' Default to failure

    If objScreen Is Nothing Then
        Debug.Print "NavigateFromAppMenu_V3: objScreen is Nothing."
        Exit Function
    End If

    ' --- Determine Confirmation Code based on Brand ---
    Select Case brnd
        Case "RBS", "RBG", "RBI", "VIR": confirmCode = "PRCIR#T#"
        Case "NWB", "CTS", "NWO", "IOM": confirmCode = "PRCIN#T#"
        Case "UBN": confirmCode = "PRCIJ#T#"
        Case "UBR": confirmCode = "PRCIK#T#"
        Case Else
            Debug.Print "NavigateFromAppMenu_V3: Invalid Brand '" & brnd & "'. Cannot proceed."
            MsgBox "Invalid Brand specified: '" & brnd & "'. Navigation aborted.", vbExclamation, SCRIPT_TITLE
            Exit Function
    End Select
    Debug.Print "NavigateFromAppMenu_V3: Using confirm code: " & confirmCode & " for Brand: " & brnd

    ' --- Step 1: Ensure on APPLICATION SELECTION MENU ---
    Debug.Print "NavigateFromAppMenu_V3: Verifying start screen: " & SCREEN_APP_MENU
    If Not VerifyScreen_V3(SCREEN_APP_MENU, SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH) Then
         Debug.Print "NavigateFromAppMenu_V3: Not starting on " & SCREEN_APP_MENU & ". Cannot perform full navigation."
         MsgBox "Automation expected to start on '" & SCREEN_APP_MENU & "' for full navigation path. Please check starting screen.", vbCritical, SCRIPT_TITLE
         Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V3: Confirmed on " & SCREEN_APP_MENU & "."

    ' --- Step 2: TERM ALL ---
    Debug.Print "NavigateFromAppMenu_V3: Sending TERM ALL (with 3 Transmits)..."
    Call SendTermAll_V3("TERM ALL", CMD_LINE_ROW, CMD_LINE_COL) ' Use the helper for 3 transmits
    Debug.Print "NavigateFromAppMenu_V3: Sent TERM ALL + 3 Transmits."

    ' --- Step 3: Send Brand Code ---
    Debug.Print "NavigateFromAppMenu_V3: Sending Brand code '" & confirmCode & "'..."
    Call SendText_V3(confirmCode, CMD_LINE_ROW, CMD_LINE_COL) ' Use the helper for 1 transmit
    Debug.Print "NavigateFromAppMenu_V3: Sent Brand code + 1 Transmit."

    ' --- Step 3a/b: Handle potential intermediate screens (Command not recognized, RBS Header, Blank) ---
    Debug.Print "NavigateFromAppMenu_V3: Checking for Command not recognized..."
    If VerifyScreen_V3(SCREEN_CMD_NOT_RECOGNIZED, 20, 36, Len(SCREEN_CMD_NOT_RECOGNIZED)) Then
        Debug.Print "NavigateFromAppMenu_V3: Brand code '" & confirmCode & "' not recognized."
        MsgBox "Brand code '" & confirmCode & "' not recognized. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V3: Command not recognized screen NOT found."

    ' Handle RBS Header or blank screen, loop with STAR if needed until Option Handler
    Debug.Print "NavigateFromAppMenu_V3: Checking for Option Handler or intermediate screens..."
    starLoopCount = 0
    Do While Not VerifyScreen_V3(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_ROW, SCREEN_OPT_HANDLER_COL, SCREEN_OPT_HANDLER_LENGTH) And starLoopCount < maxStarLoops

        If VerifyScreen_V3(SCREEN_RBS_HEADER, 1, 1, Len(SCREEN_RBS_HEADER)) Then
             Debug.Print "NavigateFromAppMenu_V3: Detected " & SCREEN_RBS_HEADER & ". Sending Transmit."
             Call SendControlKey_V3(ControlKeyCode_Transmit)
        ElseIf Trim(objScreen.GetText(1, 1, 80)) = "" Then
             Debug.Print "NavigateFromAppMenu_V3: Detected blank screen. Sending STAR."
             Call SendText_V3("STAR", 1, 1) ' Uses SendText_V3 (1 Transmit)
        Else
             Debug.Print "NavigateFromAppMenu_V3: On unexpected screen (" & Trim(objScreen.GetText(1, 1, 80)) & ") while waiting for " & SCREEN_OPT_HANDLER_MAIN & "."
        End If
        starLoopCount = starLoopCount + 1
        ' Wait is handled by the Send calls

        If VerifyScreen_V3(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_ROW, SCREEN_OPT_HANDLER_COL, SCREEN_OPT_HANDLER_LENGTH) Then Exit Do
    Loop

    If Not VerifyScreen_V3(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_ROW, SCREEN_OPT_HANDLER_COL, SCREEN_OPT_HANDLER_LENGTH) Then
         Debug.Print "NavigateFromAppMenu_V3: Did not reach " & SCREEN_OPT_HANDLER_MAIN & " after maximum attempts (" & maxStarLoops & ")."
         MsgBox "Failed to navigate to Option Handler screen. Navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V3: Confirmed on " & SCREEN_OPT_HANDLER_MAIN & "."


    ' --- Step 4: Option 19 (Back Office System) ---
    Debug.Print "NavigateFromAppMenu_V3: Sending 19..."
    Call SendText_V3("19", OPTION_INPUT_ROW, OPTION_INPUT_COL) ' 1 Transmit
    Debug.Print "NavigateFromAppMenu_V3: Sent 19."
    Debug.Print "NavigateFromAppMenu_V3: Verifying screen: " & SCREEN_BO_SYSTEM
    If Not VerifyScreen_V3(SCREEN_BO_SYSTEM, SCREEN_BO_SYSTEM_ROW, SCREEN_BO_SYSTEM_COL, SCREEN_BO_SYSTEM_LENGTH) Then
        Debug.Print "NavigateFromAppMenu_V3: Did not reach " & SCREEN_BO_SYSTEM & "."
         MsgBox "Failed to navigate to Back Office System menu. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V3: Confirmed on " & SCREEN_BO_SYSTEM & "."

    ' --- Step 5: Option 1 (Master Index) ---
    Debug.Print "NavigateFromAppMenu_V3: Sending 1..."
    Call SendText_V3("1", BACK_OFFICE_OPT_ROW, BACK_OFFICE_OPT_COL) ' 1 Transmit
    Debug.Print "NavigateFromAppMenu_V3: Sent 1."
    Debug.Print "NavigateFromAppMenu_V3: Verifying screen: " & SCREEN_MASTER_INDEX
    If Not VerifyScreen_V3(SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH) Then
        Debug.Print "NavigateFromAppMenu_V3: Did not reach " & SCREEN_MASTER_INDEX & "."
         MsgBox "Failed to navigate to Master Index. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V3: Confirmed on " & SCREEN_MASTER_INDEX & "."

    ' --- Proceed with steps from Master Index to Interest Amendments ---
    ' This part is common with NavigateFromMasterIndex_V3, could be another helper if needed.
    ' --- Step 6: Master Index - Action 20, Sort Code ---
    Debug.Print "NavigateFromAppMenu_V3: Proceeding from Master Index..."
    Dim formattedSC As String: formattedSC = Format(sc, "000000")
    Debug.Print "NavigateFromAppMenu_V3: Sending 20 + S/C " & formattedSC & "..."
    Call WaitUntilReady_V3(100) ' Settle before multi-part input
    objScreen.PutText2 "20", MASTER_INDEX_ACTION_ROW, MASTER_INDEX_ACTION_COL
    objScreen.PutText2 formattedSC, MASTER_INDEX_SC_ROW, MASTER_INDEX_SC_COL
    Call SendControlKey_V3(ControlKeyCode_Transmit, 1000) ' Send 1 Transmit
    Debug.Print "NavigateFromAppMenu_V3: Sent 20 + S/C + 1 Transmit."
    Debug.Print "NavigateFromAppMenu_V3: Verifying screen: " & SCREEN_FILE_MAINT_IDX
    If Not VerifyScreen_V3(SCREEN_FILE_MAINT_IDX, SCREEN_FILE_MAINT_IDX_ROW, SCREEN_FILE_MAINT_IDX_COL, SCREEN_FILE_MAINT_IDX_LENGTH) Then
        Debug.Print "NavigateFromAppMenu_V3: Did not reach " & SCREEN_FILE_MAINT_IDX & "."
         MsgBox "Failed to navigate to File Maintenance Index. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V3: Confirmed on " & SCREEN_FILE_MAINT_IDX & "."

    ' --- Step 7: File Maint Idx - Action 20, Account Number ---
    Dim formattedAcct As String: formattedAcct = Format(acct, "00000000")
    Debug.Print "NavigateFromAppMenu_V3: Sending 20 + A/N " & formattedAcct & "..."
    Call WaitUntilReady_V3(100)
    objScreen.PutText2 "20", FILE_MAINT_IDX_ACTION_ROW, FILE_MAINT_IDX_ACTION_COL
    objScreen.PutText2 formattedAcct, FILE_MAINT_IDX_ACCOUNT_ROW, FILE_MAINT_IDX_ACCOUNT_COL
    Call SendControlKey_V3(ControlKeyCode_Transmit, 1000) ' Send 1 Transmit
    Debug.Print "NavigateFromAppMenu_V3: Sent 20 + A/N + 1 Transmit."
    Debug.Print "NavigateFromAppMenu_V3: Verifying screen: " & SCREEN_INTERNAL_TXNS
    If Not VerifyScreen_V3(SCREEN_INTERNAL_TXNS, SCREEN_INTERNAL_TXNS_ROW, SCREEN_INTERNAL_TXNS_COL, SCREEN_INTERNAL_TXNS_LENGTH) Then
        Debug.Print "NavigateFromAppMenu_V3: Did not reach " & SCREEN_INTERNAL_TXNS & "."
         MsgBox "Failed to navigate to Internal Transactions screen. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V3: Confirmed on " & SCREEN_INTERNAL_TXNS & "."

    ' --- Step 8: Internal Txns - Action 04 (Interest Amendments) ---
    Debug.Print "NavigateFromAppMenu_V3: Sending 04..."
    Call SendText_V3("04", INTERNAL_TXNS_ACTION_ROW, INTERNAL_TXNS_ACTION_COL) ' 1 Transmit
    Debug.Print "NavigateFromAppMenu_V3: Sent 04 + 1 Transmit."

    ' --- Step 9: Verify arrival at the target screen (Interest Amendments) ---
    Debug.Print "NavigateFromAppMenu_V3: Verifying target screen: " & SCREEN_INTEREST_AMENDMENTS & "."
    If VerifyScreen_V3(SCREEN_INTEREST_AMENDMENTS, SCREEN_INTEREST_AMENDMENTS_ROW, SCREEN_INTEREST_AMENDMENTS_COL, SCREEN_INTEREST_AMENDMENTS_LENGTH) Then
        Debug.Print "NavigateFromAppMenu_V3: Successfully reached primary target: " & SCREEN_INTEREST_AMENDMENTS & "."
        NavigateFromAppMenu_V3 = True ' Navigation Success!
    Else
        Debug.Print "NavigateFromAppMenu_V3: Did not reach " & SCREEN_INTEREST_AMENDMENTS & "."
        MsgBox "Failed to navigate to the expected Interest Amendment screen. Navigation aborted.", vbCritical, SCRIPT_TITLE
        NavigateFromAppMenu_V3 = False ' Still a navigation failure
    End If

    ' Returns NavigateFromAppMenu_V3 (True/False)
End Function

' Navigates from the Master Index screen to the Interest Amendments screen.
' Returns True if successful, False otherwise. Handles errors internally.
Private Function NavigateFromMasterIndex_V3(ByVal sc As String, ByVal acct As String) As Boolean
    NavigateFromMasterIndex_V3 = False ' Default to failure

    If objScreen Is Nothing Then
        Debug.Print "NavigateFromMasterIndex_V3: objScreen is Nothing."
        Exit Function
    End If

    ' --- Step 1: Ensure on MASTER INDEX ---
    Debug.Print "NavigateFromMasterIndex_V3: Verifying start screen: " & SCREEN_MASTER_INDEX & "."
    If Not VerifyScreen_V3(SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH) Then
         Debug.Print "NavigateFromMasterIndex_V3: Not starting on " & SCREEN_MASTER_INDEX & ". Cannot perform shorter navigation."
         MsgBox "Automation expected to start on '" & SCREEN_MASTER_INDEX & "' for shorter navigation path. Please check state.", vbCritical, SCRIPT_TITLE
         Exit Function
    End If
    Debug.Print "NavigateFromMasterIndex_V3: Confirmed on " & SCREEN_MASTER_INDEX & "."


    ' --- Step 2: Master Index - Action 20, Sort Code ---
    Debug.Print "NavigateFromMasterIndex_V3: Proceeding from Master Index..."
    Dim formattedSC As String: formattedSC = Format(sc, "000000")
    Debug.Print "NavigateFromMasterIndex_V3: Sending 20 + S/C " & formattedSC & "..."
    Call WaitUntilReady_V3(100) ' Settle before multi-part input
    objScreen.PutText2 "20", MASTER_INDEX_ACTION_ROW, MASTER_INDEX_ACTION_COL
    objScreen.PutText2 formattedSC, MASTER_INDEX_SC_ROW, MASTER_INDEX_SC_COL
    Call SendControlKey_V3(ControlKeyCode_Transmit, 1000) ' Send 1 Transmit
    Debug.Print "NavigateFromMasterIndex_V3: Sent 20 + S/C + 1 Transmit."
    Debug.Print "NavigateFromMasterIndex_V3: Verifying screen: " & SCREEN_FILE_MAINT_IDX
    If Not VerifyScreen_V3(SCREEN_FILE_MAINT_IDX, SCREEN_FILE_MAINT_IDX_ROW, SCREEN_FILE_MAINT_IDX_COL, SCREEN_FILE_MAINT_IDX_LENGTH) Then
        Debug.Print "NavigateFromMasterIndex_V3: Did not reach " & SCREEN_FILE_MAINT_IDX & "."
         MsgBox "Failed to navigate to File Maintenance Index. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromMasterIndex_V3: Confirmed on " & SCREEN_FILE_MAINT_IDX & "."

    ' --- Step 3: File Maint Idx - Action 20, Account Number ---
    Dim formattedAcct As String: formattedAcct = Format(acct, "00000000")
    Debug.Print "NavigateFromMasterIndex_V3: Sending 20 + A/N " & formattedAcct & "..."
    Call WaitUntilReady_V3(100)
    objScreen.PutText2 "20", FILE_MAINT_IDX_ACTION_ROW, FILE_MAINT_IDX_ACTION_COL
    objScreen.PutText2 formattedAcct, FILE_MAINT_IDX_ACCOUNT_ROW, FILE_MAINT_IDX_ACCOUNT_COL
    Call SendControlKey_V3(ControlKeyCode_Transmit, 1000) ' Send 1 Transmit
    Debug.Print "NavigateFromMasterIndex_V3: Sent 20 + A/N + 1 Transmit."
    Debug.Print "NavigateFromMasterIndex_V3: Verifying screen: " & SCREEN_INTERNAL_TXNS
    If Not VerifyScreen_V3(SCREEN_INTERNAL_TXNS, SCREEN_INTERNAL_TXNS_ROW, SCREEN_INTERNAL_TXNS_COL, SCREEN_INTERNAL_TXNS_LENGTH) Then
        Debug.Print "NavigateFromMasterIndex_V3: Did not reach " & SCREEN_INTERNAL_TXNS & "."
         MsgBox "Failed to navigate to Internal Transactions screen. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromMasterIndex_V3: Confirmed on " & SCREEN_INTERNAL_TXNS & "."

    ' --- Step 4: Internal Txns - Action 04 (Interest Amendments) ---
    Debug.Print "NavigateFromMasterIndex_V3: Sending 04..."
    Call SendText_V3("04", INTERNAL_TXNS_ACTION_ROW, INTERNAL_TXNS_ACTION_COL) ' 1 Transmit
    Debug.Print "NavigateFromMasterIndex_V3: Sent 04 + 1 Transmit."

    ' --- Step 5: Verify arrival at the target screen (Interest Amendments) ---
    Debug.Print "NavigateFromMasterIndex_V3: Verifying target screen: " & SCREEN_INTEREST_AMENDMENTS & "."
    If VerifyScreen_V3(SCREEN_INTEREST_AMENDMENTS, SCREEN_INTEREST_AMENDMENTS_ROW, SCREEN_INTEREST_AMENDMENTS_COL, SCREEN_INTEREST_AMENDMENTS_LENGTH) Then
        Debug.Print "NavigateFromMasterIndex_V3: Successfully reached primary target: " & SCREEN_INTEREST_AMENDMENTS & "."
        NavigateFromMasterIndex_V3 = True ' Navigation Success!
    Else
        Debug.Print "NavigateFromMasterIndex_V3: Did not reach " & SCREEN_INTEREST_AMENDMENTS & "."
        MsgBox "Failed to navigate to the expected Interest Amendment screen. Navigation aborted.", vbCritical, SCRIPT_TITLE
        NavigateFromMasterIndex_V3 = False ' Still a navigation failure
    End If

    ' Returns NavigateFromMasterIndex_V3 (True/False)
End Function


' --- Backward Navigation Function (Version 3) ---
' Navigates back to the specified target screen (Master Index or App Menu)
' from the current screen (expected to be Interest Amendments or a failure screen).
' Returns True if successful, False otherwise. Handles errors internally.
Private Function NavigateBack_V3(ByVal targetScreenEnum As Long) As Boolean
    NavigateBack_V3 = False ' Default to failure
    Dim backNavSuccess As Boolean: backNavSuccess = False

    If objScreen Is Nothing Then
        Debug.Print "NavigateBack_V3: objScreen is Nothing."
        Exit Function
    End If

    Debug.Print "NavigateBack_V3: Attempting to navigate back to target: " & IIf(targetScreenEnum = NAV_TARGET_APP_MENU, SCREEN_APP_MENU, SCREEN_MASTER_INDEX)

    ' --- Step 1: Navigate back to BACK OFFICE SYSTEM from current screen (expected Interest Amendments) via F2 loop ---
    Debug.Print "NavigateBack_V3: Navigating back to " & SCREEN_BO_SYSTEM & " via F2 loop."
    backNavSuccess = LoopControlKeyUntilScreen_V3(ControlKeyCode_F2, SCREEN_BO_SYSTEM, SCREEN_BO_SYSTEM_ROW, SCREEN_BO_SYSTEM_COL, SCREEN_BO_SYSTEM_LENGTH, 10) ' Max 10 F2 presses

    If Not backNavSuccess Then
        Debug.Print "NavigateBack_V3: Failed to reach " & SCREEN_BO_SYSTEM & " via F2 loop."
        MsgBox "Failed to navigate back to " & SCREEN_BO_SYSTEM & ". Back navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function ' Critical failure
    End If
     Debug.Print "NavigateBack_V3: Confirmed on " & SCREEN_BO_SYSTEM & "."


    ' --- Step 2: Navigate from BACK OFFICE SYSTEM to target (Master Index or App Menu) via F3 loop ---
    If targetScreenEnum = NAV_TARGET_MASTER_INDEX Then
        ' Target is Master Index
        Debug.Print "NavigateBack_V3: Target is " & SCREEN_MASTER_INDEX & ". Navigating via F3 loop."
        backNavSuccess = LoopControlKeyUntilScreen_V3(ControlKeyCode_F3, SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH, 10) ' Max 10 F3 presses
        If backNavSuccess Then
            Debug.Print "NavigateBack_V3: Successfully reached " & SCREEN_MASTER_INDEX & "."
            NavigateBack_V3 = True ' Success!
        Else
            Debug.Print "NavigateBack_V3: Failed to reach " & SCREEN_MASTER_INDEX & " via F3 loop."
            MsgBox "Failed to navigate back to " & SCREEN_MASTER_INDEX & ". Back navigation aborted.", vbCritical, SCRIPT_TITLE
             ' NavigateBack_V3 is already False
        End If

    ElseIf targetScreenEnum = NAV_TARGET_APP_MENU Then
        ' Target is Application Selection Menu
        Debug.Print "NavigateBack_V3: Target is " & SCREEN_APP_MENU & ". Navigating via F3 loop."
        backNavSuccess = LoopControlKeyUntilScreen_V3(ControlKeyCode_F3, SCREEN_APP_MENU, SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH, 10) ' Max 10 F3 presses
         If backNavSuccess Then
            Debug.Print "NavigateBack_V3: Successfully reached " & SCREEN_APP_MENU & "."
            NavigateBack_V3 = True ' Success!
        Else
            Debug.Print "NavigateBack_V3: Failed to reach " & SCREEN_APP_MENU & " via F3 loop."
            MsgBox "Failed to navigate back to " & SCREEN_APP_MENU & ". Back navigation aborted.", vbCritical, SCRIPT_TITLE
             ' NavigateBack_V3 is already False
        End If
    Else
        Debug.Print "NavigateBack_V3: Invalid target screen enum: " & targetScreenEnum
         MsgBox "Internal Error: Invalid back navigation target specified.", vbCritical, SCRIPT_TITLE
         ' NavigateBack_V3 is already False
    End If

    ' Returns NavigateBack_V3 (True/False)
End Function

' Helper function to repeatedly send a control key until a specific screen is reached.
' Returns True if the screen is reached within max attempts, False otherwise.
Private Function LoopControlKeyUntilScreen_V3(ByVal keyCode As Long, _
                                           ByVal targetScreenText As String, _
                                           ByVal targetRow As Long, ByVal targetCol As Long, ByVal targetLength As Long, _
                                           ByVal maxAttempts As Integer) As Boolean
    LoopControlKeyUntilScreen_V3 = False
    Dim attempts As Integer: attempts = 0

    Debug.Print "LoopControlKeyUntilScreen_V3: Looping with key " & keyCode & " until '" & targetScreenText & "' at R" & targetRow & "C" & targetCol & "."

    Do While attempts < maxAttempts
        If VerifyScreen_V3(targetScreenText, targetRow, targetCol, targetLength) Then
            Debug.Print "LoopControlKeyUntilScreen_V3: Reached target screen '" & targetScreenText & "' on attempt " & attempts & "."
            LoopControlKeyUntilScreen_V3 = True
            Exit Function ' Success
        End If

        If attempts < maxAttempts Then
            Debug.Print "LoopControlKeyUntilScreen_V3: Not on target screen. Sending key code " & keyCode & ". Attempt " & attempts + 1 & "."
            Call SendControlKey_V3(keyCode) ' Send the key, includes WaitUntilReady
            attempts = attempts + 1
        End If
         ' Wait is handled by SendControlKey_V3
    Loop

    Debug.Print "LoopControlKeyUntilScreen_V3: Failed to reach '" & targetScreenText & "' after max attempts (" & maxAttempts & ")."
    ' LoopControlKeyUntilScreen_V3 is already False
End Function
