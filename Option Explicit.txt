Attribute VB_Name = "mod_InterestAmend_FocusCore"
Option Explicit

' --- Reflection COM Objects ---
Dim RApp As Object
Dim RFrame As Object
Dim RView As Object
Dim RTerminal As Object
Dim RScreen As Object

' --- Key Screen Title Constants ---
Private Const SCREEN_APP_MENU As String = "APPLICATION SELECTION MENU" ' R1, C28, L30
Private Const SCREEN_OPT_HANDLER_MAIN As String = "OPTION HANDLER FUNCTION SCREEN" ' R1, C26, L35 (from source)
Private Const SCREEN_OPT_HANDLER_SUB As String = "SP2001" ' R2 (from source, additional check)
Private Const SCREEN_CMD_NOT_RECOGNIZED As String = "Command not recognized" ' R20, C36, L22
Private Const SCREEN_BO_SYSTEM As String = "BACK OFFICE SYSTEM" ' R1, C7, L20 (from source)
Private Const SCREEN_MASTER_INDEX As String = "MASTER INDEX" ' R1, C28, L12 (from source)
Private Const SCREEN_FILE_MAINT_IDX As String = "FILE MAINTENANCE INPUT INDEX" ' R1, C21, L30 (source used L40, 30 is more accurate text length)
Private Const SCREEN_INTERNAL_TXNS As String = "INTERNAL TXNS" ' R1, C19 (from target, needs coordinate verification)
Private Const SCREEN_INTEREST_AMENDMENTS As String = "INTEREST AMENDMENTS" ' R1, C30 (estimate from target)
Private Const SCREEN_INTEREST_DETAILS_SUB As String = "INTEREST DETAILS" ' R2, C30 (estimate from target, fallback)
Private Const SCREEN_RBS_HEADER As String = "ROYAL BANK OF SCOTLAND" ' R1, C1, L24 (from source)
Private Const SCREEN_SECURITY_REMINDER As String = "SECURITY REMINDER" ' R1, C29, L20 (from source)


' --- Script Title for MsgBoxes ---
Private Const SCRIPT_TITLE As String = "Focused Interest Amendment"

' --- Main Processing Sub ---
Sub ProcessSingleAmendment_Focus()
    Dim ws As Worksheet
    Dim sortCode As String, accountNumber As String, brand As String
    Dim success As Boolean
    Dim dataSheetName As String
    Dim testRow As Long
    Dim cellValueSortCode As Variant ' Use Variant to check for Empty more easily

    ' !!!!! DEFINE YOUR DATA SHEET NAME AND TEST ROW HERE !!!!!
    dataSheetName = "Sheet1"  ' <<<< CONFIRM "Sheet1" IS THE ACTUAL NAME OF YOUR DATA SHEET TAB
    testRow = 2               ' <<<< This should be the first row with data (e.g., 524131)
    ' !!!!! --------------------------------------------- !!!!!

    ' 1. Connect to Reflection
    ' IMPORTANT: "NTS Back Office - Prod.rd3x" must be OPEN in Reflection BEFORE running this macro.
    If Not ConnectAndSetScreen("NTS Back Office - Prod.rd3x") Then
        MsgBox "Failed to connect to Reflection. Ensure 'NTS Back Office - Prod.rd3x' is open.", vbCritical, SCRIPT_TITLE
        Exit Sub
    End If
    Debug.Print "ProcessSingle: Successfully connected and RScreen is set."

    ' 2. Set worksheet and get data for test row
    On Error Resume Next ' To catch error if sheet name is wrong
    Set ws = Nothing ' Initialize to Nothing
    Set ws = ThisWorkbook.Worksheets(dataSheetName)
    If Err.Number <> 0 Or ws Is Nothing Then
        On Error GoTo 0 ' Reset error handling
        MsgBox "Could not find or set worksheet named: '" & dataSheetName & "'." & vbCrLf & _
               "Please check the sheet name in the VBA code (dataSheetName variable) and in your Excel file.", vbCritical, SCRIPT_TITLE
        CleanUpReflectionObjects_Focus ' Clean up if connection was made
        Exit Sub
    End If
    On Error GoTo 0 ' Reset error handling
    Debug.Print "Using data from sheet: '" & ws.Name & "', attempting to read from Row: " & testRow

    ' --- DEBUG: Check if the sheet and row are accessible and what's in A[testRow] ---
    On Error Resume Next ' To see if even accessing the cell causes an error
    cellValueSortCode = ws.Cells(testRow, "A").Value
    If Err.Number <> 0 Then
        On Error GoTo 0
        MsgBox "Error accessing cell A" & testRow & " on sheet '" & dataSheetName & "'. Error: " & Err.Description, vbCritical, SCRIPT_TITLE
        CleanUpReflectionObjects_Focus
        Exit Sub
    End If
    On Error GoTo 0
    Debug.Print "Value in cell A" & testRow & " on sheet '" & ws.Name & "': [" & cellValueSortCode & "]"
    Debug.Print "Is cell A" & testRow & " empty? " & IsEmpty(cellValueSortCode)
    Debug.Print "Is cell A" & testRow & " a number? " & IsNumeric(cellValueSortCode)
    Debug.Print "Does cell A" & testRow & " contain just spaces? " & (Trim(CStr(cellValueSortCode)) = "")
    ' --- END DEBUG ---

    If IsEmpty(ws.Cells(testRow, "A").Value) Or Trim(CStr(ws.Cells(testRow, "A").Value)) = "" Then
        MsgBox "No data found in test row " & testRow & ", Column A on sheet '" & dataSheetName & "'." & vbCrLf & _
               "Value appears empty or contains only spaces. Please check your test data and the 'testRow' variable in the VBA code.", vbExclamation, SCRIPT_TITLE
        CleanUpReflectionObjects_Focus
        Exit Sub
    End If

    ' IMPORTANT: Using Column A, B, C as defined in THIS module's ProcessSingleAmendment_Focus
    ' The source code used different columns (C, D, B) but we need to stick to the A,B,C pattern here.
    sortCode = Trim(CStr(ws.Cells(testRow, "A").Value))
    accountNumber = Trim(CStr(ws.Cells(testRow, "B").Value))
    brand = UCase(Trim(CStr(ws.Cells(testRow, "C").Value)))

    Debug.Print "-----------------------------------------------------"
    Debug.Print "Processing Excel Row: " & testRow & " | S/C: [" & sortCode & "] | Acc: [" & accountNumber & "] | Brand: [" & brand & "]"

    ' Basic data validation before attempting navigation
    If sortCode = "" Or accountNumber = "" Or brand = "" Then
        Debug.Print "Skipped row " & testRow & " - Missing S/C, Account, or Brand after trimming."
        ws.Cells(testRow, "H").Value = "Skipped - Missing Data" ' Status in Col H
        CleanUpReflectionObjects_Focus
        Exit Sub
    End If

    ' 3. Perform navigation
    ' The NavigateToTargetScreen_Focus function now incorporates more robust error handling and screen checks
    success = NavigateToTargetScreen_Focus(sortCode, accountNumber, brand)

    If success Then
        Debug.Print "Successfully navigated to the target screen for row " & testRow
        ws.Cells(testRow, "H").Value = "Navigated - OK"
        MsgBox "PAUSED: On the target screen (Interest Amendments or similar) for S/C: " & sortCode & ", A/N: " & accountNumber & "." & vbCrLf & _
               "You can now manually verify/perform the amendment and then click OK to clean up.", vbInformation, SCRIPT_TITLE
        ' Placeholder for actual amendment logic
        ' *** YOUR AMENDMENT CODE GOES HERE ***
        ' Remember to handle navigating back to the main menu or logging out if needed after the amendment.
        ' For this single row test, we just pause and then clean up.
        
    Else
        Debug.Print "Navigation FAILED for row " & testRow
        ws.Cells(testRow, "H").Value = "Navigation Failed"
        MsgBox "Navigation failed for S/C: " & sortCode & ", A/N: " & accountNumber & "." & vbCritical, SCRIPT_TITLE
    End If

    CleanUpReflectionObjects_Focus
    MsgBox "Finished processing test row " & testRow, vbInformation, SCRIPT_TITLE
End Sub

' --- PROVEN Connection Logic (based on V8/V9 successful debug) ---
Private Function ConnectAndSetScreen(ByVal targetSessionFilePart As String) As Boolean
    On Error GoTo ErrorHandler
    ConnectAndSetScreen = False

    Debug.Print "ConnectFocus: Attempting GetObject(""Reflection Workspace"")"
    On Error Resume Next ' Allow GetObject to fail if Reflection not running
    Set RApp = GetObject("Reflection Workspace")
    If Err.Number <> 0 Or RApp Is Nothing Then
        Err.Clear
        Debug.Print "ConnectFocus: GetObject(""Reflection Workspace"") FAILED. Ensure Reflection is running and automation is enabled."
        MsgBox "Could not connect to Reflection Workspace." & vbCrLf & _
               "Please ensure Reflection is running and that 'Enable Reflection Automation' is checked in the Reflection Workspace settings.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "ConnectFocus: RApp obtained. TypeName: " & TypeName(RApp)
    On Error GoTo ErrorHandler ' Restore main error handler

    Set RFrame = RApp.GetObject("Frame")
    If RFrame Is Nothing Then Debug.Print "ConnectFocus: RFrame is Nothing.": Exit Function
    Debug.Print "ConnectFocus: RFrame obtained. TypeName: " & TypeName(RFrame)

    If Not RFrame.Visible Then RFrame.Visible = True
    ' RFrame.Activate ' Removed as it caused issues previously, GetView should activate it implicitly if needed.

    Debug.Print "ConnectFocus: Attempting RFrame.GetViewByTitleText(""" & targetSessionFilePart & """)..."
    On Error Resume Next ' For GetViewByTitleText
    ' Search for the session by matching the *end* of the title text
    ' This is more robust if the full path is sometimes included in the title bar
    Dim viewFound As Boolean: viewFound = False
    Dim view As Object
    For Each view In RFrame.Views
        ' Check if the view title ends with the target session file part
        If InStr(1, view.TitleText, targetSessionFilePart, vbTextCompare) > 0 Then ' Using InStr allows partial match, could use Right() for exact end match
             Set RView = view
             viewFound = True
             Exit For
        End If
    Next view

    If Not viewFound Or RView Is Nothing Then
        Err.Clear
        Debug.Print "ConnectFocus: RFrame.GetViewByTitleText FAILED. Could not find view matching '" & targetSessionFilePart & "'."
        MsgBox "Could not find a Reflection session with '" & targetSessionFilePart & "' in its title." & vbCrLf & _
               "Please ensure the correct session file is open in Reflection.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "ConnectFocus: RView obtained. Title: '" & RView.TitleText & "'. TypeName: " & TypeName(RView)
    On Error GoTo ErrorHandler

    ' Try activating the view explicitly now that we have it, if needed
    On Error Resume Next
    RView.Activate
    If Err.Number <> 0 Then Debug.Print "ConnectFocus: Info - Error RView.Activate: " & Err.Description: Err.Clear
    On Error GoTo ErrorHandler


    Debug.Print "ConnectFocus: Attempting Set RTerminal = RView.Control..."
    On Error Resume Next ' For RView.Control
    Set RTerminal = RView.Control
    If Err.Number <> 0 Or RTerminal Is Nothing Then
        Debug.Print "ConnectFocus: Error on Set RTerminal = RView.Control. Error " & Err.Number & ": " & Err.Description
        Err.Clear
        Exit Function
    End If
    Debug.Print "ConnectFocus: RTerminal obtained. TypeName: " & TypeName(RTerminal)
    On Error GoTo ErrorHandler

    Debug.Print "ConnectFocus: Attempting Set RScreen = RTerminal.Screen..."
    On Error Resume Next ' For RTerminal.Screen
    Set RScreen = RTerminal.Screen
    If Err.Number <> 0 Or RScreen Is Nothing Then
        Debug.Print "ConnectFocus: Error on Set RScreen = RTerminal.Screen. Error " & Err.Number & ": " & Err.Description
        Err.Clear
        Exit Function
    End If
    Debug.Print "ConnectFocus: RScreen obtained. TypeName: " & TypeName(RScreen)
    On Error GoTo ErrorHandler

    ' Optional settings - allow them to fail gracefully
    On Error Resume Next
    RTerminal.DisableKeystrokeProductivity = True
    If Err.Number <> 0 Then Debug.Print "ConnectFocus: Info - Error DisableKeystrokeProductivity: " & Err.Description: Err.Clear
    RTerminal.DisableScreenHistory = True
    If Err.Number <> 0 Then Debug.Print "ConnectFocus: Info - Error DisableScreenHistory: " & Err.Description: Err.Clear
    On Error GoTo ErrorHandler

    ConnectAndSetScreen = True
    Debug.Print "ConnectFocus: All core Reflection objects (RApp, RFrame, RView, RTerminal, RScreen) set successfully."
    Exit Function
ErrorHandler:
    Debug.Print "ConnectAndSetScreen Error " & Err.Number & ": " & Err.Description
    ConnectAndSetScreen = False
End Function

Private Sub CleanUpReflectionObjects_Focus()
    ' Release objects in reverse order
    Set RScreen = Nothing
    Set RTerminal = Nothing
    Set RView = Nothing
    Set RFrame = Nothing
    Set RApp = Nothing
    Debug.Print "Focused Reflection objects released."
End Sub

' --- Screen Interaction Helpers (renamed with _Focus suffix) ---

' Modified to include Security Screen check
Private Sub WaitReady_Focus(Optional settleTimeMs As Long = 200, Optional timeoutMs As Long = 10000)
    If RScreen Is Nothing Then Exit Sub
    Dim startTime As Date: startTime = Now
    Do While RScreen.OIA.XStatus <> 0
        If DateDiff("s", startTime, Now) * 1000 > timeoutMs Then
            Debug.Print "WaitReady_Focus: Timeout waiting for XStatus=0."
            Exit Do
        End If
        ' Use smaller increments for OIA wait
        RScreen.WaitForHostSettle 50, 20: DoEvents ' Use the source code's pattern here
    Loop

    ' ** ADD SECURITY SCREEN CHECK HERE **
    ' It's common for the security reminder to pop up *after* a screen is ready
    ' but before the next input. Checking it here handles it proactively.
    Check_SecurityScreen_Focus

    ' Wait for the screen contents to settle after OIA is ready
    RScreen.WaitForHostSettle settleTimeMs, timeoutMs
End Sub

' New function based on source code's Check_SecurityScreen
Private Function Check_SecurityScreen_Focus() As Boolean
    Check_SecurityScreen_Focus = False
    If RScreen Is Nothing Then Exit Function

    ' Check for the SECURITY REMINDER screen
    If VerifyScreen_Focus(SCREEN_SECURITY_REMINDER, 1, 29, 20) Then
        Debug.Print "Check_SecurityScreen_Focus: Detected Security Reminder. Sending 'Y'."
        Call SendData_Focus("Y", 22, 11, True) ' Send Y and transmit
        Debug.Print "Check_SecurityScreen_Focus: Handled Security Reminder."
        Check_SecurityScreen_Focus = True
    End If
End Function


Private Function VerifyScreen_Focus(expectedText As String, rowNum As Long, colNum As Long, Optional ByVal length As Long = 0) As Boolean
    If RScreen Is Nothing Then VerifyScreen_Focus = False: Exit Function
    Call WaitReady_Focus(100) ' Wait for ready before checking screen content
    If length = 0 Then length = Len(expectedText)
    Dim actualText As String: actualText = Trim(RScreen.GetText(rowNum, colNum, length))
    If UCase(actualText) = UCase(expectedText) Then
        VerifyScreen_Focus = True
    Else
        VerifyScreen_Focus = False
        Debug.Print "VerifyScreen_Focus FAILED: Expected '" & expectedText & "' at R" & rowNum & "C" & colNum & "L" & length & ", Found '" & actualText & "'"
    End If
End Function

Private Sub SendData_Focus(data As String, rowNum As Long, colNum As Long, Optional sendTransmit As Boolean = True)
    If RScreen Is Nothing Then Exit Sub
    Call WaitReady_Focus(100) ' Wait for ready before sending input
    RScreen.PutText2 data, rowNum, colNum
    Debug.Print "Sent data '" & data & "' to R" & rowNum & "C" & colNum & ". Transmit=" & sendTransmit
    If sendTransmit Then
        RScreen.SendControlKey ControlKeyCode_Transmit
        Call WaitReady_Focus(500) ' Increased default wait after transmit, includes Security check
    End If
End Sub

Private Sub SendKey_Focus(keyCode As Long, Optional waitAfterMs As Long = 500)
    If RScreen Is Nothing Then Exit Sub
    Call WaitReady_Focus(100) ' Wait for ready before sending key
    Debug.Print "Sending ControlKey: " & keyCode
    RScreen.SendControlKey keyCode
    Call WaitReady_Focus(waitAfterMs) ' Includes Security check
End Sub

' --- Navigation Logic (Updated) ---
Private Function NavigateToTargetScreen_Focus(ByVal sc As String, ByVal acct As String, ByVal brnd As String) As Boolean
    Dim confirmCode As String
    Dim starLoopCount As Long
    Dim maxStarLoops As Long: maxStarLoops = 15 ' Prevent infinite loop

    NavigateToTargetScreen_Focus = False ' Default to failure

    If RScreen Is Nothing Then
        Debug.Print "NavigateFocus: RScreen object is not available. Cannot navigate."
        Exit Function
    End If

    ' --- Determine Confirmation Code based on Brand ---
    Select Case brnd
        Case "RBS", "RBG", "RBI", "VIR": confirmCode = "PRCIR#T#"
        Case "NWB", "CTS", "NWO", "IOM": confirmCode = "PRCIN#T#"
        Case "UBN": confirmCode = "PRCIJ#T#"
        Case "UBR": confirmCode = "PRCIK#T#"
        Case Else
            Debug.Print "NavigateFocus: Invalid Brand '" & brnd & "'. Cannot proceed."
            MsgBox "Invalid Brand specified: '" & brnd & "'. Navigation aborted.", vbExclamation, SCRIPT_TITLE
            Exit Function
    End Select
    Debug.Print "NavigateFocus: Using confirm code: " & confirmCode & " for Brand: " & brnd

    ' --- Step 1: Ensure on APPLICATION SELECTION MENU ---
    Debug.Print "NavigateFocus: Verifying start screen: " & SCREEN_APP_MENU
    If Not VerifyScreen_Focus(SCREEN_APP_MENU, 1, 28, 30) Then
         Debug.Print "NavigateFocus: Not starting on " & SCREEN_APP_MENU & "."
         MsgBox "Macro must start on '" & SCREEN_APP_MENU & "'. Please manually navigate and restart.", vbExclamation, SCRIPT_TITLE
         Exit Function
    End If
    Debug.Print "NavigateFocus: Confirmed on " & SCREEN_APP_MENU

    ' --- Step 2: TERM ALL ---
    Debug.Print "NavigateFocus: Sending TERM ALL..."
    Call SendData_Focus("TERM ALL", 21, 13, True)
    Debug.Print "NavigateFocus: Sent TERM ALL."
    ' After TERM ALL, wait implicitly via SendData_Focus's internal WaitReady_Focus

    ' --- Step 3: Brand Code ---
    Debug.Print "NavigateFocus: Sending Brand code '" & confirmCode & "'..."
    Call SendData_Focus(confirmCode, 21, 13, True)
    Debug.Print "NavigateFocus: Sent Brand code."
    ' Wait implicitly via SendData_Focus's internal WaitReady_Focus

    ' --- Step 3a/b: Handle potential intermediate screens (Command not recognized, RBS Header, Blank) ---
    ' Check for "Command not recognized" (R20, C36, L22)
    Debug.Print "NavigateFocus: Checking for Command not recognized..."
    If VerifyScreen_Focus(SCREEN_CMD_NOT_RECOGNIZED, 20, 36, 22) Then
        Debug.Print "NavigateFocus: Brand code '" & confirmCode & "' not recognized. Navigation failed."
        MsgBox "Brand code '" & confirmCode & "' not recognized on the host system. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFocus: Command not recognized screen NOT found."

    ' Check for "ROYAL BANK OF SCOTLAND" header or blank screen, loop with STAR if needed
    Debug.Print "NavigateFocus: Checking for Option Handler or intermediate screens..."
    starLoopCount = 0
    ' Expected: OPT_HANDLER (R1, C26, L35)
    Do While Not VerifyScreen_Focus(SCREEN_OPT_HANDLER_MAIN, 1, 26, 35) And starLoopCount < maxStarLoops

        ' Check if RBS Header is present (happens on some logins/configurations)
        If VerifyScreen_Focus(SCREEN_RBS_HEADER, 1, 1, 24) Then
             Debug.Print "NavigateFocus: Detected " & SCREEN_RBS_HEADER & ". Sending Transmit."
             Call SendKey_Focus(ControlKeyCode_Transmit, 500)
             Debug.Print "NavigateFocus: Sent Transmit after " & SCREEN_RBS_HEADER
             ' WaitReady_Focus is called by SendKey_Focus, handles Security Reminder implicitly.
             ' After Transmit from RBS Header, screen *should* go towards Option Handler.
        ElseIf Trim(RScreen.GetText(1, 1, 80)) = "" Then
             Debug.Print "NavigateFocus: Detected blank screen. Sending STAR."
             Call SendData_Focus("STAR", 1, 1, True)
             Debug.Print "NavigateFocus: Sent STAR to blank screen."
             ' WaitReady_Focus is called by SendData_Focus, handles Security Reminder implicitly.
             ' After STAR, screen *should* go towards Option Handler.
        Else
             ' Unexpected screen. Print details and potentially exit loop early?
             ' For robustness, let's just increment the counter and hope the STAR or Transmit eventually works or the loop times out.
             ' A more complex script might try PF3 or other recovery steps here.
             Debug.Print "NavigateFocus: On unexpected screen while waiting for " & SCREEN_OPT_HANDLER_MAIN & ". Title attempt R1C1L80: '" & Trim(RScreen.GetText(1, 1, 80)) & "'"
        End If

        starLoopCount = starLoopCount + 1
        Call WaitReady_Focus(500) ' Add a small pause inside the loop before re-checking

        If VerifyScreen_Focus(SCREEN_OPT_HANDLER_MAIN, 1, 26, 35) Then
            Debug.Print "NavigateFocus: Reached " & SCREEN_OPT_HANDLER_MAIN & " after " & starLoopCount & " attempts."
            Exit Do ' Successfully reached Option Handler
        End If

    Loop

    ' Final check after the loop
    If Not VerifyScreen_Focus(SCREEN_OPT_HANDLER_MAIN, 1, 26, 35) Then
         ' Optionally check for the SP2001 subtitle as source code did
         If Not (InStr(1, UCase(Trim(RScreen.GetText(2, 1, 80))), UCase(SCREEN_OPT_HANDLER_SUB)) > 0 _
                And VerifyScreen_Focus(SCREEN_OPT_HANDLER_MAIN, 1, 26, 35)) Then ' Re-verify main title with subtitle
              Debug.Print "NavigateFocus: Did not reach " & SCREEN_OPT_HANDLER_MAIN & " after maximum attempts (" & maxStarLoops & "). Last screen title (R1C1L80): '" & Trim(RScreen.GetText(1, 1, 80)) & "'"
              MsgBox "Failed to navigate to Option Handler screen. Navigation aborted.", vbCritical, SCRIPT_TITLE
              Exit Function
         Else
              Debug.Print "NavigateFocus: Reached " & SCREEN_OPT_HANDLER_MAIN & " (verified with " & SCREEN_OPT_HANDLER_SUB & " subtitle)."
         End If
    Else
        Debug.Print "NavigateFocus: Confirmed on " & SCREEN_OPT_HANDLER_MAIN
    End If


    ' --- Step 4: Option 19 ---
    Debug.Print "NavigateFocus: Sending 19..."
    Call SendData_Focus("19", 21, 16, True)
    Debug.Print "NavigateFocus: Sent 19."
    ' Expected: BO_SYSTEM (R1,C7, L20)
    Debug.Print "NavigateFocus: Verifying screen: " & SCREEN_BO_SYSTEM
    If Not VerifyScreen_Focus(SCREEN_BO_SYSTEM, 1, 7, 20) Then
        Debug.Print "NavigateFocus: Did not reach " & SCREEN_BO_SYSTEM & ". Last screen title (R1C1L80): '" & Trim(RScreen.GetText(1, 1, 80)) & "'"
        MsgBox "Failed to navigate to Back Office System menu. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFocus: Confirmed on " & SCREEN_BO_SYSTEM

    ' --- Step 5: Option 01 ---
    Debug.Print "NavigateFocus: Sending 01..."
    Call SendData_Focus("01", 22, 16, True)
    Debug.Print "NavigateFocus: Sent 01."
    ' Expected: MASTER_INDEX (R1,C28, L12)
    Debug.Print "NavigateFocus: Verifying screen: " & SCREEN_MASTER_INDEX
    If Not VerifyScreen_Focus(SCREEN_MASTER_INDEX, 1, 28, 12) Then
        Debug.Print "NavigateFocus: Did not reach " & SCREEN_MASTER_INDEX & ". Last screen title (R1C1L80): '" & Trim(RScreen.GetText(1, 1, 80)) & "'"
         MsgBox "Failed to navigate to Master Index. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFocus: Confirmed on " & SCREEN_MASTER_INDEX

    ' --- Step 6: Master Index - Action 20, Sort Code ---
    ' Using Format to ensure correct zero-padding as per source code logic example
    Dim formattedSC As String: formattedSC = Format(sc, "000000")
    Debug.Print "NavigateFocus: Sending 20 + S/C " & formattedSC & "..."
    Call WaitReady_Focus(100) ' Settle before multi-part input
    RScreen.PutText2 "20", 22, 8
    RScreen.PutText2 formattedSC, 22, 74
    Call SendKey_Focus(ControlKeyCode_Transmit, 1000) ' Send Transmit, wait 1s
    Debug.Print "NavigateFocus: Sent 20 + S/C."
    ' Expected: FILE_MAINT_IDX (R1,C21, L30)
    Debug.Print "NavigateFocus: Verifying screen: " & SCREEN_FILE_MAINT_IDX
    If Not VerifyScreen_Focus(SCREEN_FILE_MAINT_IDX, 1, 21, 30) Then
        Debug.Print "NavigateFocus: Did not reach " & SCREEN_FILE_MAINT_IDX & ". Last screen title (R1C1L80): '" & Trim(RScreen.GetText(1, 1, 80)) & "'"
         MsgBox "Failed to navigate to File Maintenance Index. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFocus: Confirmed on " & SCREEN_FILE_MAINT_IDX

    ' --- Step 7: File Maint Idx - Action 20, Account Number ---
    ' Using Format to ensure correct zero-padding as per source code logic example
    ' NOTE: Keeping Action 20 here as per target code flow, leads to INTERNAL TXNS,
    ' unlike source code's Action 01 leading to CUSTOMER INFO INDEX.
    Dim formattedAcct As String: formattedAcct = Format(acct, "00000000")
    Debug.Print "NavigateFocus: Sending 20 + A/N " & formattedAcct & "..."
    Call WaitReady_Focus(100)
    RScreen.PutText2 "20", 22, 8
    RScreen.PutText2 formattedAcct, 22, 21
    Call SendKey_Focus(ControlKeyCode_Transmit, 1000)
    Debug.Print "NavigateFocus: Sent 20 + A/N."
    ' Expected: INTERNAL_TXNS (R1,C19)
    Debug.Print "NavigateFocus: Verifying screen: " & SCREEN_INTERNAL_TXNS
    If Not VerifyScreen_Focus(SCREEN_INTERNAL_TXNS, 1, 19, Len(SCREEN_INTERNAL_TXNS)) Then ' Added length based on constant
        Debug.Print "NavigateFocus: Did not reach " & SCREEN_INTERNAL_TXNS & ". Last screen title (R1C1L80): '" & Trim(RScreen.GetText(1, 1, 80)) & "'"
         MsgBox "Failed to navigate to Internal Transactions screen. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFocus: Confirmed on " & SCREEN_INTERNAL_TXNS

    ' --- Step 8: Internal Txns - Action 04 ---
    ' This should lead to the INTEREST AMENDMENTS screen
    Debug.Print "NavigateFocus: Sending 04..."
    Call SendData_Focus("04", 22, 8, True)
    Debug.Print "NavigateFocus: Sent 04."

    ' Target screen: INTEREST_AMENDMENTS (R1, C30 estimate - VERIFY THIS)
    Debug.Print "NavigateFocus: Verifying target screen: " & SCREEN_INTEREST_AMENDMENTS
    If VerifyScreen_Focus(SCREEN_INTEREST_AMENDMENTS, 1, 30, Len(SCREEN_INTEREST_AMENDMENTS)) Then
        Debug.Print "NavigateFocus: Successfully reached " & SCREEN_INTEREST_AMENDMENTS & "."
        NavigateToTargetScreen_Focus = True ' Navigation Success!
    Else
        ' Fallback: Check for "INTEREST DETAILS" on Line 2 (R2, C30 estimate)
        Debug.Print "NavigateFocus: " & SCREEN_INTEREST_AMENDMENTS & " not found. Checking for fallback screen: " & SCREEN_INTEREST_DETAILS_SUB
        If VerifyScreen_Focus(SCREEN_INTEREST_DETAILS_SUB, 2, 30, Len(SCREEN_INTEREST_DETAILS_SUB)) Then
             Debug.Print "NavigateFocus: Successfully reached fallback screen: " & SCREEN_INTEREST_DETAILS_SUB & "."
             ' If reaching the details screen is acceptable as the target, set to True
             NavigateToTargetScreen_Focus = True
             ' OR, if only the Amendment screen is acceptable, keep NavigateToTargetScreen_Focus = False and exit.
             ' Assuming reaching the Details screen is a valid stop point for checking, let's set it to True.
        Else
            Debug.Print "NavigateFocus: Did not reach " & SCREEN_INTEREST_AMENDMENTS & " or " & SCREEN_INTEREST_DETAILS_SUB & "."
            Debug.Print "NavigateFocus: Last screen title (R1C1L80): '" & Trim(RScreen.GetText(1, 1, 80)) & "'"
            MsgBox "Failed to navigate to the expected Interest screen. Navigation aborted.", vbCritical, SCRIPT_TITLE
            NavigateToTargetScreen_Focus = False ' Still a navigation failure
        End If
    End If

    ' The function returns NavigateToTargetScreen_Focus (True/False)
End Function

' Note: BackToMasterIndex from the source code is not included here
' as this module's navigation function is only responsible for getting *to* the target screen.
' You can add a separate sub like GoBackToMainMenu_Focus if needed for post-amendment cleanup.
