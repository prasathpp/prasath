Option Explicit

' --- Global/Module-Level Reflection Object Variables ---
Public app As Object         ' For Reflection Application/Workspace
Public ThisFrame As Object   ' For Reflection Frame
Public osView As Object      ' For Reflection View
Public ibmTerminal As Object ' For Reflection Terminal Control (late bound for flexibility)
Public obScreen As Object    ' For Reflection Screen (late bound for flexibility)

' --- Other Global/Module-Level Variables ---
Public sessionName As String ' Holds the filename of the session (e.g., "NTS Back Office - Prod.rd3x")
Public strBoPath As String   ' Holds the full path to the .rd3x session file
Public stEDPFile As String   ' Temporary holder for file path from dialog/sheet

'Global Project Name Constant
Public Const sPrj_Name As String = "Interest Adjustment Automation"

'===============================================================================
' MAIN PROCESSING SUB
'===============================================================================
Sub ProcessInterestAdjustments_Main()
    Dim Ws_Data As Worksheet
    Dim lastRow As Long
    Dim i As Long

    ' --- CONFIGURATION ---
    Const START_ROW As Long = 2 ' Assuming data starts from row 2
    Const DATA_SHEET_NAME As String = "Sheet1" ' !!! UPDATE THIS to your actual sheet name !!!
    ' --- END CONFIGURATION ---

    On Error GoTo MainErrorHandler

    Set Ws_Data = ThisWorkbook.Worksheets(DATA_SHEET_NAME)

    ' Find the last row with data in Column A (Sort Code)
    lastRow = Ws_Data.Cells(Rows.Count, "A").End(xlUp).Row

    If lastRow < START_ROW Then
        MsgBox "No data found in sheet '" & DATA_SHEET_NAME & "'.", vbInformation, sPrj_Name
        Exit Sub
    End If

    ' Connect to Reflection - ensure obScreen is available after this
    Call ConnectExtra
    If obScreen Is Nothing Then
        MsgBox "Failed to connect to Reflection (obScreen is Nothing). Exiting.", vbCritical, sPrj_Name
        Exit Sub
    End If
    Call WaitForScreen ' Initial wait and security check

    ' Loop through each row
    For i = START_ROW To lastRow
        Ws_Data.Range("H" & i & ":J" & i).ClearContents ' Clear previous status

        Call ProcessSingleAdjustment(i, Ws_Data)
        
        If obScreen Is Nothing Then ' Check if session was lost due to critical error
             Ws_Data.Range("H" & i).Value = "Critical Error - Session Lost"
             MsgBox "Reflection session lost (obScreen became Nothing). Aborting further processing.", vbCritical, sPrj_Name
             Exit For
        End If
    Next i

    MsgBox "Processing complete.", vbInformation, sPrj_Name
    Exit Sub

MainErrorHandler:
    MsgBox "An unexpected error occurred in ProcessInterestAdjustments_Main: " & Err.Description, vbCritical, sPrj_Name
    If Not Ws_Data Is Nothing Then Set Ws_Data = Nothing
    Set obScreen = Nothing: Set app = Nothing: Set ThisFrame = Nothing: Set osView = Nothing: Set ibmTerminal = Nothing
End Sub

'===============================================================================
' FUNCTION TO PROCESS A SINGLE ROW ADJUSTMENT
'===============================================================================
Function ProcessSingleAdjustment(iRow As Long, Ws_Data As Worksheet) As Boolean
    On Error GoTo ErrorHandler_Adjustment

    Dim sortCode As String, accountNo As String, iBrand As String, confirm As String
    Dim excel_D_Accrued As Double, excel_E_Cutoff As Double
    Dim excel_F_Applied_Debit As Double, excel_G_Applied_Credit As Double
    Dim Carry_Over_Cutoff_To_Applied_Amount As Double, Total_Applied_Debtor_Amount As Double
    Dim screenType As String, tempStr As String, loopCounter As Integer
    Dim k As Integer ' Loop counter for Enter presses

    ProcessSingleAdjustment = False
    Carry_Over_Cutoff_To_Applied_Amount = 0
    
    sortCode = Format(Ws_Data.Range("A" & iRow).Value, "000000")
    accountNo = Format(Ws_Data.Range("B" & iRow).Value, "00000000")
    iBrand = UCase(Trim(CStr(Ws_Data.Range("C" & iRow).Value)))
    excel_D_Accrued = Val(CStr(Ws_Data.Range("D" & iRow).Value))
    excel_E_Cutoff = Val(CStr(Ws_Data.Range("E" & iRow).Value))
    excel_F_Applied_Debit = Val(CStr(Ws_Data.Range("F" & iRow).Value))
    excel_G_Applied_Credit = Val(CStr(Ws_Data.Range("G" & iRow).Value))

    If sortCode = "000000" Or accountNo = "00000000" Or iBrand = "" Then
        Ws_Data.Range("H" & iRow).Value = "Missing Sort Code, Account, or Brand"
        GoTo NextCase_Adjustment
    End If

    ' --- 1. APPLICATION SELECTION MENU ---
    Call WaitForScreen
    obScreen.WaitForHostSettle 500, 200
    If Validate_Screen("APPLICATION SELECTION MENU", 1, 28, 30) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Application Menu. Text: " & obScreen.GetText(1, 28, 30)
        GoTo NextCase_Adjustment
    End If

    If iBrand = "RBS" Or iBrand = "RBG" Or iBrand = "RBI" Or iBrand = "VIR" Then confirm = "PRCIR#T#"
    ElseIf iBrand = "NWB" Or iBrand = "CTS" Or iBrand = "NWO" Or iBrand = "IOM" Then confirm = "PRCIN#T#"
    ElseIf iBrand = "UBN" Then confirm = "PRCIJ#T#"
    ElseIf iBrand = "UBR" Then confirm = "PRCIK#T#"
    Else Ws_Data.Range("H" & iRow).Value = "Unknown Brand: " & iBrand: GoTo NextCase_Adjustment
    End If

    obScreen.PutText2 "TERM ALL", 21, 13
    obScreen.SendControlKey 14 ' ControlKeyCode_Transmit (assuming 14, check your Reflection's specific enum value if this fails)
    Call WaitForScreen
    obScreen.PutText2 confirm, 21, 13
    obScreen.SendControlKey 14 ' ControlKeyCode_Transmit
    Call WaitForScreen
    obScreen.WaitForHostSettle 500, 200

    If Validate_Screen("Command not recognized", 20, 36, 30) = True Then
        Ws_Data.Range("H" & iRow).Value = "Brand command not recognized."
        GoTo NextCase_Adjustment
    End If
    
    If Validate_Screen("ROYAL BANK OF SCOTLAND", 1, 1, 24) = True Then
        obScreen.SendControlKey 14 ' ControlKeyCode_Transmit
        Call WaitForScreen: obScreen.WaitForHostSettle 500, 200
        If Validate_Screen("", 1, 1, 80) = True Then
            loopCounter = 1
            Do
                If Validate_Screen("", 1, 1, 80) = True Then obScreen.PutText2 "STAR", 1, 1: obScreen.SendControlKey 14
                ElseIf Validate_Screen("ROYAL BANK OF SCOTLAND", 1, 1, 24) = True Then obScreen.SendControlKey 14
                End If
                Call WaitForScreen: obScreen.WaitForHostSettle 500, 200
                loopCounter = loopCounter + 1
            Loop While Validate_Screen("Option Handler Function Screen", 1, 26, 35) = False And loopCounter <= 10
            If Validate_Screen("Option Handler Function Screen", 1, 26, 35) = False Then
                 Ws_Data.Range("H" & iRow).Value = "Failed to navigate past STAR screen.": GoTo NextCase_Adjustment
            End If
        End If
    End If

    ' --- 2. Option Handler Function Screen ---
    If Validate_Screen("Option Handler Function Screen", 1, 26, 35) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Option Handler. Text: " & obScreen.GetText(1, 26, 35)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "19", 21, 16: obScreen.SendControlKey 14: Call WaitForScreen

    ' --- 3. BACK OFFICE SYSTEM ---
    If Validate_Screen("BACK OFFICE SYSTEM", 1, 7, 20) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Back Office System. Text: " & obScreen.GetText(1, 7, 20)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "01", 22, 16: obScreen.SendControlKey 14: Call WaitForScreen

    ' --- 4. MASTER INDEX ---
    If Trim(obScreen.GetText(1, 28, 12)) <> "MASTER INDEX" Then
        Ws_Data.Range("H" & iRow).Value = "Not on Master Index. Text: " & obScreen.GetText(1, 28, 12)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "20", 22, 8: obScreen.PutText2 sortCode, 22, 74: obScreen.SendControlKey 14: Call WaitForScreen

    ' --- 5. FILE MAINTENANCE INPUT INDEX ---
    If Trim(obScreen.GetText(1, 21, 40)) <> "FILE MAINTENANCE INPUT INDEX" Then
        Ws_Data.Range("H" & iRow).Value = "Not on File Maint Input Index. Text: " & obScreen.GetText(1, 21, 40)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "20", 22, 8: obScreen.PutText2 accountNo, 22, 21: obScreen.SendControlKey 14: Call WaitForScreen

    ' --- 6. INTERNAL TRANSACTIONS ---
    If Validate_Screen("INTERNAL TRANSACTIONS", 1, 19, 21) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Internal Transactions. Text: " & obScreen.GetText(1, 19, 21)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "04", 22, 8: obScreen.SendControlKey 14: Call WaitForScreen

    ' --- 7. INTEREST AMENDMENTS ---
    If Validate_Screen("INTEREST AMENDMENTS", 1, 27, 19) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Interest Amendments. Text: " & obScreen.GetText(1, 27, 19)
        GoTo NextCase_Adjustment
    End If

    screenType = "Unknown"
    tempStr = Trim(obScreen.GetText(3, 42, 16))
    If tempStr = "BUSINESS CURRENT" Then screenType = "BC"
    Else tempStr = Trim(obScreen.GetText(3, 42, 14)): If tempStr = "SELECT ACCOUNT" Then screenType = "Normal"
    End If
    If screenType = "Unknown" Then
        Ws_Data.Range("H" & iRow).Value = "Unknown Interest Amendments screen type. Text at (3,42): " & obScreen.GetText(3, 42, 16)
        GoTo NextCase_Adjustment
    End If

    Dim current_screen_arr_val As Double, current_screen_unar_val As Double
    Dim val_to_input_in_arr As Double, val_to_input_in_unar As Double
    Dim remaining_excel_val_for_unar_accr As Double

    If excel_D_Accrued > 0 Then
        If screenType = "BC" Then
            obScreen.PutText2 "dec", 8, 31: obScreen.PutText2 CStr(excel_D_Accrued), 8, 35: obScreen.PutText2 "01", 8, 47
        ElseIf screenType = "Normal" Then
            current_screen_arr_val = Val(Trim(obScreen.GetText(8, 21, 6)))
            current_screen_unar_val = Val(Trim(obScreen.GetText(9, 21, 6)))
            val_to_input_in_arr = 0: val_to_input_in_unar = 0
            If current_screen_arr_val > 0 Then val_to_input_in_arr = Application.WorksheetFunction.Min(excel_D_Accrued, current_screen_arr_val)
            remaining_excel_val_for_unar_accr = excel_D_Accrued - val_to_input_in_arr
            If remaining_excel_val_for_unar_accr > 0 And current_screen_unar_val > 0 Then val_to_input_in_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_unar_accr, current_screen_unar_val)
            If val_to_input_in_arr > 0 Then obScreen.PutText2 "dec", 8, 31: obScreen.PutText2 CStr(val_to_input_in_arr), 8, 35
            If val_to_input_in_unar > 0 Then obScreen.PutText2 "dec", 9, 31: obScreen.PutText2 CStr(val_to_input_in_unar), 9, 35: obScreen.PutText2 "01", 9, 47
        End If
    End If

    Dim current_screen_cutoff_arr_val As Double, current_screen_cutoff_unar_val As Double
    Dim val_to_input_in_cutoff_arr As Double, val_to_input_in_cutoff_unar As Double
    Dim remaining_excel_val_for_cutoff_unar As Double, cutoff_deferred As Boolean
    cutoff_deferred = False

    If excel_E_Cutoff > 0 Then
        If screenType = "BC" Then
            obScreen.PutText2 "dec", 12, 31: obScreen.PutText2 CStr(excel_E_Cutoff), 12, 35: obScreen.PutText2 "01", 12, 47
        ElseIf screenType = "Normal" Then
            current_screen_cutoff_arr_val = Val(Trim(obScreen.GetText(12, 21, 6)))
            current_screen_cutoff_unar_val = Val(Trim(obScreen.GetText(13, 21, 6)))
            If current_screen_cutoff_arr_val <= 0 And current_screen_cutoff_unar_val <= 0 Then
                Carry_Over_Cutoff_To_Applied_Amount = excel_E_Cutoff: cutoff_deferred = True
            Else
                val_to_input_in_cutoff_arr = 0: val_to_input_in_cutoff_unar = 0
                If current_screen_cutoff_arr_val > 0 Then val_to_input_in_cutoff_arr = Application.WorksheetFunction.Min(excel_E_Cutoff, current_screen_cutoff_arr_val)
                remaining_excel_val_for_cutoff_unar = excel_E_Cutoff - val_to_input_in_cutoff_arr
                If remaining_excel_val_for_cutoff_unar > 0 And current_screen_cutoff_unar_val > 0 Then val_to_input_in_cutoff_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_cutoff_unar, current_screen_cutoff_unar_val)
                If val_to_input_in_cutoff_arr > 0 Then obScreen.PutText2 "dec", 12, 31: obScreen.PutText2 CStr(val_to_input_in_cutoff_arr), 12, 35
                If val_to_input_in_cutoff_unar > 0 Then obScreen.PutText2 "dec", 13, 31: obScreen.PutText2 CStr(val_to_input_in_cutoff_unar), 13, 35: obScreen.PutText2 "01", 13, 47
            End If
        End If
    End If

    Total_Applied_Debtor_Amount = excel_F_Applied_Debit + Carry_Over_Cutoff_To_Applied_Amount

    If screenType = "BC" Then
        If excel_G_Applied_Credit > 0 Then obScreen.PutText2 "inc", 14, 31: obScreen.PutText2 CStr(excel_G_Applied_Credit), 14, 35: obScreen.PutText2 "01", 14, 47
        If Total_Applied_Debtor_Amount > 0 Then obScreen.PutText2 "dec", 15, 31: obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 15, 35: obScreen.PutText2 "01", 15, 47
    ElseIf screenType = "Normal" Then
        If excel_G_Applied_Credit > 0 Then obScreen.PutText2 "inc", 15, 31: obScreen.PutText2 CStr(excel_G_Applied_Credit), 15, 35: obScreen.PutText2 "01", 15, 47
        If Total_Applied_Debtor_Amount > 0 Then obScreen.PutText2 "dec", 16, 31: obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 16, 35: obScreen.PutText2 "01", 16, 47
    End If

    For k = 1 To 3
        obScreen.SendControlKey 14 ' ControlKeyCode_Transmit
        Call WaitForScreen: obScreen.WaitForHostSettle 300, 100
    Next k

    obScreen.SendKeys "<S_ESC>" ' Shift+Esc - !!! VERIFY THIS KEYSTROKE !!!
    Call WaitForScreen: obScreen.WaitForHostSettle 500, 200

    If Validate_Screen("APPLICATION SELECTION MENU", 1, 28, 30) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Failed to return to App Menu after Shift+Esc. Text: " & obScreen.GetText(1, 28, 30)
        GoTo NextCase_Adjustment
    End If

    Ws_Data.Range("H" & iRow).Value = "Completed"
    ProcessSingleAdjustment = True

NextCase_Adjustment:
    If ProcessSingleAdjustment = False And Ws_Data.Range("H" & iRow).Value = "" Then Ws_Data.Range("H" & iRow).Value = "Unknown Error or Incomplete"
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username"))
    Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    Exit Function
ErrorHandler_Adjustment:
    Ws_Data.Range("H" & iRow).Value = "VBA Error in ProcessSingleAdjustment: " & Err.Description & " (Line: " & Erl & ")"
    On Error Resume Next
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username"))
    Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    On Error GoTo 0
    If Err.Number = 91 Or Err.Number = 424 Then Set obScreen = Nothing
    ProcessSingleAdjustment = False
End Function

'===============================================================================
' CONNECTION SUB (Incorporating ConnectToReflection_V7 logic)
'===============================================================================
Sub ConnectExtra()
    Dim edpPathFromSheet As String
    Dim ws As Worksheet
    Dim currentAction As String
    Dim targetSessionViewTitle As String ' This will be the VIEW title searched for
    Dim OleObj As Object ' For ActiveX control
    Dim tempView As Object ' For iterating views
    Dim sessionIsOpen As Boolean ' Flag

    On Error GoTo ConnectExtra_ErrorHandler

    currentAction = "Initializing and getting session path"
    ' --- Get path from Sheet4.txtEDPPath ---
    On Error Resume Next ' To handle if Sheet4 or control doesn't exist
    Set ws = Sheet4 ' Assumes CodeName of the sheet is Sheet4
    If Err.Number = 0 Then
        Set OleObj = ws.OLEObjects("txtEDPPath") ' Assumes ActiveX TextBox named txtEDPPath
        If Err.Number = 0 Then
            If TypeOf OleObj.Object Is MSForms.TextBox Then
                edpPathFromSheet = OleObj.Object.Text
            Else
                Debug.Print "ConnectExtra: txtEDPPath is not a MSForms.TextBox. Type: " & TypeName(OleObj.Object)
            End If
        Else
             Debug.Print "ConnectExtra: OLEObject 'txtEDPPath' not found on Sheet4. Error: " & Err.Description
        End If
    Else
        Debug.Print "ConnectExtra: Sheet with CodeName 'Sheet4' not found. Error: " & Err.Description
    End If
    Err.Clear ' Clear any error from checking Sheet4/control
    On Error GoTo ConnectExtra_ErrorHandler ' Restore error handling

    If edpPathFromSheet <> "" Then
        stEDPFile = edpPathFromSheet
    Else
        Debug.Print "ConnectExtra: Path from Sheet4.txtEDPPath is empty or control not found. Prompting user."
        stEDPFile = Application.GetOpenFilename(title:="Please choose a Reflection Session : Backoffice", fileFilter:="Reflection Files *.rd3x (*.rd3x),")
    End If

    If stEDPFile = "False" Or stEDPFile = "" Then
        MsgBox "No session file selected. Exiting.", vbCritical, sPrj_Name
        Set obScreen = Nothing: Exit Sub
    End If
    
    strBoPath = stEDPFile ' Full path
    sessionName = Mid(strBoPath, InStrRev(strBoPath, "\") + 1) ' Extract filename, e.g., "NTS Back Office - Prod.rd3x"
    targetSessionViewTitle = sessionName ' Start with filename, will refine if needed by iterating views

    currentAction = "Attempting GetObject(, ""Reflection Workspace"")"
    Debug.Print currentAction
    On Error Resume Next
    Set app = GetObject(, "Reflection Workspace") ' Using comma before ProgID to get running instance
    If Err.Number <> 0 Or app Is Nothing Then
        Err.Clear
        Debug.Print "GetObject(""Reflection Workspace"") FAILED or app is Nothing. Attempting CreateObject..."
        currentAction = "Attempting CreateObject(""Reflection Workspace"")" ' Update current action
        Set app = CreateObject("Reflection Workspace")
        If Err.Number <> 0 Or app Is Nothing Then
            Err.Clear
            Debug.Print "CreateObject(""Reflection Workspace"") also FAILED."
            MsgBox "Could not connect to or create 'Reflection Workspace'." & vbCrLf & _
                   "Please ensure Reflection is installed and running if GetObject is preferred.", vbCritical, sPrj_Name
            GoTo ConnectExtra_ErrorHandler_Exit
        End If
    End If
    Debug.Print "Reflection App Object obtained. TypeName: " & TypeName(app)
    On Error GoTo ConnectExtra_ErrorHandler

    currentAction = "Attempting app.GetObject(""Frame"")"
    Debug.Print currentAction
    Set ThisFrame = app.GetObject("Frame")
    If ThisFrame Is Nothing Then Debug.Print "Frame object is Nothing.": GoTo ConnectExtra_ErrorHandler_Exit
    Debug.Print "Frame Object obtained. TypeName: " & TypeName(ThisFrame)

    If Not ThisFrame.Visible Then ThisFrame.Visible = True
    ThisFrame.Activate ' Bring to front
    Debug.Print "Frame Visible/Activated."

    currentAction = "Searching for or Creating View for: " & sessionName
    Debug.Print currentAction
    
    sessionIsOpen = False
    If ThisFrame.Views.Count > 0 Then
        For Each tempView In ThisFrame.Views
            Debug.Print "Checking existing View: " & tempView.TitleText
            If InStr(1, tempView.TitleText, sessionName, vbTextCompare) > 0 Then
                Set osView = tempView
                sessionIsOpen = True
                Debug.Print "Found matching running View: " & osView.TitleText
                Exit For
            End If
        Next tempView
    End If

    If Not sessionIsOpen Then
        Debug.Print "View not found by title containing '" & sessionName & "'. Attempting to create/open view with path: " & strBoPath
        currentAction = "Attempting ThisFrame.CreateView(""" & strBoPath & """)"
        On Error Resume Next 
        Set osView = ThisFrame.CreateView(strBoPath) ' CreateView opens the .rd3x file
        If Err.Number <> 0 Or osView Is Nothing Then
            Err.Clear
            Debug.Print "ThisFrame.CreateView FAILED or returned Nothing."
            MsgBox "Could not find or create a Reflection session view for: '" & sessionName & "'. Ensure path is correct and Reflection can open it.", vbCritical, sPrj_Name
            GoTo ConnectExtra_ErrorHandler_Exit
        End If
        Debug.Print "Successfully created/opened View. Title: " & osView.TitleText
        On Error GoTo ConnectExtra_ErrorHandler
    End If
    
    If osView Is Nothing Then ' Should not happen if logic above is correct
        MsgBox "osView object is Nothing after search/create. Cannot proceed.", vbCritical, sPrj_Name
        GoTo ConnectExtra_ErrorHandler_Exit
    End If

    ' osView.Activate ' Might not be necessary or could cause issues
    Debug.Print "View obtained. View Title: '" & osView.TitleText & "'. TypeName(osView): " & TypeName(osView)

    currentAction = "Attempting osView.Control"
    Debug.Print currentAction
    Set ibmTerminal = osView.Control
    If ibmTerminal Is Nothing Then Debug.Print "Terminal object is Nothing.": GoTo ConnectExtra_ErrorHandler_Exit
    Debug.Print "Terminal Object obtained. TypeName: " & TypeName(ibmTerminal)

    currentAction = "Attempting ibmTerminal.Screen"
    Debug.Print currentAction
    Set obScreen = ibmTerminal.Screen
    If obScreen Is Nothing Then Debug.Print "Screen object is Nothing.": GoTo ConnectExtra_ErrorHandler_Exit
    Debug.Print "Screen Object obtained. TypeName: " & TypeName(obScreen)

    On Error Resume Next ' These properties might not be writable or exist on all versions
    ibmTerminal.DisableKeystrokeProductivity = True
    If Err.Number <> 0 Then Debug.Print "ConnectExtra Info: Error setting DisableKeystrokeProductivity: " & Err.Description: Err.Clear
    ibmTerminal.DisableScreenHistory = True
    If Err.Number <> 0 Then Debug.Print "ConnectExtra Info: Error setting DisableScreenHistory: " & Err.Description: Err.Clear
    On Error GoTo ConnectExtra_ErrorHandler

    Debug.Print "ConnectExtra: All core Reflection objects set successfully."
    Exit Sub

ConnectExtra_ErrorHandler:
    MsgBox "ConnectExtra Error during: '" & currentAction & "'" & vbCrLf & _
           "Error " & Err.Number & ": " & Err.Description, vbCritical, sPrj_Name
ConnectExtra_ErrorHandler_Exit:
    Set obScreen = Nothing 
    Set ibmTerminal = Nothing
    Set osView = Nothing
    Set ThisFrame = Nothing
    Set app = Nothing
End Sub

'===============================================================================
' HELPER FUNCTIONS (SCREEN VALIDATION, WAITS)
'===============================================================================
Function Validate_Screen(strText As String, iRow As Integer, icol As Integer, iLen As Integer) As Boolean
    If obScreen Is Nothing Then Validate_Screen = False: Exit Function
    On Error Resume Next ' In case screen object becomes invalid mid-operation
    Do While obScreen.OIA.XStatus <> 0
        obScreen.WaitForHostSettle 50, 20
        If Err.Number <> 0 Then Validate_Screen = False: Exit Function ' Error during wait
    Loop
    If Err.Number <> 0 Then Validate_Screen = False: Exit Function
    On Error GoTo 0

    Dim screenReadText As String
    On Error Resume Next
    screenReadText = obScreen.GetText(iRow, icol, iLen)
    If Err.Number <> 0 Then Validate_Screen = False: Exit Function ' Error during GetText
    On Error GoTo 0
    
    If UCase(VBA.Trim(screenReadText)) = UCase(VBA.Trim(strText)) Then
        Validate_Screen = True
    Else
        Validate_Screen = False
    End If
End Function

Function WaitForScreen()
    If obScreen Is Nothing Then Exit Function
    On Error Resume Next 
    Do While obScreen.OIA.XStatus <> 0
        obScreen.WaitForHostSettle 50, 20
        If Err.Number <> 0 Then Exit Function ' Error during wait
    Loop
    If Err.Number <> 0 Then Exit Function
    On Error GoTo 0
    Call Check_SecurityScreen
End Function

Function Check_SecurityScreen()
    If obScreen Is Nothing Then Exit Function
    ' Temporarily disable error handler within this check if Validate_Screen has its own robust one
    Dim tempScreenCheck As Boolean
    tempScreenCheck = Validate_Screen("SECURITY REMINDER", 1, 29, 20)
    
    If tempScreenCheck Then ' Check if Validate_Screen itself errored by checking obScreen
         If obScreen Is Nothing Then Exit Function
         obScreen.PutText2 "Y", 22, 11
         obScreen.SendControlKey 14 ' ControlKeyCode_Transmit
         Call WaitForScreen ' Recursive call, ensure this doesn't lead to stack overflow if screen persists
    End If
End Function
