Option Explicit

' --- Global/Module-Level Reflection Object Variables ---
' Using As Object for late binding initially, which your successful ConnectToReflection_V7 implies for its variables
Public app As Object
Public ThisFrame As Object
Public osView As Object ' Corresponds to RView
Public ibmTerminal As Object ' Corresponds to RTerminal
Public obScreen As Object    ' Corresponds to RScreen

' --- Other Global/Module-Level Variables ---
Public sessionName As String ' Holds the filename of the session (e.g., "NTS Back Office - Prod.rd3x")
Public strBoPath As String   ' Holds the full path to the .rd3x session file (used if we need to CREATE a view)
Public stEDPFile As String   ' Temporary holder for file path from dialog/sheet

'Global Project Name Constant
Public Const SCRIPT_TITLE As String = "Interest Adjustment Automation" ' Renamed for consistency
Public Const sPrj_Name As String = SCRIPT_TITLE ' Alias if other parts of your code use sPrj_Name

' --- Key Screen Title Constants (for navigation) ---
Private Const SCREEN_APP_MENU As String = "APPLICATION SELECTION MENU"
Private Const SCREEN_OPT_HANDLER As String = "OPTION HANDLER FUNCTION SCREEN" ' Verify exact text
Private Const SCREEN_BO_SYSTEM As String = "BACK OFFICE SYSTEM"
Private Const SCREEN_MASTER_INDEX As String = "MASTER INDEX"
Private Const SCREEN_FILE_MAINT_IDX As String = "FILE MAINTENANCE INPUT INDEX"
Private Const SCREEN_INTERNAL_TXNS As String = "INTERNAL TRANSACTIONS"
Private Const SCREEN_INTEREST_AMENDMENTS As String = "INTEREST AMENDMENTS"
' Add ControlKeyCode_Transmit if not available through library reference for some reason,
' but ideally, the library reference (Attachmate_Reflection_Objects_Emulation_IbmHosts) should provide it.
' If you get "Variable not defined" on ControlKeyCode_Transmit, ensure the reference is checked.
' Public Const ControlKeyCode_Transmit As Long = 14 ' Fallback if library const not found


'===============================================================================
' MAIN PROCESSING SUB
'===============================================================================
Sub ProcessInterestAdjustments_Main()
    Dim Ws_Data As Worksheet
    Dim lastRow As Long
    Dim i As Long

    ' --- CONFIGURATION ---
    Const START_ROW As Long = 2 
    Const DATA_SHEET_NAME As String = "Sheet1" ' !!! UPDATE THIS !!!
    ' --- END CONFIGURATION ---

    On Error GoTo MainErrorHandler

    Set Ws_Data = ThisWorkbook.Worksheets(DATA_SHEET_NAME)
    lastRow = Ws_Data.Cells(Rows.Count, "A").End(xlUp).Row

    If lastRow < START_ROW Then
        MsgBox "No data found in sheet '" & DATA_SHEET_NAME & "'.", vbInformation, SCRIPT_TITLE
        Exit Sub
    End If

    Call ConnectExtra ' This will now use the new logic
    If obScreen Is Nothing Then
        MsgBox "Failed to connect to Reflection (obScreen is Nothing). Exiting.", vbCritical, SCRIPT_TITLE
        Exit Sub
    End If
    ' Call WaitForScreen ' Initial wait might be redundant if ConnectExtra ensures screen is ready

    For i = START_ROW To lastRow
        Ws_Data.Range("H" & i & ":J" & i).ClearContents
        Call ProcessSingleAdjustment(i, Ws_Data)
        If obScreen Is Nothing Then
             Ws_Data.Range("H" & i).Value = "Critical Error - Session Lost"
             MsgBox "Reflection session lost. Aborting.", vbCritical, SCRIPT_TITLE
             Exit For
        End If
    Next i

    MsgBox "Processing complete.", vbInformation, SCRIPT_TITLE
    Call CleanUpReflectionObjects ' Release objects at the end
    Exit Sub

MainErrorHandler:
    MsgBox "Error in ProcessInterestAdjustments_Main: " & Err.Description, vbCritical, SCRIPT_TITLE
    If Not Ws_Data Is Nothing Then Set Ws_Data = Nothing
    Call CleanUpReflectionObjects
End Sub

'===============================================================================
' FUNCTION TO PROCESS A SINGLE ROW ADJUSTMENT
' (Adapted to use established global vars and constants from this module)
'===============================================================================
'===============================================================================
' FUNCTION TO PROCESS A SINGLE ROW ADJUSTMENT
' (Adapted to use established global vars and constants from this module)
'===============================================================================
Function ProcessSingleAdjustment(iRow As Long, Ws_Data As Worksheet) As Boolean
    On Error GoTo ErrorHandler_Adjustment

    Dim sortCode As String, accountNo As String, iBrand As String, confirmCode As String ' Renamed confirm to confirmCode
    Dim excel_D_Accrued As Double, excel_E_Cutoff As Double
    Dim excel_F_Applied_Debit As Double, excel_G_Applied_Credit As Double
    Dim Carry_Over_Cutoff_To_Applied_Amount As Double, Total_Applied_Debtor_Amount As Double
    Dim screenType As String, tempStr As String, loopCounter As Long ' Changed from Integer
    Dim k As Integer

    ProcessSingleAdjustment = False
    Carry_Over_Cutoff_To_Applied_Amount = 0
    
    sortCode = Format(Ws_Data.Range("A" & iRow).Value, "000000")
    accountNo = Format(Ws_Data.Range("B" & iRow).Value, "00000000")
    iBrand = UCase(Trim(CStr(Ws_Data.Range("C" & iRow).Value)))
    excel_D_Accrued = Val(CStr(Ws_Data.Range("D" & iRow).Value))
    excel_E_Cutoff = Val(CStr(Ws_Data.Range("E" & iRow).Value))
    excel_F_Applied_Debit = Val(CStr(Ws_Data.Range("F" & iRow).Value))
    excel_G_Applied_Credit = Val(CStr(Ws_Data.Range("G" & iRow).Value))

    If sortCode = "000000" Or accountNo = "00000000" Or iBrand = "" Then
        Ws_Data.Range("H" & iRow).Value = "Missing Sort Code, Account, or Brand"
        GoTo NextCase_Adjustment
    End If

    ' --- Navigation starts here, using helper functions ---
    ' Helper functions will use global obScreen (which is RScreen from your code)
    
    ' --- Determine Confirmation Code based on Brand ---
    Select Case iBrand
        Case "RBS", "RBG", "RBI", "VIR"
            confirmCode = "PRCIR#T#"
        Case "NWB", "CTS", "NWO", "IOM"
            confirmCode = "PRCIN#T#"
        Case "UBN"
            confirmCode = "PRCIJ#T#"
        Case "UBR"
            confirmCode = "PRCIK#T#"
        Case Else ' <<< CORRECTED HERE
            Debug.Print "ProcessSingle: Invalid Brand '" & iBrand & "' for row " & iRow
            Ws_Data.Range("H" & iRow).Value = "Unknown Brand: " & iBrand
            GoTo NextCase_Adjustment
    End Select
    Debug.Print "ProcessSingle: Row " & iRow & ", Using confirm code: " & confirmCode

    ' --- Step 1: Ensure on APPLICATION SELECTION MENU ---
    If Not VerifyScreen(SCREEN_APP_MENU, 1, 28) Then
         Debug.Print "ProcessSingle: Not starting on " & SCREEN_APP_MENU & " for row " & iRow
         Ws_Data.Range("H" & iRow).Value = "Not on Application Menu. Text: " & obScreen.GetText(1, 28, Len(SCREEN_APP_MENU))
         GoTo NextCase_Adjustment ' Cannot proceed if not on starting screen
    End If
    Debug.Print "ProcessSingle: Confirmed on " & SCREEN_APP_MENU

    ' --- Step 2: TERM ALL ---
    Call SendData("TERM ALL", 21, 13, True)
    Debug.Print "ProcessSingle: Sent TERM ALL"
    Call WaitReady(1000) ' Explicit wait

    ' --- Step 3: Brand Code ---
    Call SendData(confirmCode, 21, 13, True)
    Debug.Print "ProcessSingle: Sent " & confirmCode
    If VerifyScreen("Command not recognized", 20, 36, 22) Then ' Length 22 for "Command not recognized"
        Debug.Print "ProcessSingle: Brand code '" & confirmCode & "' not recognized."
        Ws_Data.Range("H" & iRow).Value = "Brand command not recognized."
        GoTo NextCase_Adjustment
    End If
    
    ' Handle potential "ROYAL BANK OF SCOTLAND" screen (from original InterestCheck)
    If VerifyScreen("ROYAL BANK OF SCOTLAND", 1, 1, 24) = True Then
        Call SendKey(ControlKeyCode_Transmit, 500)
        If VerifyScreen("", 1, 1, 80) = True Then ' Check for potentially blank screen after
            loopCounter = 1
            Do
                If VerifyScreen("", 1, 1, 80) = True Then Call SendData("STAR", 1, 1, True, 500)
                ElseIf VerifyScreen("ROYAL BANK OF SCOTLAND", 1, 1, 24) = True Then Call SendKey(ControlKeyCode_Transmit, 500)
                End If
                loopCounter = loopCounter + 1
            Loop While Not VerifyScreen(SCREEN_OPT_HANDLER, 1, 26, Len(SCREEN_OPT_HANDLER)) And loopCounter <= 10 ' Adjusted coordinates for SCREEN_OPT_HANDLER
            If Not VerifyScreen(SCREEN_OPT_HANDLER, 1, 26, Len(SCREEN_OPT_HANDLER)) Then
                 Ws_Data.Range("H" & iRow).Value = "Failed to navigate past STAR screen.": GoTo NextCase_Adjustment
            End If
        End If
    End If
    
    If Not VerifyScreen(SCREEN_OPT_HANDLER, 1, 26, Len(SCREEN_OPT_HANDLER)) Then ' Adjusted from R2,C28 to R1,C26
        Debug.Print "ProcessSingle: Did not reach " & SCREEN_OPT_HANDLER
        Ws_Data.Range("H" & iRow).Value = "Not on Option Handler. Text: " & obScreen.GetText(1, 26, Len(SCREEN_OPT_HANDLER))
        GoTo NextCase_Adjustment
    End If
    Debug.Print "ProcessSingle: On " & SCREEN_OPT_HANDLER

    ' --- Step 4: Option 19 ---
    Call SendData("19", 21, 16, True)
    Debug.Print "ProcessSingle: Sent 19"
    If Not VerifyScreen(SCREEN_BO_SYSTEM, 1, 7) Then Ws_Data.Range("H" & iRow).Value = "Not on BO System": GoTo NextCase_Adjustment
    Debug.Print "ProcessSingle: On " & SCREEN_BO_SYSTEM

    ' --- Step 5: Option 01 ---
    Call SendData("01", 22, 16, True)
    Debug.Print "ProcessSingle: Sent 01"
    If Not VerifyScreen(SCREEN_MASTER_INDEX, 1, 28) Then Ws_Data.Range("H" & iRow).Value = "Not on Master Index": GoTo NextCase_Adjustment
    Debug.Print "ProcessSingle: On " & SCREEN_MASTER_INDEX

    ' --- Step 6: Master Index - Action 20, Sort Code ---
    Call WaitReady(100)
    obScreen.PutText2 "20", 22, 8
    obScreen.PutText2 Format(sortCode, "000000"), 22, 74
    Call SendKey(ControlKeyCode_Transmit, 1000)
    Debug.Print "ProcessSingle: Sent 20 + S/C " & sortCode
    If Not VerifyScreen(SCREEN_FILE_MAINT_IDX, 1, 21) Then Ws_Data.Range("H" & iRow).Value = "Not on File Maint Idx": GoTo NextCase_Adjustment
    Debug.Print "ProcessSingle: On " & SCREEN_FILE_MAINT_IDX

    ' --- Step 7: File Maint Idx - Action 20, Account Number ---
    Call WaitReady(100)
    obScreen.PutText2 "20", 22, 8
    obScreen.PutText2 Format(accountNo, "00000000"), 22, 21
    Call SendKey(ControlKeyCode_Transmit, 1000)
    Debug.Print "ProcessSingle: Sent 20 + A/N " & accountNo
    If Not VerifyScreen(SCREEN_INTERNAL_TXNS, 1, 19) Then Ws_Data.Range("H" & iRow).Value = "Not on Int Transactions": GoTo NextCase_Adjustment
    Debug.Print "ProcessSingle: On " & SCREEN_INTERNAL_TXNS

    ' --- Step 8: Internal Txns - Action 04 ---
    Call SendData("04", 22, 8, True)
    Debug.Print "ProcessSingle: Sent 04"
    ' Target screen: INTEREST_AMENDMENTS (R1,C27 as per our earlier discussion)
    If Not VerifyScreen(SCREEN_INTEREST_AMENDMENTS, 1, 27) Then
        If Not VerifyScreen("INTEREST DETAILS", 2, 27) Then ' Fallback check based on your Nav code
            Debug.Print "ProcessSingle: Did not reach " & SCREEN_INTEREST_AMENDMENTS
            Ws_Data.Range("H" & iRow).Value = "Not on Interest Amendments screen"
            GoTo NextCase_Adjustment
        End If
    End If
    Debug.Print "ProcessSingle: Successfully reached " & SCREEN_INTEREST_AMENDMENTS

    ' --- DATA ENTRY ON INTEREST AMENDMENTS SCREEN ---
    screenType = "Unknown"
    tempStr = Trim(obScreen.GetText(3, 42, 16))
    If tempStr = "BUSINESS CURRENT" Then screenType = "BC"
    Else tempStr = Trim(obScreen.GetText(3, 42, 14)): If tempStr = "SELECT ACCOUNT" Then screenType = "Normal"
    End If
    If screenType = "Unknown" Then
        Ws_Data.Range("H" & iRow).Value = "Unknown Interest Amendments screen type. Text(3,42): " & obScreen.GetText(3, 42, 16)
        GoTo NextCase_Adjustment
    End If
    Debug.Print "ProcessSingle: Screen Type is " & screenType

    ' (Accrued, Cutoff, Applied data entry logic - this was already correct)
    ' ... PASTE THE ACCRUED, CUTOFF, APPLIED DATA ENTRY LOGIC HERE ...
    ' --- Start of Pasted Data Entry Logic ---
    Dim current_screen_arr_val As Double, current_screen_unar_val As Double
    Dim val_to_input_in_arr As Double, val_to_input_in_unar As Double
    Dim remaining_excel_val_for_unar_accr As Double

    If excel_D_Accrued > 0 Then
        If screenType = "BC" Then
            obScreen.PutText2 "dec", 8, 31: obScreen.PutText2 CStr(excel_D_Accrued), 8, 35: obScreen.PutText2 "01", 8, 47
        ElseIf screenType = "Normal" Then
            current_screen_arr_val = Val(Trim(obScreen.GetText(8, 21, 6)))
            current_screen_unar_val = Val(Trim(obScreen.GetText(9, 21, 6)))
            val_to_input_in_arr = 0: val_to_input_in_unar = 0
            If current_screen_arr_val > 0 Then val_to_input_in_arr = Application.WorksheetFunction.Min(excel_D_Accrued, current_screen_arr_val)
            remaining_excel_val_for_unar_accr = excel_D_Accrued - val_to_input_in_arr
            If remaining_excel_val_for_unar_accr > 0 And current_screen_unar_val > 0 Then val_to_input_in_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_unar_accr, current_screen_unar_val)
            If val_to_input_in_arr > 0 Then obScreen.PutText2 "dec", 8, 31: obScreen.PutText2 CStr(val_to_input_in_arr), 8, 35
            If val_to_input_in_unar > 0 Then obScreen.PutText2 "dec", 9, 31: obScreen.PutText2 CStr(val_to_input_in_unar), 9, 35: obScreen.PutText2 "01", 9, 47
        End If
    End If

    Dim current_screen_cutoff_arr_val As Double, current_screen_cutoff_unar_val As Double
    Dim val_to_input_in_cutoff_arr As Double, val_to_input_in_cutoff_unar As Double
    Dim remaining_excel_val_for_cutoff_unar As Double, cutoff_deferred As Boolean
    cutoff_deferred = False

    If excel_E_Cutoff > 0 Then
        If screenType = "BC" Then
            obScreen.PutText2 "dec", 12, 31: obScreen.PutText2 CStr(excel_E_Cutoff), 12, 35: obScreen.PutText2 "01", 12, 47
        ElseIf screenType = "Normal" Then
            current_screen_cutoff_arr_val = Val(Trim(obScreen.GetText(12, 21, 6)))
            current_screen_cutoff_unar_val = Val(Trim(obScreen.GetText(13, 21, 6)))
            If current_screen_cutoff_arr_val <= 0 And current_screen_cutoff_unar_val <= 0 Then
                Carry_Over_Cutoff_To_Applied_Amount = excel_E_Cutoff: cutoff_deferred = True
            Else
                val_to_input_in_cutoff_arr = 0: val_to_input_in_cutoff_unar = 0
                If current_screen_cutoff_arr_val > 0 Then val_to_input_in_cutoff_arr = Application.WorksheetFunction.Min(excel_E_Cutoff, current_screen_cutoff_arr_val)
                remaining_excel_val_for_cutoff_unar = excel_E_Cutoff - val_to_input_in_cutoff_arr
                If remaining_excel_val_for_cutoff_unar > 0 And current_screen_cutoff_unar_val > 0 Then val_to_input_in_cutoff_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_cutoff_unar, current_screen_cutoff_unar_val)
                If val_to_input_in_cutoff_arr > 0 Then obScreen.PutText2 "dec", 12, 31: obScreen.PutText2 CStr(val_to_input_in_cutoff_arr), 12, 35
                If val_to_input_in_cutoff_unar > 0 Then obScreen.PutText2 "dec", 13, 31: obScreen.PutText2 CStr(val_to_input_in_cutoff_unar), 13, 35: obScreen.PutText2 "01", 13, 47
            End If
        End If
    End If

    Total_Applied_Debtor_Amount = excel_F_Applied_Debit + Carry_Over_Cutoff_To_Applied_Amount

    If screenType = "BC" Then
        If excel_G_Applied_Credit > 0 Then obScreen.PutText2 "inc", 14, 31: obScreen.PutText2 CStr(excel_G_Applied_Credit), 14, 35: obScreen.PutText2 "01", 14, 47
        If Total_Applied_Debtor_Amount > 0 Then obScreen.PutText2 "dec", 15, 31: obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 15, 35: obScreen.PutText2 "01", 15, 47
    ElseIf screenType = "Normal" Then
        If excel_G_Applied_Credit > 0 Then obScreen.PutText2 "inc", 15, 31: obScreen.PutText2 CStr(excel_G_Applied_Credit), 15, 35: obScreen.PutText2 "01", 15, 47
        If Total_Applied_Debtor_Amount > 0 Then obScreen.PutText2 "dec", 16, 31: obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 16, 35: obScreen.PutText2 "01", 16, 47
    End If
    ' --- End of Pasted Data Entry Logic ---
    Debug.Print "ProcessSingle: Data entry complete for row " & iRow

    For k = 1 To 3
        Call SendKey(ControlKeyCode_Transmit, 300) ' Using SendKey helper
    Next k
    Debug.Print "ProcessSingle: Sent Enter x3 for row " & iRow

    obScreen.SendKeys "<S_ESC>" ' Shift+Esc - !!! VERIFY THIS KEYSTROKE !!!
    Call WaitReady(1000) ' Wait after Shift+Esc
    Debug.Print "ProcessSingle: Sent Shift+Esc for row " & iRow

    If Not VerifyScreen(SCREEN_APP_MENU, 1, 28) Then
        Ws_Data.Range("H" & iRow).Value = "Failed to return to App Menu. Text: " & obScreen.GetText(1, 28, Len(SCREEN_APP_MENU))
        GoTo NextCase_Adjustment
    End If

    Ws_Data.Range("H" & iRow).Value = "Completed"
    ProcessSingleAdjustment = True

NextCase_Adjustment:
    If ProcessSingleAdjustment = False And Ws_Data.Range("H" & iRow).Value = "" Then Ws_Data.Range("H" & iRow).Value = "Unknown Error or Incomplete"
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username"))
    Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    Exit Function
ErrorHandler_Adjustment:
    Ws_Data.Range("H" & iRow).Value = "VBA Error in ProcessSingleAdjustment: " & Err.Description & " (Line: " & Erl & ")"
    Debug.Print "VBA Error in ProcessSingleAdjustment for row " & iRow & ": " & Err.Description & " (Line: " & Erl & ")"
    On Error Resume Next
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username"))
    Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    On Error GoTo 0
    If Err.Number = 91 Or Err.Number = 424 Then Call CleanUpReflectionObjects ' If obScreen is lost, release all
    ProcessSingleAdjustment = False
End Function

'===============================================================================
' CONNECTION SUB (Adapted from your ConnectAndSetScreen logic)
' Uses global variables: app, ThisFrame, osView, ibmTerminal, obScreen
' Expects global sessionName (filename) and strBoPath (full path) to be set.
'===============================================================================
Sub ConnectExtra()
    Dim currentAction As String
    Dim targetSessionTitleInFrame As String ' The title GetViewByTitleText will search for
    Dim OleObj As Object
    Dim ws As Worksheet
    Dim edpPathFromSheet As String
    Dim tempView As Object ' For iterating views if GetViewByTitleText fails
    Dim foundByIteration As Boolean

    On Error GoTo ConnectExtra_ErrorHandler

    currentAction = "Initializing and getting session path from Sheet4 or Dialog"
    Debug.Print currentAction
    ' --- Get path from Sheet4.txtEDPPath (as before) ---
    On Error Resume Next
    Set ws = Sheet4 ' Assumes CodeName of the sheet is Sheet4
    If Err.Number = 0 Then
        Set OleObj = ws.OLEObjects("txtEDPPath")
        If Err.Number = 0 And TypeOf OleObj.Object Is MSForms.TextBox Then
            edpPathFromSheet = OleObj.Object.Text
        End If
    End If
    Err.Clear
    On Error GoTo ConnectExtra_ErrorHandler

    If edpPathFromSheet <> "" Then
        stEDPFile = edpPathFromSheet
    Else
        stEDPFile = Application.GetOpenFilename(title:="Please choose a Reflection Session : Backoffice", fileFilter:="Reflection Files *.rd3x (*.rd3x),")
    End If

    If stEDPFile = "False" Or stEDPFile = "" Then
        MsgBox "No session file selected. Exiting.", vbCritical, SCRIPT_TITLE
        Set obScreen = Nothing: Exit Sub ' Ensure obScreen is Nothing here
    End If
    
    strBoPath = stEDPFile ' Full path to .rd3x file
    sessionName = Mid(strBoPath, InStrRev(strBoPath, "\") + 1) ' Extract filename, e.g., "NTS Back Office - Prod.rd3x"
    targetSessionTitleInFrame = sessionName ' Initial assumption for GetViewByTitleText

    currentAction = "Attempting GetObject(, ""Reflection Workspace"")"
    Debug.Print currentAction
    On Error Resume Next
    Set app = GetObject(, "Reflection Workspace")
    If Err.Number <> 0 Or app Is Nothing Then
        Err.Clear
        Debug.Print "GetObject(""Reflection Workspace"") FAILED. Attempting CreateObject..."
        currentAction = "Attempting CreateObject(""Reflection Workspace"")"
        Set app = CreateObject("Reflection Workspace")
        If Err.Number <> 0 Or app Is Nothing Then
            Err.Clear
            Debug.Print "CreateObject(""Reflection Workspace"") also FAILED."
            GoTo ConnectExtra_ErrorHandler_FinalMsg
        End If
    End If
    Debug.Print "Reflection App Object obtained. TypeName: " & TypeName(app)
    On Error GoTo ConnectExtra_ErrorHandler

    currentAction = "Attempting app.GetObject(""Frame"")"
    Debug.Print currentAction
    Set ThisFrame = app.GetObject("Frame")
    If ThisFrame Is Nothing Then Debug.Print "Frame object is Nothing.": GoTo ConnectExtra_ErrorHandler_FinalMsg
    Debug.Print "Frame Object obtained. TypeName: " & TypeName(ThisFrame)

    If Not ThisFrame.Visible Then ThisFrame.Visible = True
    ThisFrame.Activate
    Debug.Print "Frame Visible/Activated."

    currentAction = "Attempting ThisFrame.GetViewByTitleText(""" & targetSessionTitleInFrame & """)"
    Debug.Print currentAction
    On Error Resume Next ' For GetViewByTitleText
    Set osView = ThisFrame.GetViewByTitleText(targetSessionTitleInFrame)
    If Err.Number <> 0 Or osView Is Nothing Then
        Err.Clear
        Debug.Print "ThisFrame.GetViewByTitleText FAILED for title '" & targetSessionTitleInFrame & "'. Error: " & Err.Description
        Debug.Print "Attempting to iterate views to find one containing: " & sessionName
        
        foundByIteration = False
        If ThisFrame.Views.Count > 0 Then ' Check if Views collection can be counted
             For Each tempView In ThisFrame.Views
                If InStr(1, tempView.TitleText, sessionName, vbTextCompare) > 0 Then
                    Set osView = tempView
                    foundByIteration = True
                    Debug.Print "Found view by iteration: " & osView.TitleText
                    Exit For
                End If
            Next tempView
        Else
            Debug.Print "ThisFrame.Views.Count is 0 or could not be accessed."
        End If

        If Not foundByIteration Then
            Debug.Print "View not found by GetViewByTitleText or iteration. Attempting ThisFrame.CreateView..."
            currentAction = "Attempting ThisFrame.CreateView(""" & strBoPath & """)"
            Set osView = ThisFrame.CreateView(strBoPath) ' Try to open/create
            If Err.Number <> 0 Or osView Is Nothing Then
                Err.Clear
                Debug.Print "ThisFrame.CreateView FAILED. Error: " & Err.Description
                GoTo ConnectExtra_ErrorHandler_FinalMsg
            End If
        End If
    End If
    Debug.Print "View obtained. Title: '" & osView.TitleText & "'. TypeName: " & TypeName(osView)
    On Error GoTo ConnectExtra_ErrorHandler

    currentAction = "Attempting osView.Control"
    Debug.Print currentAction
    Set ibmTerminal = osView.Control
    If ibmTerminal Is Nothing Then Debug.Print "Terminal object is Nothing.": GoTo ConnectExtra_ErrorHandler_FinalMsg
    Debug.Print "Terminal Object obtained. TypeName: " & TypeName(ibmTerminal)

    currentAction = "Attempting ibmTerminal.Screen"
    Debug.Print currentAction
    Set obScreen = ibmTerminal.Screen
    If obScreen Is Nothing Then Debug.Print "Screen object is Nothing.": GoTo ConnectExtra_ErrorHandler_FinalMsg
    Debug.Print "Screen Object obtained. TypeName: " & TypeName(obScreen)

    On Error Resume Next
    ibmTerminal.DisableKeystrokeProductivity = True
    If Err.Number <> 0 Then Debug.Print "Info - Error setting DisableKeystrokeProductivity: " & Err.Description: Err.Clear
    ibmTerminal.DisableScreenHistory = True
    If Err.Number <> 0 Then Debug.Print "Info - Error setting DisableScreenHistory: " & Err.Description: Err.Clear
    On Error GoTo ConnectExtra_ErrorHandler

    Debug.Print "ConnectExtra: All core Reflection objects set successfully."
    Exit Sub

ConnectExtra_ErrorHandler:
    MsgBox "ConnectExtra Error during: '" & currentAction & "'" & vbCrLf & _
           "Error " & Err.Number & ": " & Err.Description, vbCritical, SCRIPT_TITLE
ConnectExtra_ErrorHandler_FinalMsg:
    Call CleanUpReflectionObjects
End Sub

'===============================================================================
' HELPER FUNCTIONS (SCREEN VALIDATION, WAITS, SENDDATA, SENDKEY)
' Using global obScreen (which should be RScreen from your logic)
'===============================================================================
Private Sub WaitReady(Optional settleTimeMs As Long = 200, Optional timeoutMs As Long = 10000)
    If obScreen Is Nothing Then Exit Sub
    Dim startTime As Date: startTime = Now
    On Error Resume Next ' Handle errors during wait
    Do While obScreen.OIA.XStatus <> 0
        If DateDiff("s", startTime, Now) * 1000 > timeoutMs Then
            Debug.Print "WaitReady: Timeout waiting for XStatus=0."
            Exit Do
        End If
        obScreen.WaitForHostSettle 100, 50: DoEvents ' Short poll
        If Err.Number <> 0 Then Debug.Print "WaitReady: Error during WaitForHostSettle in loop.": Exit Sub
    Loop
    obScreen.WaitForHostSettle settleTimeMs, timeoutMs
    If Err.Number <> 0 Then Debug.Print "WaitReady: Error during final WaitForHostSettle."
    On Error GoTo 0
End Sub

Private Function VerifyScreen(expectedText As String, rowNum As Long, colNum As Long, Optional ByVal length As Long = 0) As Boolean
    If obScreen Is Nothing Then VerifyScreen = False: Exit Function
    Call WaitReady(100) ' Ensure screen is settled before reading
    If length = 0 Then length = Len(expectedText)
    
    Dim actualText As String
    On Error Resume Next
    actualText = Trim(obScreen.GetText(rowNum, colNum, length))
    If Err.Number <> 0 Then
        Debug.Print "VerifyScreen FAILED to GetText at R" & rowNum & "C" & colNum & ". Error: " & Err.Description
        VerifyScreen = False
        Exit Function
    End If
    On Error GoTo 0
        
    If UCase(actualText) = UCase(expectedText) Then
        VerifyScreen = True
    Else
        VerifyScreen = False
        Debug.Print "VerifyScreen FAILED: Expected '" & expectedText & "', Found '" & actualText & "' at R" & rowNum & "C" & colNum & "L" & length
    End If
End Function

Private Sub SendData(data As String, rowNum As Long, colNum As Long, Optional sendTransmit As Boolean = True, Optional waitAfterMs As Long = 500)
    If obScreen Is Nothing Then Exit Sub
    Call WaitReady(100)
    obScreen.PutText2 data, rowNum, colNum
    If sendTransmit Then
        obScreen.SendControlKey ControlKeyCode_Transmit ' Use constant
        Call WaitReady(waitAfterMs)
    End If
End Sub

Private Sub SendKey(keyCode As Long, Optional waitAfterMs As Long = 500)
    If obScreen Is Nothing Then Exit Sub
    Call WaitReady(100)
    obScreen.SendControlKey keyCode
    Call WaitReady(waitAfterMs)
End Sub

Private Sub CleanUpReflectionObjects()
    Debug.Print "CleanUpReflectionObjects: Releasing Reflection objects..."
    On Error Resume Next ' Ignore errors if objects are already Nothing
    Set obScreen = Nothing
    Set ibmTerminal = Nothing
    Set osView = Nothing
    Set ThisFrame = Nothing
    Set app = Nothing
    Debug.Print "CleanUpReflectionObjects: Reflection objects released."
    On Error GoTo 0
End Sub
