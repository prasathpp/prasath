' Attribute VB_Name = "mod_BackOffice_Automation_V6" ' Module name reflecting version
Option Explicit

' --- Reflection COM Object Declarations ---
' These variables will hold the references to the Reflection objects
' needed to control the host session.
Public objReflectionApp As Object          ' Represents the main Reflection Workspace application
Public objFrame As Object        ' Represents the main window frame containing views
Public objView As Object         ' Represents the specific session view/tab (e.g., the TN3270 session)
Public objTerminal As Object     ' Represents the terminal control within the view
Public objScreen As Object       ' Represents the interactive screen area of the terminal

' --- Excel Constants ---
Private Const DATA_SHEET_NAME As String = "Sheet1"
Private Const FIRST_DATA_ROW As Long = 2
Private Const COL_SORT_CODE As Long = 1 ' Column A
Private Const COL_ACCOUNT As Long = 2 ' Column B
Private Const COL_BRAND As Long = 3 ' Column C
Private Const COL_STATUS As Long = 8 ' Column H (for recording status)
Private Const COL_ERROR_DESC As Long = 9 ' Column I (for recording error descriptions)

' --- Reflection Connection Constant ---
' Define the EXACT title of the session window we will look for using GetObject.
' *** IMPORTANT: This must match the window title EXACTLY! ***
' Check the window title bar carefully. Example: "Reflection Workspace - [NTS Back Office - Prod.rd3x]"
' Based on previous logs, "NTS Back Office - Prod.rd3x" seems to be the part GetViewByTitleText uses reliably.
Private Const SESSION_TITLE_PART As String = "NTS Back Office - Prod.rd3x"

' --- Screen Title Constants and Coordinates (Version 6) ---
Private Const SCREEN_APP_MENU As String = "APPLICATION SELECTION MENU"
Private Const SCREEN_APP_MENU_ROW As Long = 1
Private Const SCREEN_APP_MENU_COL As Long = 28
Private Const SCREEN_APP_MENU_LENGTH As Long = 30

Private Const SCREEN_OPT_HANDLER_MAIN As String = "OPTION HANDLER FUNCTION SCREEN"
Private Const SCREEN_OPT_HANDLER_ROW As Long = 1
Private Const SCREEN_OPT_HANDLER_COL As Long = 26
Private Const SCREEN_OPT_HANDLER_LENGTH As Long = 35

Private Const SCREEN_BO_SYSTEM As String = "BACK OFFICE SYSTEM"
Private Const SCREEN_BO_SYSTEM_ROW As Long = 1
Private Const SCREEN_BO_SYSTEM_COL As Long = 7
Private Const SCREEN_BO_SYSTEM_LENGTH As Long = 20

Private Const SCREEN_MASTER_INDEX As String = "MASTER INDEX"
Private Const SCREEN_MASTER_INDEX_ROW As Long = 1
Private Const SCREEN_MASTER_INDEX_COL As Long = 28
Private Const SCREEN_MASTER_INDEX_LENGTH As Long = 12

Private Const SCREEN_FILE_MAINT_IDX As String = "FILE MAINTENANCE INPUT INDEX"
Private Const SCREEN_FILE_MAINT_IDX_ROW As Long = 1
Private Const SCREEN_FILE_MAINT_IDX_COL As Long = 21
Private Const SCREEN_FILE_MAINT_IDX_LENGTH As Long = 30

Private Const SCREEN_INTERNAL_TXNS As String = "INTERNAL TRANSACTIONS"
Private Const SCREEN_INTERNAL_TXNS_ROW As Long = 1
Private Const SCREEN_INTERNAL_TXNS_COL As Long = 19
Private Const SCREEN_INTERNAL_TXNS_LENGTH As Long = 21

Private Const SCREEN_INTEREST_AMENDMENTS As String = "INTEREST AMENDMENTS" ' Corrected title
Private Const SCREEN_INTEREST_AMENDMENTS_ROW As Long = 1
Private Const SCREEN_INTEREST_AMENDMENTS_COL As Long = 27
Private Const SCREEN_INTEREST_AMENDMENTS_LENGTH As Long = 19

' Intermediate screen constants (for handling)
Private Const SCREEN_SECURITY_REMINDER As String = "SECURITY REMINDER"
Private Const SECURITY_REMINDER_ROW As Long = 1
Private Const SECURITY_REMINDER_COL As Long = 29
Private Const SECURITY_REMINDER_LEN As Long = 20
Private Const SECURITY_REMINDER_INPUT_ROW As Long = 22
Private Const SECURITY_REMINDER_INPUT_COL As Long = 11

Private Const SCREEN_CMD_NOT_RECOGNIZED As String = "Command not recognized" ' Location approx R20, C36
Private Const SCREEN_RBS_HEADER As String = "ROYAL BANK OF SCOTLAND" ' Location approx R1, C1
Private Const SCREEN_BLANK_LINE As String = "" ' Used for checking blank lines

' --- Host Input Coordinates ---
Private Const CMD_LINE_ROW As Long = 21
Private Const CMD_LINE_COL As Long = 13

Private Const OPTION_INPUT_ROW As Long = 21 ' For options on Option Handler (19)
Private Const OPTION_INPUT_COL As Long = 16

Private Const BACK_OFFICE_OPT_ROW As Long = 22 ' For options on Back Office System (1)
Private Const BACK_OFFICE_OPT_COL As Long = 16

Private Const MASTER_INDEX_ACTION_ROW As Long = 22
Private Const MASTER_INDEX_ACTION_COL As Long = 8
Private Const MASTER_INDEX_SC_ROW As Long = 22
Private Const MASTER_INDEX_SC_COL As Long = 74

Private Const FILE_MAINT_IDX_ACTION_ROW As Long = 22
Private Const FILE_MAINT_IDX_ACTION_COL As Long = 8
Private Const FILE_MAINT_IDX_ACCOUNT_ROW As Long = 22
Private Const FILE_MAINT_IDX_ACCOUNT_COL As Long = 21

Private Const INTERNAL_TXNS_ACTION_ROW As Long = 22
Private Const INTERNAL_TXNS_ACTION_COL As Long = 8

' --- Navigation Back Target Constants ---
Private Const NAV_TARGET_APP_MENU As Long = 1
Private Const NAV_TARGET_MASTER_INDEX As Long = 2

' --- Navigation Constants ---
Private Const MAX_NAV_STEP_VERIFY_SEND_ATTEMPTS As Integer = 3 ' Max verify-send-verify attempts for a single step
Private Const MAX_STAR_LOOPS As Integer = 15 ' Max attempts in the STAR loop
Private Const MAX_BACK_NAV_LOOPS As Integer = 15 ' Max key presses in any single back nav loop


' --- Script Title for MsgBoxes / Debugging ---
Private Const SCRIPT_TITLE As String = "Back Office Automation V6"


' --- Main Entry Sub (Version 6 - Process Multiple Accounts) ---
' This is the procedure you will run to read data from Excel,
' connect to Reflection, and navigate for each account,
' optimizing navigation based on Brand and using strict verification.
Sub ProcessAccounts_V6()
    On Error GoTo ErrorHandler ' Error handler defined below

    Debug.Print "--- Starting " & SCRIPT_TITLE & " ---"

    Dim ws As Worksheet
    Dim currentRow As Long
    Dim sortCode As String, accountNumber As String, brand As String
    Dim nextBrand As String
    Dim navigationSuccess As Boolean
    Dim prevBrand As String ' To track Brand of the previous row
    Dim lastReturnScreen As Long ' To track where we returned after the previous row (use NAV_TARGET constants)
    Dim lastRow As Long ' Defined outside loop for error handler access


    ' Initialize state for the first row processing
    ' We assume we start from the Application Menu for the very first record.
    prevBrand = "" ' No previous brand state before the first row
    lastReturnScreen = NAV_TARGET_APP_MENU ' Assume starting from App Menu for the first record


    ' 1. Connect to Reflection
    If Not ConnectToReflection_V6(SESSION_TITLE_PART) Then
        MsgBox "Failed to connect to Reflection session: '" & SESSION_TITLE_PART & "'." & vbCrLf & _
               "Ensure session is open and Automation is enabled.", vbCritical, SCRIPT_TITLE
        GoTo CleanupAndExit
    End If
    Debug.Print SCRIPT_TITLE & ": Successfully connected to Reflection session."

    ' 2. Get Excel Worksheet
    On Error Resume Next
    ' Using ActiveWorkbook for debugging the data issue - Consider changing back to ThisWorkbook if data is in the macro file
    Set ws = ActiveWorkbook.Worksheets(DATA_SHEET_NAME)
    If ws Is Nothing Then
        On Error GoTo 0
        MsgBox "Could not find worksheet named '" & DATA_SHEET_NAME & "' in the Active Workbook. Please check the sheet name and that the correct workbook is active.", vbCritical, SCRIPT_TITLE
        GoTo CleanupAndExit ' Clean up Reflection objects before exiting
    End If
    On Error GoTo 0
    Debug.Print SCRIPT_TITLE & ": Successfully got worksheet '" & ws.Name & "' from workbook '" & ws.Parent.Name & "'."

    ' 3. Find the last row with data in Column A
    ' Initialize lastRow early for error handling before the loop starts
    lastRow = FIRST_DATA_ROW - 1 ' Default if no data found below header
    If ws.Cells(ws.Rows.Count, COL_SORT_CODE).End(xlUp).Row >= FIRST_DATA_ROW Then
       lastRow = ws.Cells(ws.Rows.Count, COL_SORT_CODE).End(xlUp).Row
    End If

    Debug.Print SCRIPT_TITLE & ": lastRow calculated as: " & lastRow & " in column " & COL_SORT_CODE & "."


    If lastRow < FIRST_DATA_ROW Then
        MsgBox "No data found in column A starting from row " & FIRST_DATA_ROW & ".", vbInformation, SCRIPT_TITLE
        GoTo CleanupAndExit
    End If
    Debug.Print SCRIPT_TITLE & ": Found last data row: " & lastRow & " in column " & COL_SORT_CODE & "."

    ' 4. Loop through each data row
    ' Initialize currentRow before loop in case of error on first row read
    currentRow = FIRST_DATA_ROW
    For currentRow = FIRST_DATA_ROW To lastRow
        ' Read data for the current row
        sortCode = Trim(CStr(ws.Cells(currentRow, COL_SORT_CODE).Value))
        accountNumber = Trim(CStr(ws.Cells(currentRow, COL_ACCOUNT).Value))
        brand = UCase(Trim(CStr(ws.Cells(currentRow, COL_BRAND).Value)))

        ' Clear previous status/error before processing this row
        ws.Cells(currentRow, COL_STATUS).Value = ""
        ws.Cells(currentRow, COL_ERROR_DESC).Value = ""


        Debug.Print "----------------------------------------------------"
        Debug.Print SCRIPT_TITLE & ": Processing Row " & currentRow & " | S/C: [" & sortCode & "] | Acc: [" & accountNumber & "] | Brand: [" & brand & "]"

        ' Skip row if essential data is missing after trimming
        If sortCode = "" Or accountNumber = "" Or brand = "" Then
            Debug.Print SCRIPT_TITLE & ": Skipping Row " & currentRow & " - Missing Sort Code, Account, or Brand."
            ws.Cells(currentRow, COL_STATUS).Value = "Skipped - Missing Data"
            ws.Cells(currentRow, COL_ERROR_DESC).Value = "Missing essential data"
            GoTo NextRow ' Skip to the next iteration of the loop
        End If

        ' Determine Brand of the next row (or if it's the last row)
        Dim hasNextRowWithData As Boolean: hasNextRowWithData = False
        If currentRow < lastRow Then
            ' Check if the cell in the next row's sort code column is non-empty
            If Trim(CStr(ws.Cells(currentRow + 1, COL_SORT_CODE).Value)) <> "" Then
               hasNextRowWithData = True
               nextBrand = UCase(Trim(CStr(ws.Cells(currentRow + 1, COL_BRAND).Value)))
            Else
               ' Next row's sort code is empty, treat as end of valid data for brand grouping
               nextBrand = ""
            End If
        Else
            nextBrand = "" ' Indicate this is the last row
        End If


        ' 5. Conditional Forward Navigation
        Dim forwardNavSuccess As Boolean
        Dim useFullPath As Boolean
        If currentRow = FIRST_DATA_ROW Or brand <> prevBrand Or lastReturnScreen <> NAV_TARGET_MASTER_INDEX Then
            useFullPath = True
            Debug.Print SCRIPT_TITLE & ": Deciding on full navigation. Reasons: First Row (" & (currentRow = FIRST_DATA_ROW) & "), Brand Change (" & (brand <> prevBrand) & "), Not returned to MI (" & (lastReturnScreen <> NAV_TARGET_MASTER_INDEX) & "). Previous Brand: [" & prevBrand & "], Last Return: [" & IIf(lastReturnScreen = NAV_TARGET_APP_MENU, SCREEN_APP_MENU, SCREEN_MASTER_INDEX) & "]"
        Else
            useFullPath = False
            Debug.Print SCRIPT_TITLE & ": Deciding on shorter navigation. Reasons: Same Brand (" & (brand = prevBrand) & "), Returned to MI (" & (lastReturnScreen = NAV_TARGET_MASTER_INDEX) & "). Previous Brand: [" & prevBrand & "], Last Return: [" & IIf(lastReturnScreen = NAV_TARGET_APP_MENU, SCREEN_APP_MENU, SCREEN_MASTER_INDEX) & "]"
        End If


        ' Execute the determined forward navigation path
        If useFullPath Then
             Debug.Print SCRIPT_TITLE & ": Starting navigation from " & SCREEN_APP_MENU & " (Full Path)."
             forwardNavSuccess = NavigateFromAppMenu_V6(sortCode, accountNumber, brand)
        Else
             Debug.Print SCRIPT_TITLE & ": Starting navigation from " & SCREEN_MASTER_INDEX & " (Shorter Path)."
             forwardNavSuccess = NavigateFromMasterIndex_V6(sortCode, accountNumber)
        End If


        ' 6. Process Core Logic and Determine/Execute Back Navigation
        If forwardNavSuccess Then
            Debug.Print SCRIPT_TITLE & ": Forward navigation successful for Row " & currentRow & ". Now on " & SCREEN_INTEREST_AMENDMENTS & "."
            ws.Cells(currentRow, COL_STATUS).Value = "Navigated - OK"
            ws.Cells(currentRow, COL_ERROR_DESC).Value = "" ' Clear any previous error


            ' *** PLACEHOLDER FOR CORE BUSINESS LOGIC (Interest Amendment/Checking) ***
            ' Call your specific logic here. It should assume it starts on SCREEN_INTEREST_AMENDMENTS.
            ' Example:
            ' Dim processSuccess As Boolean
            ' processSuccess = PerformInterestAmendment_V6(ws, currentRow)
            ' If processSuccess Then
            '    ws.Cells(currentRow, COL_STATUS).Value = "Processed - OK"
            '    ws.Cells(currentRow, COL_ERROR_DESC).Value = ""
            ' Else
            '    ws.Cells(currentRow, COL_STATUS).Value = "Processing Failed"
            '    ' Error details should be set by PerformInterestAmendment_V6 (e.g., ws.Cells(currentRow, COL_ERROR_DESC).Value = "Specific error")
            ' End If
            ' *For this version, we will just pause if desired.*

            ' To allow manual checking after navigation, uncomment the MsgBox below:
             MsgBox "PAUSED: On target screen for S/C: " & sortCode & ", A/N: " & accountNumber, vbInformation, SCRIPT_TITLE
            ' To proceed without pausing, keep it commented out.
            ' *** END PLACEHOLDER ***


            ' --- Determine Conditional Back Navigation Target ---
            Dim targetReturn As Long
            ' Navigate back to Master Index ONLY if there's a next row with data AND it has the same brand
            If hasNextRowWithData And brand = nextBrand Then
                targetReturn = NAV_TARGET_MASTER_INDEX
                Debug.Print SCRIPT_TITLE & ": Next row is same brand and has data. Will attempt navigating back to " & SCREEN_MASTER_INDEX & "."
            Else
                ' Otherwise (Last row, or next row has different brand, or next row has no data), navigate back to App Menu
                targetReturn = NAV_TARGET_APP_MENU
                Debug.Print SCRIPT_TITLE & ": Next row is different brand/last row/no data. Will attempt navigating back to " & SCREEN_APP_MENU & "."
            End If

            ' --- Execute Back Navigation ---
            Dim backNavSuccess As Boolean
            ' Verify current screen is Interest Amendments before starting back nav.
            Debug.Print SCRIPT_TITLE & ": Verifying current screen is " & SCREEN_INTEREST_AMENDMENTS & " before starting back navigation."
            If VerifyScreen_V6(SCREEN_INTEREST_AMENDMENTS, SCREEN_INTEREST_AMENDMENTS_ROW, SCREEN_INTEREST_AMENDMENTS_COL, SCREEN_INTEREST_AMENDMENTS_LENGTH) Then
                 Debug.Print SCRIPT_TITLE & ": Starting back navigation from confirmed " & SCREEN_INTEREST_AMENDMENTS & "."
                 backNavSuccess = NavigateBack_V6(targetReturn)
            Else
                 ' We were expected to be on Interest Amendments after forward nav, but we are not.
                 Debug.Print SCRIPT_TITLE & ": ERROR: Not on expected screen (" & SCREEN_INTEREST_AMENDMENTS & ") before starting back navigation for row " & currentRow & ". Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'."
                 ws.Cells(currentRow, COL_STATUS).Value = "Failed - Back Nav Start" ' Specific status for this failure
                 ws.Cells(currentRow, COL_ERROR_DESC).Value = "Not on " & SCREEN_INTEREST_AMENDMENTS & " before back nav."
                 MsgBox "Automation lost sync. Expected '" & SCREEN_INTEREST_AMENDMENTS & "' before back navigation. Attempting emergency return to App Menu.", vbCritical, SCRIPT_TITLE
                 backNavSuccess = NavigateBack_V6(NAV_TARGET_APP_MENU) ' Attempt emergency return
                 ' Treat as a failure for this row's back nav regardless of emergency return success
            End If


            ' --- Update State Based on Back Navigation Outcome ---
            If backNavSuccess Then
                 lastReturnScreen = targetReturn
                 Debug.Print SCRIPT_TITLE & ": Successfully navigated back to target: " & IIf(lastReturnScreen = NAV_TARGET_APP_MENU, SCREEN_APP_MENU, SCREEN_MASTER_INDEX) & "."
                 ' Status for this row is already set based on forward nav and processing
            Else
                 ' Critical failure in navigating back to the intended target
                 Debug.Print SCRIPT_TITLE & ": CRITICAL FAILURE during back navigation for row " & currentRow & ". Cannot guarantee state."
                 ' If forward nav was successful, but back nav failed, we need to reflect that.
                 ' If the status is still "Navigated - OK", change it to indicate back nav failure.
                 If ws.Cells(currentRow, COL_STATUS).Value = "Navigated - OK" Then
                     ws.Cells(currentRow, COL_STATUS).Value = "Failed - Back Nav"
                     ' Error details should have been set by NavigateBack_V6's internal messages
                 End If
                 lastReturnScreen = NAV_TARGET_APP_MENU ' Force full re-navigation for the next row
                 ' Optional: MsgBox for critical back nav failure already inside NavigateBack_V6
                 ' Consider exiting here on critical back nav failure if state is unrecoverable
                 ' GoTo CleanupAndExit
            End If

        Else
            ' Forward navigation failed - status and error desc already set inside forward navigation functions
            Debug.Print SCRIPT_TITLE & ": Forward navigation failed for Row " & currentRow & "."
            ' Error details should have been set by the navigation function or error handler

            ' After a failed forward navigation, we are on an unpredictable screen.
            ' It's safest to try and get back to a known state (like App Menu) before next row.
            Debug.Print SCRIPT_TITLE & ": Attempting emergency return to " & SCREEN_APP_MENU & " after forward nav failure."
            ' Attempt emergency back nav, ignore the success/failure of THIS specific attempt.
            ' because the state is already bad due to forward nav failure.
            NavigateBack_V6 NAV_TARGET_APP_MENU
            lastReturnScreen = NAV_TARGET_APP_MENU ' Force full re-nav for next row.

        End If

        ' Update previous brand for the next iteration (even if navigation failed/skipped, we processed this row's data attempt)
        prevBrand = brand

NextRow: ' Label for the GoTo statement. Execution jumps here to process the next row.
        ' Loop moves to the next row automatically

    Next currentRow

    Debug.Print "----------------------------------------------------"
    Debug.Print SCRIPT_TITLE & ": Finished processing all rows."

CleanupAndExit: ' Label for cleanup. Execution jumps here on error or when loop finishes.
    ' 8. Clean up the Reflection objects
    Call CleanUpReflectionObjects_V6
    Set ws = Nothing

    Debug.Print "--- Finished " & SCRIPT_TITLE & " ---"
End Sub


' --- Connection Logic (Version 6) ---
' Connects to an existing Reflection Workspace and finds the specified session
' using GetObject and GetViewByTitleText.
' Returns True if connection and object retrieval is successful, False otherwise.
Private Function ConnectToReflection_V6(ByVal targetSessionExactTitle As String) As Boolean
    On Error GoTo ConnectErrorHandler_V6
    ConnectToReflection_V6 = False

    Debug.Print "Connect_V6: Attempting GetObject(""Reflection Workspace"")..."
    On Error Resume Next
    Set objReflectionApp = GetObject("Reflection Workspace")
    If Err.Number <> 0 Or objReflectionApp Is Nothing Then
        Err.Clear
        Debug.Print "Connect_V6: GetObject(""Reflection Workspace"") FAILED."
        MsgBox "Could not connect to Reflection Workspace." & vbCrLf & _
               "Please ensure Reflection is running and that 'Enable Reflection Automation' is checked.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "Connect_V6: RApp obtained. TypeName: " & TypeName(objReflectionApp)
    On Error GoTo ConnectErrorHandler_V6

    Debug.Print "Connect_V6: Attempting objReflectionApp.GetObject(""Frame"")..."
    Set objFrame = objReflectionApp.GetObject("Frame")
    If objFrame Is Nothing Then Debug.Print "Connect_V6: Frame object is Nothing.": Exit Function
    Debug.Print "Connect_V6: objFrame obtained. TypeName: " & TypeName(objFrame)

    If Not objFrame.Visible Then objFrame.Visible = True
    objFrame.Activate
    Debug.Print "Connect_V6: Frame Visible/Activated."

    Debug.Print "Connect_V6: Attempting objFrame.GetViewByTitleText(""" & targetSessionExactTitle & """)..."
    On Error Resume Next
    Set objView = objFrame.GetViewByTitleText(targetSessionExactTitle)
    If Err.Number <> 0 Or objView Is Nothing Then
        Err.Clear
        Debug.Print "Connect_V6: objFrame.GetViewByTitleText FAILED or returned Nothing."
        MsgBox "Could not find a Reflection session with the EXACT title: '" & targetSessionExactTitle & "'.", vbCritical, SCRIPT_TITLE ' Corrected concatenation
        Exit Function
    End If
    Debug.Print "Connect_V6: objFrame.GetViewByTitleText SUCCEEDED. View Title: '" & objView.TitleText & "'. TypeName(objView): " & TypeName(objView)
    On Error GoTo ConnectErrorHandler_V6

    Debug.Print "Connect_V6: Skipping objView.Activate to avoid previous Error 438."

    Debug.Print "Connect_V6: Attempting objView.Control..."
    Set objTerminal = objView.Control
    If objTerminal Is Nothing Then Debug.Print "Connect_V6: Terminal object is Nothing.": Exit Function
    Debug.Print "Connect_V6: objTerminal obtained. TypeName: " & TypeName(objTerminal)

    Debug.Print "Connect_V6: Attempting objTerminal.Screen..."
    Set objScreen = objTerminal.Screen
    If objScreen Is Nothing Then Debug.Print "Connect_V6: Screen object is Nothing.": Exit Function
    Debug.Print "Connect_V6: objScreen obtained. TypeName: " & TypeName(objScreen)

    On Error Resume Next
    objTerminal.DisableKeystrokeProductivity = True
    If Err.Number <> 0 Then Debug.Print "Connect_V6: Info - Error setting DisableKeystrokeProductivity: " & Err.Description: Err.Clear
    objTerminal.DisableScreenHistory = True
    If Err.Number <> 0 Then Debug.Print "Connect_V6: Info - Error setting DisableScreenHistory: " & Err.Description: Err.Clear
    On Error GoTo ConnectErrorHandler_V6

    ConnectToReflection_V6 = True
    Debug.Print "Connect_V6: All core Reflection objects set successfully."
    Exit Function

ConnectErrorHandler_V6:
    Debug.Print "Connect_V6: Error (captured) - " & Err.Number & ": " & Err.Description
    ConnectToReflection_V6 = False
    Exit Function
End Function

Private Sub CleanUpReflectionObjects_V6()
    On Error Resume Next

    Set objScreen = Nothing
    Set objTerminal = Nothing
    Set objView = Nothing
    Set objFrame = Nothing
    Set objReflectionApp = Nothing

    On Error GoTo 0
    Debug.Print SCRIPT_TITLE & ": Reflection objects released."
End Sub

' --- Screen Interaction Helpers (Version 6 - Manual Wait) ---

Private Sub WaitUntilReady_V6(Optional ByVal timeoutMilliseconds As Long = 10000)
    If objScreen Is Nothing Or objReflectionApp Is Nothing Then
        Debug.Print "WaitUntilReady_V6: objScreen or objReflectionApp is Nothing. Cannot wait."
        Exit Sub
    End If

    Dim startTime As Date: startTime = Now
    Dim timeoutTime As Date: timeoutTime = DateAdd("s", timeoutMilliseconds / 1000, startTime)

    Do While objScreen.OIA.XStatus <> 0 And Now < timeoutTime

        If CheckForAndHandleSecurityReminder_V6() Then
            ' Reminder handled, loop continues waiting for main OIA status
        End If

        objReflectionApp.Wait 50
        DoEvents

    Loop

    If Now >= timeoutTime And objScreen.OIA.XStatus <> 0 Then
        Debug.Print "WaitUntilReady_V6: Timeout occurred (" & timeoutMilliseconds & "ms) waiting for XStatus=0. Last XStatus: " & objScreen.OIA.XStatus
        ' Optional: Add a more prominent warning or error here
        ' MsgBox "Timeout waiting for host readiness.", vbExclamation, SCRIPT_TITLE
    End If

    CheckForAndHandleSecurityReminder_V6

    objReflectionApp.Wait 200

End Sub

Private Function CheckForAndHandleSecurityReminder_V6() As Boolean
    CheckForAndHandleSecurityReminder_V6 = False
    If objScreen Is Nothing Or objReflectionApp Is Nothing Then Exit Function

    objReflectionApp.Wait 50

    If ScreenContainsText_V6(SCREEN_SECURITY_REMINDER, SECURITY_REMINDER_ROW, SECURITY_REMINDER_COL, SECURITY_REMINDER_LEN) Then
        Debug.Print "CheckForAndHandleSecurityReminder_V6: Detected Security Reminder. Sending 'Y'..."

        objScreen.PutText2 "Y", SECURITY_REMINDER_INPUT_ROW, SECURITY_REMINDER_INPUT_COL
        objScreen.SendControlKey ControlKeyCode_Transmit
        Debug.Print "CheckForAndHandleSecurityReminder_V6: Sent Transmit."

        CheckForAndHandleSecurityReminder_V6 = True

        ' After sending Transmit, OIA will be busy. The outer loop/calling code must handle the wait.
    End If
End Function

Private Function ScreenContainsText_V6(expectedText As String, rowNum As Long, colNum As Long, Optional ByVal length As Long = 0, Optional minSettleTimeMs As Long = 50) As Boolean
    If objScreen Is Nothing Or objReflectionApp Is Nothing Then ScreenContainsText_V6 = False: Exit Function

    If minSettleTimeMs > 0 Then objReflectionApp.Wait minSettleTimeMs

    If length = 0 Then length = Len(expectedText)

    Dim actualText As String: actualText = ""
    On Error Resume Next
    actualText = Trim(objScreen.GetText(rowNum, colNum, length))
    On Error GoTo 0

    ScreenContainsText_V6 = (UCase(actualText) = UCase(expectedText))

End Function

Private Function VerifyScreen_V6(expectedText As String, rowNum As Long, colNum As Long, Optional ByVal length As Long = 0) As Boolean
    If objScreen Is Nothing Then VerifyScreen_V6 = False: Exit Function

    Call WaitUntilReady_V6()

    If length = 0 Then length = Len(expectedText)

    Dim actualText As String: actualText = ""
    On Error Resume Next
    actualText = Trim(objScreen.GetText(rowNum, colNum, length))
    On Error GoTo 0

    If UCase(actualText) = UCase(expectedText) Then
        VerifyScreen_V6 = True
        ' Debug.Print "VerifyScreen_V6: Confirmed '" & expectedText & "' at R" & rowNum & "C" & colNum & "L" & length & "."
    Else
        VerifyScreen_V6 = False
        Debug.Print "VerifyScreen_V6 FAILED: Expected '" & expectedText & "' at R" & rowNum & "C" & colNum & "L" & length & ", Found '" & actualText & "'."
        ' Optional: MsgBox for critical verification failures can be added here
        ' MsgBox "Screen verification failed. Expected '" & expectedText & "' but found '" & actualText & "' at R" & rowNum & "C" & colNum & ".", vbCritical, SCRIPT_TITLE
    End If
End Function

' *** NEW HELPER: Sends TERM ALL and 3 Transmits ***
Private Sub SendTermAll_V6(data As String, rowNum As Long, colNum As Long)
    If objScreen Is Nothing Then Exit Sub

    Call WaitUntilReady_V6()

    objScreen.PutText2 data, rowNum, colNum
    Debug.Print "SendTermAll_V6: Put data '" & data & "' at R" & rowNum & "C" & colNum & "."

    Debug.Print "SendTermAll_V6: Sending Transmit key (x3)."
    objScreen.SendControlKey ControlKeyCode_Transmit
    objScreen.SendControlKey ControlKeyCode_Transmit
    objScreen.SendControlKey ControlKeyCode_Transmit

    Call WaitUntilReady_V6(5000)
End Sub

' *** MODIFIED HELPER: Sends text and 1 Transmit (standard behavior) ***
Private Sub SendText_V6(data As String, rowNum As Long, colNum As Long)
    If objScreen Is Nothing Then Exit Sub

    Call WaitUntilReady_V6()

    objScreen.PutText2 data, rowNum, colNum
    Debug.Print "SendText_V6: Put data '" & data & "' at R" & rowNum & "C" & colNum & "."

    Debug.Print "SendText_V6: Sending Transmit key (x1)."
    objScreen.SendControlKey ControlKeyCode_Transmit

    Call WaitUntilReady_V6(5000)
End Sub

' Sends a control key (like PF keys, Enter/Transmit, etc.) to the screen.
Private Sub SendControlKey_V6(keyCode As Long, Optional waitAfterMs As Long = 500)
     If objScreen Is Nothing Then Exit Sub

     Call WaitUntilReady_V6()

     Debug.Print "SendControlKey_V6: Sending key code " & keyCode & "."
     objScreen.SendControlKey keyCode

     Call WaitUntilReady_V6(waitAfterMs)
End Sub


' --- Forward Navigation Functions (Version 6) ---

' Navigates from the Application Selection Menu through the full path
' to the Interest Amendments screen.
' Returns True if successful, False otherwise. Handles errors internally.
Private Function NavigateFromAppMenu_V6(ByVal sc As String, ByVal acct As String, ByVal brnd As String) As Boolean
    Dim confirmCode As String
    Dim starLoopCount As Long
    Const maxStarLoops As Long = 15

    NavigateFromAppMenu_V6 = False

    If objScreen Is Nothing Then
        Debug.Print "NavigateFromAppMenu_V6: objScreen is Nothing."
        Exit Function
    End If

    ' --- Determine Confirmation Code based on Brand ---
    Debug.Print "NavigateFromAppMenu_V6: Determining confirm code for brand [" & brnd & "]."
    Select Case brnd
        Case "RBS", "RBG", "RBI", "VIR": confirmCode = "PRCIR#T#"
        Case "NWB", "CTS", "NWO", "IOM": confirmCode = "PRCIN#T#"
        Case "UBN": confirmCode = "PRCIJ#T#"
        Case "UBR": confirmCode = "PRCIK#T#"
        Case Else
            Debug.Print "NavigateFromAppMenu_V6: Invalid Brand '" & brnd & "'. Cannot proceed."
            MsgBox "Invalid Brand specified: '" & brnd & "'. Navigation aborted.", vbExclamation, SCRIPT_TITLE
            Exit Function
    End Select
    Debug.Print "NavigateFromAppMenu_V6: Using confirm code: " & confirmCode & " for Brand: " & brnd & "."


    ' --- Step 1: Verify starting screen is APPLICATION SELECTION MENU ---
    Debug.Print "NavigateFromAppMenu_V6: Verifying start screen: " & SCREEN_APP_MENU
    If Not VerifyScreen_V6(SCREEN_APP_MENU, SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH) Then
         Debug.Print "NavigateFromAppMenu_V6: NOT starting on " & SCREEN_APP_MENU & ". Actual: '" & Trim(objScreen.GetText(SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH)) & "'"
         MsgBox "Automation expected to start on '" & SCREEN_APP_MENU & "' for full navigation path. Please check current screen and retry.", vbCritical, SCRIPT_TITLE
         Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V6: Confirmed on " & SCREEN_APP_MENU & "."


    ' --- Step 2: Send TERM ALL ---
    Debug.Print "NavigateFromAppMenu_V6: Sending TERM ALL (with 3 Transmits)..."
    Call SendTermAll_V6("TERM ALL", CMD_LINE_ROW, CMD_LINE_COL) ' Use the helper for 3 transmits
    Debug.Print "NavigateFromAppMenu_V6: Sent TERM ALL + 3 Transmits."

    ' --- Step 3: Verify screen is ready for Brand Code after TERM ALL ---
    Debug.Print "NavigateFromAppMenu_V6: Verifying screen is ready for Brand Code after TERM ALL."
    ' We MUST verify being on APP MENU or a compatible screen before sending Brand Code.
    If Not VerifyScreen_V6(SCREEN_APP_MENU, SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH) Then
        Debug.Print "NavigateFromAppMenu_V6: NOT on " & SCREEN_APP_MENU & " after TERM ALL. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
        MsgBox "Automation failed to return to '" & SCREEN_APP_MENU & "' after sending TERM ALL. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V6: Confirmed on " & SCREEN_APP_MENU & " after TERM ALL."


    ' --- Step 4: Send Brand Code ---
    ' Verify prerequisite screen *before* sending command
     Debug.Print "NavigateFromAppMenu_V6: Verifying " & SCREEN_APP_MENU & " before sending Brand code."
     If Not VerifyScreen_V6(SCREEN_APP_MENU, SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH) Then
         Debug.Print "NavigateFromAppMenu_V6: NOT on " & SCREEN_APP_MENU & " when expected before sending Brand code. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
         MsgBox "Automation lost sync. Expected '" & SCREEN_APP_MENU & "' before sending Brand code. Navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
     End If
    Debug.Print "NavigateFromAppMenu_V6: Sending Brand code '" & confirmCode & "'..."
    Call SendText_V6(confirmCode, CMD_LINE_ROW, CMD_LINE_COL)
    Debug.Print "NavigateFromAppMenu_V6: Sent Brand code + 1 Transmit."

    ' --- Step 5: Verify expected next screen (Option Handler or intermediate) ---
    Debug.Print "NavigateFromAppMenu_V6: Navigating from post-Brand Code screen to " & SCREEN_OPT_HANDLER_MAIN & "."
    starLoopCount = 0
    Dim currentScreenTextR1C1L80 As String ' Variable to hold current screen text for debugging

    ' After sending Brand Code, we expect to eventually land on the Option Handler.
    ' Loop and perform recovery actions (Transmit, STAR) until we are on Option Handler.
    Do While Not VerifyScreen_V6(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_ROW, SCREEN_OPT_HANDLER_COL, SCREEN_OPT_HANDLER_LENGTH) And starLoopCount < maxStarLoops

         ' *** CRITICAL VERIFICATION: Check CURRENT screen before sending a recovery action ***
         Dim onKnownIntermediateScreen As Boolean: onKnownIntermediateScreen = False
         currentScreenTextR1C1L80 = Trim(objScreen.GetText(1, 1, 80)) ' Get current screen text for logging

         ' Verify if we are on RBS Header
         If VerifyScreen_V6(SCREEN_RBS_HEADER, 1, 1, Len(SCREEN_RBS_HEADER)) Then
              Debug.Print "NavigateFromAppMenu_V6: Detected " & SCREEN_RBS_HEADER & ". Sending Transmit."
              Call SendControlKey_V6(ControlKeyCode_Transmit)
              onKnownIntermediateScreen = True
         ' Verify if we are on a blank screen (simplified check R1C1L80 is empty)
         ElseIf currentScreenTextR1C1L80 = SCREEN_BLANK_LINE Then
              Debug.Print "NavigateFromAppMenu_V6: Detected blank screen. Sending STAR."
              Call SendText_V6("STAR", 1, 1)
              onKnownIntermediateScreen = True
         ' Verify if we are still on APP MENU (Sometimes needed if brand code didn't work fully)
         ElseIf VerifyScreen_V6(SCREEN_APP_MENU, SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH) Then
              Debug.Print "NavigateFromAppMenu_V6: Detected still on " & SCREEN_APP_MENU & ". Resending Brand Code."
              Call SendText_V6(confirmCode, CMD_LINE_ROW, CMD_LINE_COL)
              onKnownIntermediateScreen = True
         ' --- Optional: Handle other specific intermediate screens if they exist based on observation ---
         ' ElseIf VerifyScreen_V6(SOME_OTHER_SCREEN, ...) Then ...

         End If

         ' If we weren't on a known intermediate screen that was handled, we might be stuck or on an unexpected screen.
         ' Log the screen content and consider failure if max attempts are reached.
         If Not onKnownIntermediateScreen Then
             Debug.Print "NavigateFromAppMenu_V6: On unexpected screen (" & currentScreenTextR1C1L80 & ") while waiting for " & SCREEN_OPT_HANDLER_MAIN & ". Attempt " & starLoopCount + 1 & "."
             ' No key sent here, just rely on the next loop iteration's check.
             ' Add a small wait if no action was taken
             objReflectionApp.Wait 100
         End If

         starLoopCount = starLoopCount + 1
         ' Wait is handled by the Send calls or the explicit wait above

         ' Re-check if Option Handler is reached at the start of the next loop iteration via VerifyScreen_V6

    Loop

    ' Final check after the STAR loop attempts
    If Not VerifyScreen_V6(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_ROW, SCREEN_OPT_HANDLER_COL, SCREEN_OPT_HANDLER_LENGTH) Then
         Debug.Print "NavigateFromAppMenu_V6: Did not reach " & SCREEN_OPT_HANDLER_MAIN & " after maximum attempts (" & maxStarLoops & ") in STAR loop. Last screen R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
         MsgBox "Failed to navigate to Option Handler screen after Brand Code. Navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V6: Confirmed on " & SCREEN_OPT_HANDLER_MAIN & "."


    ' --- Step 6: Option 19 (Back Office System) ---
    ' Verify prerequisite screen *before* sending command
     Debug.Print "NavigateFromAppMenu_V6: Verifying " & SCREEN_OPT_HANDLER_MAIN & " before sending 19."
     If Not VerifyScreen_V6(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_ROW, SCREEN_OPT_HANDLER_COL, SCREEN_OPT_HANDLER_LENGTH) Then
         Debug.Print "NavigateFromAppMenu_V6: NOT on " & SCREEN_OPT_HANDLER_MAIN & " when expected before sending 19. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
         MsgBox "Automation lost sync. Expected '" & SCREEN_OPT_HANDLER_MAIN & "' before sending 19. Navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
     End If
    Debug.Print "NavigateFromAppMenu_V6: Sending 19..."
    Call SendText_V6("19", OPTION_INPUT_ROW, OPTION_INPUT_COL)
    Debug.Print "NavigateFromAppMenu_V6: Sent 19."

    ' --- Step 7: Verify expected next screen is BACK OFFICE SYSTEM ---
    Debug.Print "NavigateFromAppMenu_V6: Verifying expected next screen: " & SCREEN_BO_SYSTEM
    If Not VerifyScreen_V6(SCREEN_BO_SYSTEM, SCREEN_BO_SYSTEM_ROW, SCREEN_BO_SYSTEM_COL, SCREEN_BO_SYSTEM_LENGTH) Then
        Debug.Print "NavigateFromAppMenu_V6: Did not reach " & SCREEN_BO_SYSTEM & ". Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
         MsgBox "Failed to navigate to Back Office System menu after sending 19. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V6: Confirmed on " & SCREEN_BO_SYSTEM & "."


    ' --- Step 8: Option 1 (Master Index) ---
    ' Verify prerequisite screen *before* sending command
     Debug.Print "NavigateFromAppMenu_V6: Verifying " & SCREEN_BO_SYSTEM & " before sending 1."
     If Not VerifyScreen_V6(SCREEN_BO_SYSTEM, SCREEN_BO_SYSTEM_ROW, SCREEN_BO_SYSTEM_COL, SCREEN_BO_SYSTEM_LENGTH) Then
         Debug.Print "NavigateFromAppMenu_V6: NOT on " & SCREEN_BO_SYSTEM & " when expected before sending 1. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
         MsgBox "Automation lost sync. Expected '" & SCREEN_BO_SYSTEM & "' before sending 1. Navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
     End If
    Debug.Print "NavigateFromAppMenu_V6: Sending 1..."
    Call SendText_V6("1", BACK_OFFICE_OPT_ROW, BACK_OFFICE_OPT_COL)
    Debug.Print "NavigateFromAppMenu_V6: Sent 1."

    ' --- Step 9: Verify expected next screen is MASTER INDEX ---
    Debug.Print "NavigateFromAppMenu_V6: Verifying expected next screen: " & SCREEN_MASTER_INDEX
    If Not VerifyScreen_V6(SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH) Then
        Debug.Print "NavigateFromAppMenu_V6: Did not reach " & SCREEN_MASTER_INDEX & ". Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
         MsgBox "Failed to navigate to Master Index after sending 1. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromAppMenu_V6: Confirmed on " & SCREEN_MASTER_INDEX & "."

    ' --- Proceed with common steps from Master Index to Interest Amendments ---
    Dim commonPathSuccess As Boolean
    commonPathSuccess = NavigateFromMasterIndexToInterestAmendments_V6(sc, acct)

    If commonPathSuccess Then
        Debug.Print "NavigateFromAppMenu_V6: Successfully completed common path to " & SCREEN_INTEREST_AMENDMENTS & "."
        NavigateFromAppMenu_V6 = True ' Full navigation success!
    Else
        Debug.Print "NavigateFromAppMenu_V6: Common path from Master Index failed."
        ' Error message already shown by NavigateFromMasterIndexToInterestAmendments_V6
        NavigateFromAppMenu_V6 = False
    End If

    ' Returns NavigateFromAppMenu_V6 (True/False)
End Function

' Navigates from the Master Index screen through the shorter path to the Interest Amendments screen.
' Returns True if successful, False otherwise. Handles errors internally.
Private Function NavigateFromMasterIndex_V6(ByVal sc As String, ByVal acct As String) As Boolean
    NavigateFromMasterIndex_V6 = False

    If objScreen Is Nothing Then
        Debug.Print "NavigateFromMasterIndex_V6: objScreen is Nothing."
        Exit Function
    End If

    ' --- Step 1: Verify starting screen is MASTER INDEX ---
    Debug.Print "NavigateFromMasterIndex_V6: Verifying start screen: " & SCREEN_MASTER_INDEX & "."
    If Not VerifyScreen_V6(SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH) Then
         Debug.Print "NavigateFromMasterIndex_V6: NOT starting on " & SCREEN_MASTER_INDEX & ". Actual: '" & Trim(objScreen.GetText(SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH)) & "'"
         MsgBox "Automation expected to start on '" & SCREEN_MASTER_INDEX & "' for shorter navigation path. Please check current state and retry.", vbCritical, SCRIPT_TITLE
         Exit Function
    End If
    Debug.Print "NavigateFromMasterIndex_V6: Confirmed on " & SCREEN_MASTER_INDEX & "."

    ' --- Proceed with common steps from Master Index to Interest Amendments ---
    Dim commonPathSuccess As Boolean
    commonPathSuccess = NavigateFromMasterIndexToInterestAmendments_V6(sc, acct)

     If commonPathSuccess Then
        Debug.Print "NavigateFromMasterIndex_V6: Successfully completed common path to " & SCREEN_INTEREST_AMENDMENTS & "."
        NavigateFromMasterIndex_V6 = True ' Shorter navigation success!
    Else
        Debug.Print "NavigateFromMasterIndex_V6: Common path from Master Index failed."
        ' Error message already shown by NavigateFromMasterIndexToInterestAmendments_V6
        NavigateFromMasterIndex_V6 = False
    End If

    ' Returns NavigateFromMasterIndex_V6 (True/False)
End Function

' --- Common Navigation Path from Master Index to Interest Amendments ---
' Used by both NavigateFromAppMenu_V6 and NavigateFromMasterIndex_V6.
' Navigates from MASTER INDEX to INTEREST AMENDMENTS.
' Returns True if successful, False otherwise. Handles errors internally.
Private Function NavigateFromMasterIndexToInterestAmendments_V6(ByVal sc As String, ByVal acct As String) As Boolean
    NavigateFromMasterIndexToInterestAmendments_V6 = False

    If objScreen Is Nothing Then
        Debug.Print "NavigateFromMasterIndexToInterestAmendments_V6: objScreen is Nothing."
        Exit Function
    End If

    ' --- Step 1: Verify prerequisite screen is MASTER INDEX ---
     Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Verifying " & SCREEN_MASTER_INDEX & " before sending 20 + S/C." ' Corrected debug print typo
     If Not VerifyScreen_V6(SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH) Then
         Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: NOT on " & SCREEN_MASTER_INDEX & " when expected before sending 20 + S/C. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'" ' Corrected debug print typo
         MsgBox "Automation lost sync. Expected '" & SCREEN_MASTER_INDEX & "' before sending 20+S/C. Navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
     End If

    ' --- Step 2: Master Index - Action 20, Sort Code ---
    Dim formattedSC As String: formattedSC = Format(sc, "000000")
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Sending 20 + S/C " & formattedSC & "..." ' Corrected debug print typo
    Call WaitUntilReady_V6(100)
    objScreen.PutText2 "20", MASTER_INDEX_ACTION_ROW, MASTER_INDEX_ACTION_COL
    objScreen.PutText2 formattedSC, MASTER_INDEX_SC_ROW, MASTER_INDEX_SC_COL
    Call SendControlKey_V6(ControlKeyCode_Transmit, 1000)
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Sent 20 + S/C + 1 Transmit." ' Corrected debug print typo

    ' --- Step 3: Verify expected next screen is FILE MAINTENANCE INPUT INDEX ---
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Verifying expected next screen: " & SCREEN_FILE_MAINT_IDX ' Corrected debug print typo
    If Not VerifyScreen_V6(SCREEN_FILE_MAINT_IDX, SCREEN_FILE_MAINT_IDX_ROW, SCREEN_FILE_MAINT_IDX_COL, SCREEN_FILE_MAINT_IDX_LENGTH) Then
        Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Did not reach " & SCREEN_FILE_MAINT_IDX & ". Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'" ' Corrected debug print typo
         MsgBox "Failed to navigate to File Maintenance Index after 20+S/C. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromMasterIndexToInterestAmendments_V6: Confirmed on " & SCREEN_FILE_MAINT_IDX & "."


    ' --- Step 4: Verify prerequisite screen is FILE MAINTENANCE INPUT INDEX ---
     Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Verifying " & SCREEN_FILE_MAINT_IDX & " before sending 20 + A/N." ' Corrected debug print typo
     If Not VerifyScreen_V6(SCREEN_FILE_MAINT_IDX, SCREEN_FILE_MAINT_IDX_ROW, SCREEN_FILE_MAINT_IDX_COL, SCREEN_FILE_MAINT_IDX_LENGTH) Then
         Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: NOT on " & SCREEN_FILE_MAINT_IDX & " when expected before sending 20 + A/N. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'" ' Corrected debug print typo
         MsgBox "Automation lost sync. Expected '" & SCREEN_FILE_MAINT_IDX & "' before sending 20+A/N. Navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
     End If

    ' --- Step 5: File Maint Idx - Action 20, Account Number ---
    Dim formattedAcct As String: formattedAcct = Format(acct, "00000000")
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Sending 20 + A/N " & formattedAcct & "..." ' Corrected debug print typo
    Call WaitUntilReady_V6(100)
    objScreen.PutText2 "20", FILE_MAINT_IDX_ACTION_ROW, FILE_MAINT_IDX_ACTION_COL
    objScreen.PutText2 formattedAcct, FILE_MAINT_IDX_ACCOUNT_ROW, FILE_MAINT_IDX_ACCOUNT_COL
    Call SendControlKey_V6(ControlKeyCode_Transmit, 1000)
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Sent 20 + A/N + 1 Transmit." ' Corrected debug print typo

    ' --- Step 6: Verify expected next screen is INTERNAL TRANSACTIONS ---
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Verifying expected next screen: " & SCREEN_INTERNAL_TXNS ' Corrected debug print typo
    If Not VerifyScreen_V6(SCREEN_INTERNAL_TXNS, SCREEN_INTERNAL_TXNS_ROW, SCREEN_INTERNAL_TXNS_COL, SCREEN_INTERNAL_TXNS_LENGTH) Then
        Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Did not reach " & SCREEN_INTERNAL_TXNS & ". Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'" ' Corrected debug print typo
         MsgBox "Failed to navigate to Internal Transactions screen after 20+A/N. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateFromMasterIndexToInterestAmendments_V6: Confirmed on " & SCREEN_INTERNAL_TXNS & "."


     ' --- Step 7: Verify prerequisite screen is INTERNAL TRANSACTIONS ---
     Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Verifying " & SCREEN_INTERNAL_TXNS & " before sending 04." ' Corrected debug print typo
     If Not VerifyScreen_V6(SCREEN_INTERNAL_TXNS, SCREEN_INTERNAL_TXNS_ROW, SCREEN_INTERNAL_TXNS_COL, SCREEN_INTERNAL_TXNS_LENGTH) Then
         Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: NOT on " & SCREEN_INTERNAL_TXNS & " when expected before sending 04. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'" ' Corrected debug print typo
         MsgBox "Automation lost sync. Expected '" & SCREEN_INTERNAL_TXNS & "' before sending 04. Navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
     End If

    ' --- Step 8: Internal Txns - Action 04 (Interest Amendments) ---
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Sending 04..." ' Corrected debug print typo
    Call SendText_V6("04", INTERNAL_TXNS_ACTION_ROW, INTERNAL_TXNS_ACTION_COL)
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Sent 04 + 1 Transmit." ' Corrected debug print typo

    ' --- Step 9: Verify arrival at the target screen (Interest Amendments) ---
    Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Verifying target screen: " & SCREEN_INTEREST_AMENDMENTS & "." ' Corrected debug print typo
    If VerifyScreen_V6(SCREEN_INTEREST_AMENDMENTS, SCREEN_INTEREST_AMENDMENTS_ROW, SCREEN_INTEREST_AMENDMENTS_COL, SCREEN_INTEREST_AMENDMENTS_LENGTH) Then
        Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Successfully reached primary target: " & SCREEN_INTEREST_AMENDMENTS & "." ' Corrected debug print typo
        NavigateFromMasterIndexToInterestAmendments_V6 = True ' Common path success!
    Else
        Debug.Print "NavigateFromMasterIndexToInterestAmendaments_V6: Did not reach " & SCREEN_INTEREST_AMENDMENTS & ". Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'" ' Corrected debug print typo
        MsgBox "Failed to navigate to the expected Interest Amendment screen after 04. Navigation aborted.", vbCritical, SCRIPT_TITLE
        NavigateFromMasterIndexToInterestAmendments_V6 = False
    End If

    ' Returns NavigateFromMasterIndexToInterestAmendments_V6 (True/False)
End Function


' --- Backward Navigation Function (Version 6) ---
' Navigates back to the specified target screen (Master Index or App Menu)
' from the current screen (expected to be Interest Amendments or a failure screen).
' Returns True if successful, False otherwise. Handles errors internally.
Private Function NavigateBack_V6(ByVal targetScreenEnum As Long) As Boolean
    NavigateBack_V6 = False
    Dim backNavSuccess As Boolean: backNavSuccess = False
    Const MAX_F2_ATTEMPTS_TO_BO_SYSTEM As Integer = 15 ' Max F2 presses to get to BO System
    ' Removed specific F3 attempts constants, as we use explicit steps + verification

    If objScreen Is Nothing Then
        Debug.Print "NavigateBack_V6: objScreen is Nothing."
        Exit Function
    End If

    Debug.Print "NavigateBack_V6: Attempting to navigate back to target: " & IIf(targetScreenEnum = NAV_TARGET_APP_MENU, SCREEN_APP_MENU, SCREEN_MASTER_INDEX) & "."

    ' --- Step 1: Navigate back towards BACK OFFICE SYSTEM from current screen via F2 loop ---
    ' This handles navigating back from Interest Amendments, or potentially other screens if forward nav failed.
    ' We loop F2 until we reach BACK OFFICE SYSTEM, verifying before each key.
    Debug.Print "NavigateBack_V6: Starting back navigation via F2 loop towards " & SCREEN_BO_SYSTEM & "."
    backNavSuccess = LoopControlKeyUntilScreen_V6(ControlKeyCode_F2, SCREEN_BO_SYSTEM, SCREEN_BO_SYSTEM_ROW, SCREEN_BO_SYSTEM_COL, SCREEN_BO_SYSTEM_LENGTH, MAX_F2_ATTEMPTS_TO_BO_SYSTEM)

    If Not backNavSuccess Then
        Debug.Print "NavigateBack_V6: Failed to reach " & SCREEN_BO_SYSTEM & " via F2 loop."
        MsgBox "Failed to navigate back to " & SCREEN_BO_SYSTEM & " via F2 loop. Back navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function ' Critical failure
    End If
    Debug.Print "NavigateBack_V6: Confirmed on " & SCREEN_BO_SYSTEM & " after F2 loop."


    ' --- Step 2: Navigate from BACK OFFICE SYSTEM to target (Master Index or App Menu) via specific F3 steps/loop ---
    ' Verify prerequisite screen is BACK OFFICE SYSTEM before sending F3
    Debug.Print "NavigateBack_V6: Verifying " & SCREEN_BO_SYSTEM & " before starting F3 sequence to target."
     If Not VerifyScreen_V6(SCREEN_BO_SYSTEM, SCREEN_BO_SYSTEM_ROW, SCREEN_BO_SYSTEM_COL, SCREEN_BO_SYSTEM_LENGTH) Then
         Debug.Print "NavigateBack_V6: NOT on " & SCREEN_BO_SYSTEM & " when expected before sending F3 sequence. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
         MsgBox "Automation lost sync during back navigation. Expected '" & SCREEN_BO_SYSTEM & "'. Back navigation aborted.", vbCritical, SCRIPT_TITLE
         Exit Function
     End If

    ' Now, proceed with the F3 sequence based on the final target
    If targetScreenEnum = NAV_TARGET_MASTER_INDEX Then
        ' Target is Master Index
        Debug.Print "NavigateBack_V6: Target is " & SCREEN_MASTER_INDEX & ". Navigating from " & SCREEN_BO_SYSTEM & " via F3 loop."
        ' Loop F3 until we reach MASTER INDEX. LoopControlKeyUntilScreen_V6 stops when the target is verified.
        backNavSuccess = LoopControlKeyUntilScreen_V6(ControlKeyCode_F3, SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH, MAX_BACK_NAV_LOOPS)
        If backNavSuccess Then
            Debug.Print "NavigateBack_V6: Successfully reached " & SCREEN_MASTER_INDEX & "."
            NavigateBack_V6 = True ' Success!
        Else
            Debug.Print "NavigateBack_V6: Failed to reach " & SCREEN_MASTER_INDEX & " via F3 loop from " & SCREEN_BO_SYSTEM & "."
            MsgBox "Failed to navigate back to " & SCREEN_MASTER_INDEX & " via F3 loop. Back navigation aborted.", vbCritical, SCRIPT_TITLE
             ' NavigateBack_V6 is already False
        End If

    ElseIf targetScreenEnum = NAV_TARGET_APP_MENU Then
        ' Target is Application Selection Menu
        Debug.Print "NavigateBack_V6: Target is " & SCREEN_APP_MENU & ". Navigating from " & SCREEN_BO_SYSTEM & " via specific F3 steps."

        ' --- Step 2a: Send F3 from BACK OFFICE SYSTEM to OPTION HANDLER FUNCTION SCREEN ---
        Debug.Print "NavigateBack_V6: Sending F3 from " & SCREEN_BO_SYSTEM & " to reach " & SCREEN_OPT_HANDLER_MAIN & "."
        Call SendControlKey_V6(ControlKeyCode_F3)

        ' Step 2a Verification: Check if we reached OPTION HANDLER FUNCTION SCREEN
        Debug.Print "NavigateBack_V6: Verifying expected next screen: " & SCREEN_OPT_HANDLER_MAIN & " after first F3."
        If Not VerifyScreen_V6(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_ROW, SCREEN_OPT_HANDLER_COL, SCREEN_OPT_HANDLER_LENGTH) Then
             Debug.Print "NavigateBack_V6: Did not reach " & SCREEN_OPT_HANDLER_MAIN & " after first F3. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
             MsgBox "Failed to navigate back to " & SCREEN_OPT_HANDLER_MAIN & " after first F3. Back navigation aborted.", vbCritical, SCRIPT_TITLE
             Exit Function ' Critical failure
        End If
        Debug.Print "NavigateBack_V6: Confirmed on " & SCREEN_OPT_HANDLER_MAIN & " after first F3."


        ' --- Step 2b: Verify prerequisite screen is OPTION HANDLER FUNCTION SCREEN before sending second F3 ---
        Debug.Print "NavigateBack_V6: Verifying " & SCREEN_OPT_HANDLER_MAIN & " before sending second F3."
        If Not VerifyScreen_V6(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_ROW, SCREEN_OPT_HANDLER_COL, SCREEN_OPT_HANDLER_LENGTH) Then
             Debug.Print "NavigateBack_V6: NOT on " & SCREEN_OPT_HANDLER_MAIN & " when expected before sending second F3. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
             MsgBox "Automation lost sync during back navigation. Expected '" & SCREEN_OPT_HANDLER_MAIN & "' before sending second F3. Back navigation aborted.", vbCritical, SCRIPT_TITLE
             Exit Function
        End If

        ' Step 2b: Send F3 from OPTION HANDLER FUNCTION SCREEN to APPLICATION SELECTION MENU
        Debug.Print "NavigateBack_V6: Sending F3 from " & SCREEN_OPT_HANDLER_MAIN & " to reach " & SCREEN_APP_MENU & "."
        Call SendControlKey_V6(ControlKeyCode_F3)

        ' Step 2b Verification: Check if we reached APPLICATION SELECTION MENU (Final Target)
        Debug.Print "NavigateBack_V6: Verifying expected next screen: " & SCREEN_APP_MENU & " after second F3."
        If VerifyScreen_V6(SCREEN_APP_MENU, SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH) Then
            Debug.Print "NavigateBack_V6: Successfully reached " & SCREEN_APP_MENU & "."
            NavigateBack_V6 = True ' Success!
        Else
            Debug.Print "NavigateBack_V6: Did not reach " & SCREEN_APP_MENU & " after second F3. Actual R1C1L80: '" & Trim(objScreen.GetText(1,1,80)) & "'"
            MsgBox "Failed to navigate back to " & SCREEN_APP_MENU & " after second F3. Back navigation aborted.", vbCritical, SCRIPT_TITLE
             ' NavigateBack_V6 is already False
        End If

    Else
        Debug.Print "NavigateBack_V6: Invalid target screen enum: " & targetScreenEnum
         MsgBox "Internal Error: Invalid back navigation target specified.", vbCritical, SCRIPT_TITLE
         ' NavigateBack_V6 is already False
    End If

    ' Returns NavigateBack_V6 (True/False)
End Function

' Helper function to repeatedly send a control key until a specific screen is reached.
' Returns True if the screen is reached within max attempts, False otherwise.
' Verifies screen *before* each key press attempt inside the loop.
Private Function LoopControlKeyUntilScreen_V6(ByVal keyCode As Long, _
                                           ByVal targetScreenText As String, _
                                           ByVal targetRow As Long, ByVal targetCol As Long, ByVal targetLength As Long, _
                                           ByVal maxAttempts As Integer) As Boolean
    LoopControlKeyUntilScreen_V6 = False
    Dim attempts As Integer: attempts = 0

    Debug.Print "LoopControlKeyUntilScreen_V6: Looping with key " & keyCode & " until '" & targetScreenText & "' at R" & targetRow & "C" & targetCol & ". Max attempts: " & maxAttempts

    ' Loop up to max attempts. The target screen check happens at the START of the loop.
    Do While attempts < maxAttempts
        ' *** CRITICAL VERIFICATION: Check CURRENT screen at the start of the loop ***
        If VerifyScreen_V6(targetScreenText, targetRow, targetCol, targetLength) Then
            Debug.Print "LoopControlKeyUntilScreen_V6: Reached target screen '" & targetScreenText & "' on attempt " & attempts & "."
            LoopControlKeyUntilScreen_V6 = True
            Exit Function ' Success! Exit the loop and the function.
        End If

        ' If not on the target screen and we still have attempts left
        If attempts < maxAttempts - 1 Then
            Debug.Print "LoopControlKeyUntilScreen_V6: Not on target screen '" & targetScreenText & "'. Sending key code " & keyCode & ". Attempt " + CStr(attempts + 1) & "." ' Corrected concatenation
            ' Send the key. SendControlKey_V6 includes a WaitUntilReady_V6 call.
            Call SendControlKey_V6(keyCode)
            ' After sending the key and waiting, the loop will reiterate and VerifyScreen_V6 will check the *new* screen.
        ElseIf attempts = maxAttempts - 1 Then
            ' This is the last attempt. Send the key. The *final* verification
            ' will happen at the very top of the loop in the next (and last) iteration.
             Debug.Print "LoopControlKeyUntilScreen_V6: Last attempt (" & attempts + 1 & "). Sending key code " & keyCode & "."
             Call SendControlKey_V6(keyCode)
             ' The loop condition (attempts < maxAttempts) will be false after incrementing attempts.
             ' The loop will run one last time, the VerifyScreen_V6 at the top will check the final screen state.
        End If

        attempts = attempts + 1 ' Increment attempt counter

    Loop

    ' If the loop finishes, it means VerifyScreen_V6(targetScreenText, ...) was never True within max attempts.
    Debug.Print "LoopControlKeyUntilScreen_V6: Failed to reach '" & targetScreenText & "' after max attempts (" & maxAttempts & ")."
    ' LoopControlKeyUntilScreen_V6 is already False

End Function
