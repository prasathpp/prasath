' Attribute VB_Name = "mod_InterestAmendment_Navigation_V3"
Option Explicit

' --- Attachmate Reflection Object Declarations ---
Public objReflectionApp As Object
Public objFrame As Object
Public objView As Object
Public objTerminal As Object
Public objScreen As Object

' --- Constants for Screen Titles & Key Info ---
Private Const TARGET_SESSION_ID_PART As String = "NTS Back Office - Prod.rd3x"

' --- Screen Titles and their verified R,C coordinates for GetText verification ---
Private Const SCREEN_APP_SELECTION_MENU As String = "APPLICATION SELECTION MENU"     'R1,C28
Private Const SCREEN_OPT_HANDLER As String = "OPTION HANDLER FUNCTION SCREEN"         'R2,C28 (with SP2001 on R2,C1)
Private Const SCREEN_BO_SYSTEM As String = "BACK OFFICE SYSTEM"                     'R1,C7
Private Const SCREEN_MASTER_INDEX As String = "MASTER INDEX"                         'R1,C28
Private Const SCREEN_FILE_MAINT_IDX As String = "FILE MAINTENANCE INPUT INDEX"     'R1,C21
Private Const SCREEN_INTERNAL_TXNS As String = "INTERNAL TRANSACTIONS"             'R1,C19
Private Const SCREEN_INTEREST_AMENDMENTS As String = "INTEREST AMENDMENTS"         'R1,C30 (Estimate - VERIFY THIS ONE)

' --- Input Field Coordinates (Based on your provided values) ---
Private Const ROW_APP_SEL_CMD As Long = 21
Private Const COL_APP_SEL_CMD As Long = 13
Private Const ROW_OPT_HANDLER_INPUT As Long = 21
Private Const COL_OPT_HANDLER_INPUT As Long = 16
Private Const ROW_BO_SYS_INPUT As Long = 22
Private Const COL_BO_SYS_INPUT As Long = 16
Private Const ROW_MASTER_IDX_INDEX As Long = 22
Private Const COL_MASTER_IDX_INDEX As Long = 8
Private Const ROW_MASTER_IDX_BRANCH As Long = 22
Private Const COL_MASTER_IDX_BRANCH As Long = 74
Private Const ROW_FILEMAINT_IDX_INDEX As Long = 22
Private Const COL_FILEMAINT_IDX_INDEX As Long = 8
Private Const ROW_FILEMAINT_IDX_ACCOUNT As Long = 22
Private Const COL_FILEMAINT_IDX_ACCOUNT As Long = 21
Private Const ROW_INTERNALTXN_IDX_INDEX As Long = 22
Private Const COL_INTERNALTXN_IDX_INDEX As Long = 8

' --- Other Constants ---
Private Const SCRIPT_TITLE As String = "Interest Amendment Nav V3"
Private Const BRAND_CODE_EXAMPLE As String = "PRCIN#T#"

' --- Main Sub to Process Excel Rows ---
Sub ProcessInterestAmendments_V3()
    Dim ws As Worksheet
    Dim i As Long
    Dim lastRow As Long
    Dim sortCode As String
    Dim accountNumber As String
    Dim navigationSuccess As Boolean

    If Not ConnectToReflection() Then Exit Sub
    On Error Resume Next
    Set ws = ActiveSheet
    If ws Is Nothing Then MsgBox "Worksheet not set.", vbCritical, SCRIPT_TITLE: Exit Sub
    On Error GoTo 0

    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    If lastRow < 2 Then MsgBox "No data.", vbInformation, SCRIPT_TITLE: Exit Sub
    Debug.Print "Processing rows 2 to " & lastRow

    For i = 2 To lastRow
        sortCode = Trim(CStr(ws.Cells(i, "A").Value))
        accountNumber = Trim(CStr(ws.Cells(i, "B").Value))

        If sortCode = "" Or accountNumber = "" Then
            Debug.Print "Skipping row " & i & ": Missing S/C or A/N."
            ws.Cells(i, "G").Value = "Skipped - Missing S/C or A/N"
        Else
            Debug.Print "Processing Row " & i & ": S/C=" & sortCode & ", A/N=" & accountNumber
            navigationSuccess = NavigateToInterestAmendmentScreen_V3(sortCode, accountNumber)
            If navigationSuccess Then
                Debug.Print "Navigated for A/N: " & accountNumber
                ws.Cells(i, "G").Value = "Navigated - Pending Adjustment"
                MsgBox "Manually verify 'INTEREST AMENDMENTS' screen for S/C: " & sortCode & ", A/N: " & accountNumber & vbCrLf & _
                       "Then click OK to proceed.", vbInformation, SCRIPT_TITLE
                ' TODO: Add adjustment logic here
            Else
                Debug.Print "Navigation FAILED for A/N: " & accountNumber
                ws.Cells(i, "G").Value = "Navigation Failed"
            End If
        End If
    Next i
    MsgBox "Finished.", vbInformation, SCRIPT_TITLE
    ReleaseReflectionObjects
End Sub

Private Function ConnectToReflection() As Boolean
    On Error GoTo ConnectErrorHandler
    ConnectToReflection = False
    Debug.Print "ConnectToReflection: Attempting GetObject(""Reflection Workspace"")"
    On Error Resume Next
    Set objReflectionApp = GetObject("Reflection Workspace")
    If Err.Number <> 0 Or objReflectionApp Is Nothing Then
        Err.Clear: Debug.Print "ConnectToReflection: GetObject FAILED."
        MsgBox "Reflection Workspace not found.", vbCritical, SCRIPT_TITLE: Exit Function
    End If
    Debug.Print "ConnectToReflection: GetObject SUCCEEDED. Type: " & TypeName(objReflectionApp)
    On Error GoTo ConnectErrorHandler
    Set objFrame = objReflectionApp.GetObject("Frame")
    If objFrame Is Nothing Then Debug.Print "ConnectToReflection: Frame is Nothing.": Exit Function
    Debug.Print "ConnectToReflection: objFrame set. Type: " & TypeName(objFrame)
    If Not objFrame.Visible Then objFrame.Visible = True
    objFrame.Activate
    Debug.Print "ConnectToReflection: Frame Visible/Activated."
    Debug.Print "ConnectToReflection: Getting ViewByTitleText(""" & TARGET_SESSION_ID_PART & """)..."
    On Error Resume Next
    Set objView = objFrame.GetViewByTitleText(TARGET_SESSION_ID_PART)
    If Err.Number <> 0 Or objView Is Nothing Then
        Err.Clear: Debug.Print "ConnectToReflection: GetViewByTitleText FAILED for '" & TARGET_SESSION_ID_PART & "'. Error: " & Err.Description
        MsgBox "Session '" & TARGET_SESSION_ID_PART & "' not found.", vbCritical, SCRIPT_TITLE: Exit Function
    End If
    Debug.Print "ConnectToReflection: GetViewByTitleText SUCCEEDED. View: '" & objView.TitleText & "'. Type: " & TypeName(objView)
    On Error GoTo ConnectErrorHandler
    Set objTerminal = objView.Control
    If objTerminal Is Nothing Then Debug.Print "ConnectToReflection: objTerminal is Nothing.": Exit Function
    Debug.Print "ConnectToReflection: objTerminal set. Type: " & TypeName(objTerminal)
    Set objScreen = objTerminal.Screen
    If objScreen Is Nothing Then Debug.Print "ConnectToReflection: objScreen is Nothing.": Exit Function
    Debug.Print "ConnectToReflection: objScreen set. Type: " & TypeName(objScreen)
    objTerminal.DisableKeystrokeProductivity = True
    objTerminal.DisableScreenHistory = True
    ConnectToReflection = True
    Debug.Print "ConnectToReflection: Connected successfully."
    Exit Function
ConnectErrorHandler:
    Debug.Print "ConnectToReflection: Error - " & Err.Number & ": " & Err.Description
    MsgBox "Error connecting to Reflection: " & Err.Description, vbCritical, SCRIPT_TITLE
    ConnectToReflection = False
End Function

Private Sub ReleaseReflectionObjects()
    Set objScreen = Nothing: Set objTerminal = Nothing: Set objView = Nothing
    Set objFrame = Nothing: Set objReflectionApp = Nothing
    Debug.Print "Reflection objects released."
End Sub

' --- Helper Function: Navigates from App Selection Menu to Interest Amendment Screen (V3 - Updated Title Coords) ---
Private Function NavigateToInterestAmendmentScreen_V3(ByVal sortCode As String, ByVal accountNumber As String) As Boolean
    Dim currentScreenText As String
    Dim brandCode As String
    NavigateToInterestAmendmentScreen_V3 = False
    brandCode = BRAND_CODE_EXAMPLE
    If objScreen Is Nothing Then Debug.Print "NavigateToIAS_V3: objScreen is Nothing.": Exit Function

    ' --- Step 1: Ensure on APPLICATION SELECTION MENU ---
    Call WaitAndSettle_V3(1000)
    ' SCREEN_APP_SELECTION_MENU at R1,C28
    If Not WaitAndVerifyScreen_V3(SCREEN_APP_SELECTION_MENU, 1, 28, Len(SCREEN_APP_SELECTION_MENU), 3000) Then
        Debug.Print "NavigateToIAS_V3: Not starting on " & SCREEN_APP_SELECTION_MENU
        MsgBox "Macro must start on '" & SCREEN_APP_SELECTION_MENU & "'. Please navigate manually and restart.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "NavigateToIAS_V3: Confirmed on " & SCREEN_APP_SELECTION_MENU

    ' --- Step 2: TERM ALL ---
    objScreen.PutText2 "TERM ALL", ROW_APP_SEL_CMD, COL_APP_SEL_CMD
    objScreen.SendControlKey ControlKeyCode_Transmit
    Debug.Print "NavigateToIAS_V3: Sent TERM ALL"
    Call WaitAndSettle_V3(3000)

    ' --- Step 3: Brand Code ---
    objScreen.PutText2 brandCode, ROW_APP_SEL_CMD, COL_APP_SEL_CMD
    objScreen.SendControlKey ControlKeyCode_Transmit
    Debug.Print "NavigateToIAS_V3: Sent Brand Code: " & brandCode
    ' SCREEN_OPT_HANDLER ("OPTION HANDLER FUNCTION SCREEN") at R2,C28 with "SP2001" at R2,C1
    If Not WaitAndVerifyScreen_V3(SCREEN_OPT_HANDLER, 2, 28, Len(SCREEN_OPT_HANDLER), 5000, "SP2001") Then Exit Function
    Debug.Print "NavigateToIAS_V3: On " & SCREEN_OPT_HANDLER

    ' --- Step 4: Option 19 ---
    objScreen.PutText2 "19", ROW_OPT_HANDLER_INPUT, COL_OPT_HANDLER_INPUT
    objScreen.SendControlKey ControlKeyCode_Transmit
    Debug.Print "NavigateToIAS_V3: Sent Option 19"
    ' SCREEN_BO_SYSTEM ("BACK OFFICE SYSTEM") at R1,C7
    If Not WaitAndVerifyScreen_V3(SCREEN_BO_SYSTEM, 1, 7, Len(SCREEN_BO_SYSTEM), 5000) Then Exit Function
    Debug.Print "NavigateToIAS_V3: On " & SCREEN_BO_SYSTEM
    
    ' --- Step 5: Option 1 ---
    objScreen.PutText2 "1", ROW_BO_SYS_INPUT, COL_BO_SYS_INPUT
    objScreen.SendControlKey ControlKeyCode_Transmit
    Debug.Print "NavigateToIAS_V3: Sent Option 1"
    ' SCREEN_MASTER_INDEX ("MASTER INDEX") at R1,C28
    If Not WaitAndVerifyScreen_V3(SCREEN_MASTER_INDEX, 1, 28, Len(SCREEN_MASTER_INDEX), 5000) Then Exit Function
    Debug.Print "NavigateToIAS_V3: On " & SCREEN_MASTER_INDEX
    
    ' --- Step 6: Master Index - Input 20 and Sort Code ---
    objScreen.PutText2 "20", ROW_MASTER_IDX_INDEX, COL_MASTER_IDX_INDEX
    objScreen.PutText2 sortCode, ROW_MASTER_IDX_BRANCH, COL_MASTER_IDX_BRANCH
    objScreen.SendControlKey ControlKeyCode_Transmit
    Debug.Print "NavigateToIAS_V3: Sent Index 20, S/C " & sortCode
    ' SCREEN_FILE_MAINT_IDX ("FILE MAINTENANCE INPUT INDEX") at R1,C21
    If Not WaitAndVerifyScreen_V3(SCREEN_FILE_MAINT_IDX, 1, 21, Len(SCREEN_FILE_MAINT_IDX), 5000) Then Exit Function
    Debug.Print "NavigateToIAS_V3: On " & SCREEN_FILE_MAINT_IDX

    ' --- Step 7: File Maintenance Input Index - Input 20 and Account Number ---
    objScreen.PutText2 "20", ROW_FILEMAINT_IDX_INDEX, COL_FILEMAINT_IDX_INDEX
    objScreen.PutText2 accountNumber, ROW_FILEMAINT_IDX_ACCOUNT, COL_FILEMAINT_IDX_ACCOUNT
    objScreen.SendControlKey ControlKeyCode_Transmit
    Debug.Print "NavigateToIAS_V3: Sent Index 20, A/N " & accountNumber
    ' SCREEN_INTERNAL_TXNS ("INTERNAL TRANSACTIONS") at R1,C19
    If Not WaitAndVerifyScreen_V3(SCREEN_INTERNAL_TXNS, 1, 19, Len(SCREEN_INTERNAL_TXNS), 5000) Then Exit Function
    Debug.Print "NavigateToIAS_V3: On " & SCREEN_INTERNAL_TXNS

    ' --- Step 8: Internal Transactions - Input 4 (or 04) ---
    objScreen.PutText2 "4", ROW_INTERNALTXN_IDX_INDEX, COL_INTERNALTXN_IDX_INDEX
    objScreen.SendControlKey ControlKeyCode_Transmit
    Debug.Print "NavigateToIAS_V3: Sent Index 4"
    ' SCREEN_INTEREST_AMENDMENTS ("INTEREST AMENDMENTS") at R1,C30 (This is an ESTIMATE - VERIFY and UPDATE if needed)
    If Not WaitAndVerifyScreen_V3(SCREEN_INTEREST_AMENDMENTS, 1, 30, Len(SCREEN_INTEREST_AMENDMENTS), 5000) Then Exit Function
    Debug.Print "NavigateToIAS_V3: On " & SCREEN_INTEREST_AMENDMENTS

    NavigateToInterestAmendmentScreen_V3 = True
End Function

Private Sub WaitAndSettle_V3(Optional ByVal settleTimeoutMilliseconds As Long = 3000)
    If objScreen Is Nothing Then Exit Sub: Dim startTime As Date: startTime = Now
    Do While objScreen.OIA.XStatus <> 0
        If DateDiff("s", startTime, Now) * 1000 > settleTimeoutMilliseconds Then Debug.Print "WaitAndSettle_V3: Timeout XStatus.": Exit Do
        objScreen.WaitForHostSettle 100, 50: DoEvents
    Loop
    objScreen.WaitForHostSettle 500, 200
End Sub

Private Function WaitAndVerifyScreen_V3(ByVal expectedText As String, ByVal rowNum As Long, ByVal colNum As Long, ByVal textLen As Long, ByVal timeoutMs As Long, Optional ByVal partialTitleCheck As String = "") As Boolean
    Call WaitAndSettle_V3(timeoutMs)
    Dim actualText As String, fullLineText As String
    actualText = Trim(objScreen.GetText(rowNum, colNum, textLen))
    fullLineText = UCase(Trim(objScreen.GetText(rowNum, 1, 80)))

    If UCase(actualText) = UCase(expectedText) Then
        WaitAndVerifyScreen_V3 = True
    ElseIf partialTitleCheck <> "" And InStr(1, fullLineText, UCase(partialTitleCheck), vbTextCompare) > 0 And InStr(1, fullLineText, UCase(expectedText), vbTextCompare) > 0 Then
        WaitAndVerifyScreen_V3 = True
    Else
        Debug.Print "WaitAndVerifyScreen_V3: FAILED. Expected '" & expectedText & "' at R" & rowNum & "C" & colNum & "L" & textLen & ". Found '" & actualText & "' on full line: '" & Trim(objScreen.GetText(rowNum, 1, 80)) & "'"
        WaitAndVerifyScreen_V3 = False
    End If
End Function
