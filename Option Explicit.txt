Option Explicit

' --- Global/Module-Level Reflection Object Variables ---
Public app As Object
Public ThisFrame As Object
Public osView As Object
Public ibmTerminal As Object
Public obScreen As Object

' --- Other Global/Module-Level Variables ---
Public sessionName As String
Public strBoPath As String
Public stEDPFile As String

'Global Project Name Constant
Public Const SCRIPT_TITLE As String = "Interest Adjustment Automation"
Public Const sPrj_Name As String = SCRIPT_TITLE

' --- Key Screen Title Constants ---
Private Const SCREEN_APP_MENU As String = "APPLICATION SELECTION MENU"
Private Const SCREEN_OPT_HANDLER As String = "OPTION HANDLER FUNCTION SCREEN"
Private Const SCREEN_BO_SYSTEM As String = "BACK OFFICE SYSTEM"
Private Const SCREEN_MASTER_INDEX As String = "MASTER INDEX"
Private Const SCREEN_FILE_MAINT_IDX As String = "FILE MAINTENANCE INPUT INDEX"
Private Const SCREEN_INTERNAL_TXNS As String = "INTERNAL TRANSACTIONS"
Private Const SCREEN_INTEREST_AMENDMENTS As String = "INTEREST AMENDMENTS"

' --- Reflection Key Codes (ensure your library reference provides these) ---
' If ControlKeyCode_Transmit, _Delete, _PageDown cause "Variable not defined",
' ensure 'Attachmate_Reflection_Objects_Emulation_IbmHosts' (or Micro Focus equivalent) is referenced.
' As a last resort, you can define them as Public Const with their numeric values if known.
' Example: Public Const ControlKeyCode_Transmit As Long = 14 (Common for Enter)
'          Public Const ControlKeyCode_Delete As Long = 83 (Common for Delete Char)
'          Public Const ControlKeyCode_PageDown As Long = 52 (Common for Page Down/Roll Up)


'===============================================================================
' MAIN PROCESSING SUB
'===============================================================================
Sub ProcessInterestAdjustments_Main()
    Dim Ws_Data As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim processingStatus As String

    Const START_ROW As Long = 2
    Const DATA_SHEET_NAME As String = "Sheet1" ' !!! UPDATE THIS !!!

    On Error GoTo MainErrorHandler

    Debug.Print "ProcessInterestAdjustments_Main: Sub Started at " & Now
    processingStatus = "Processing started..."

    Set Ws_Data = ThisWorkbook.Worksheets(DATA_SHEET_NAME)
    lastRow = Ws_Data.Cells(Rows.Count, "A").End(xlUp).Row
    Debug.Print "ProcessInterestAdjustments_Main: Last row in sheet '" & DATA_SHEET_NAME & "' is " & lastRow

    If lastRow < START_ROW Then
        processingStatus = "No data found in sheet '" & DATA_SHEET_NAME & "'."
        MsgBox processingStatus, vbInformation, SCRIPT_TITLE
        Exit Sub
    End If

    Debug.Print "ProcessInterestAdjustments_Main: Calling ConnectExtra..."
    Call ConnectExtra
    
    If obScreen Is Nothing Then
        processingStatus = "Failed to connect to Reflection. Automation cannot continue."
        MsgBox processingStatus, vbCritical, SCRIPT_TITLE
        Exit Sub
    End If
    Debug.Print "ProcessInterestAdjustments_Main: ConnectExtra successful. obScreen is set."

    Debug.Print "ProcessInterestAdjustments_Main: Starting loop from row " & START_ROW & " to " & lastRow
    For i = START_ROW To lastRow
        Debug.Print "-----------------------------------------------------"
        Debug.Print "ProcessInterestAdjustments_Main: Processing row " & i
        
        Ws_Data.Range("H" & i & ":J" & i).ClearContents
        
        If obScreen Is Nothing Then
            Ws_Data.Range("H" & i).Value = "Critical Error - Session Lost Before Processing Row"
            processingStatus = "Reflection session was lost before processing row " & i & ". Aborting."
            MsgBox processingStatus, vbCritical, SCRIPT_TITLE
            Exit For
        End If
        
        Call ProcessSingleAdjustment(i, Ws_Data)
        
        If obScreen Is Nothing Then
             Ws_Data.Range("H" & i).Value = "Critical Error - Session Lost During Processing Row"
             processingStatus = "Reflection session was lost during processing row " & i & ". Aborting."
             MsgBox processingStatus, vbCritical, SCRIPT_TITLE
             Exit For
        End If
        Debug.Print "ProcessInterestAdjustments_Main: Finished row " & i & ". Status: " & Ws_Data.Range("H" & i).Value
    Next i

    If i > lastRow Then processingStatus = "All rows processed (" & START_ROW & " to " & lastRow & ")."
    Else processingStatus = "Processing stopped at row " & i & "."
    End If
    
    MsgBox "Processing complete. " & processingStatus, vbInformation, SCRIPT_TITLE
    Call CleanUpReflectionObjects
    Debug.Print "ProcessInterestAdjustments_Main: Sub Ended Successfully at " & Now
    Exit Sub

MainErrorHandler:
    processingStatus = "VBA Error in Main: " & Err.Description & " (ErrNo " & Err.Number & ")"
    MsgBox processingStatus, vbCritical, SCRIPT_TITLE
    If i >= START_ROW And i <= lastRow And Not Ws_Data Is Nothing Then
        On Error Resume Next
        Ws_Data.Range("H" & i).Value = "Main Sub Error: " & Err.Description
        On Error GoTo 0
    End If
    Call CleanUpReflectionObjects
    Debug.Print "ProcessInterestAdjustments_Main: Sub Ended with Error at " & Now
End Sub

'===============================================================================
' PROCESS SINGLE ADJUSTMENT - Incorporating Rules 1, 2, 3, 4
'===============================================================================
Function ProcessSingleAdjustment(iRow As Long, Ws_Data As Worksheet) As Boolean
    On Error GoTo ErrorHandler_Adjustment

    Dim sortCode As String, accountNo As String, iBrand As String, confirmCode As String
    Dim excel_D_Accrued As Double, excel_E_Cutoff As Double
    Dim excel_F_Applied_Debit As Double, excel_G_Applied_Credit As Double
    Dim Carry_Over_Cutoff_To_Applied_Amount As Double, Total_Applied_Debtor_Amount As Double
    Dim screenType As String, tempStr As String, loopCounter As Long
    Dim k As Integer, delCount As Integer ' Loop counters
    Dim hostStatusMessage As String ' For messages from host

    ProcessSingleAdjustment = False
    Carry_Over_Cutoff_To_Applied_Amount = 0
    
    sortCode = Format(Ws_Data.Range("A" & iRow).Value, "000000")
    accountNo = Format(Ws_Data.Range("B" & iRow).Value, "00000000")
    iBrand = UCase(Trim(CStr(Ws_Data.Range("C" & iRow).Value)))
    excel_D_Accrued = Val(CStr(Ws_Data.Range("D" & iRow).Value))
    excel_E_Cutoff = Val(CStr(Ws_Data.Range("E" & iRow).Value))
    excel_F_Applied_Debit = Val(CStr(Ws_Data.Range("F" & iRow).Value))
    excel_G_Applied_Credit = Val(CStr(Ws_Data.Range("G" & iRow).Value))

    If sortCode = "000000" Or accountNo = "00000000" Or iBrand = "" Then
        Ws_Data.Range("H" & iRow).Value = "Missing Input Data": GoTo NextCase_Adjustment
    End If
    
    Select Case iBrand
        Case "RBS", "RBG", "RBI", "VIR": confirmCode = "PRCIR#T#"
        Case "NWB", "CTS", "NWO", "IOM": confirmCode = "PRCIN#T#"
        Case "UBN": confirmCode = "PRCIJ#T#"
        Case "UBR": confirmCode = "PRCIK#T#"
        Case Else Ws_Data.Range("H" & iRow).Value = "Unknown Brand: " & iBrand: GoTo NextCase_Adjustment
    End Select
    Debug.Print "ProcessSingle: Row " & iRow & ", S/C: " & sortCode & ", Confirm: " & confirmCode

    ' --- Navigation Logic (condensed for brevity, assumed working) ---
    Call WaitReady(200, 5000)
    If Not VerifyScreen(SCREEN_APP_MENU, 1, 28) Then Ws_Data.Range("H" & iRow).Value = "Not on App Menu": GoTo NextCase_Adjustment
    Call SendData("TERM ALL", 21, 13, True, 1000): obScreen.WaitForHostSettle 500, 2000
    Call SendData(confirmCode, 21, 13, True, 1000): obScreen.WaitForHostSettle 500, 2000
    If VerifyScreen("Command not recognized", 20, 36, 22) Then Ws_Data.Range("H" & iRow).Value = "Brand cmd NR": GoTo NextCase_Adjustment
    If VerifyScreen("ROYAL BANK OF SCOTLAND", 1, 1, 24) Then
        Call SendKey(ControlKeyCode_Transmit, 1000): obScreen.WaitForHostSettle 500, 2000
        If VerifyScreen("", 1, 1, 80) Then
            loopCounter = 1
            Do
                If VerifyScreen("", 1, 1, 80) Then Call SendData("STAR", 1, 1, True, 1000)
                ElseIf VerifyScreen("ROYAL BANK OF SCOTLAND", 1, 1, 24) Then Call SendKey(ControlKeyCode_Transmit, 1000)
                End If
                obScreen.WaitForHostSettle 300, 1000: loopCounter = loopCounter + 1
            Loop While Not VerifyScreen(SCREEN_OPT_HANDLER, 1, 26) And loopCounter <= 10
            If Not VerifyScreen(SCREEN_OPT_HANDLER, 1, 26) Then Ws_Data.Range("H" & iRow).Value = "Fail past STAR": GoTo NextCase_Adjustment
        End If
    End If
    obScreen.WaitForHostSettle 300, 1000
    If Not VerifyScreen(SCREEN_OPT_HANDLER, 1, 26) Then Ws_Data.Range("H" & iRow).Value = "Not on OptH": GoTo NextCase_Adjustment
    Call SendData("19", 21, 16, True, 1000): obScreen.WaitForHostSettle 500, 2000
    If Not VerifyScreen(SCREEN_BO_SYSTEM, 1, 7) Then Ws_Data.Range("H" & iRow).Value = "Not on BOSys": GoTo NextCase_Adjustment
    Call SendData("01", 22, 16, True, 1000): obScreen.WaitForHostSettle 500, 2000
    If Not VerifyScreen(SCREEN_MASTER_INDEX, 1, 28) Then Ws_Data.Range("H" & iRow).Value = "Not on MI": GoTo NextCase_Adjustment
    Call WaitReady(100): obScreen.PutText2 "20", 22, 8: obScreen.PutText2 Format(sortCode, "000000"), 22, 74: Call SendKey(ControlKeyCode_Transmit, 1000): obScreen.WaitForHostSettle 500, 2000
    If Not VerifyScreen(SCREEN_FILE_MAINT_IDX, 1, 21) Then Ws_Data.Range("H" & iRow).Value = "Not on FMI": GoTo NextCase_Adjustment
    Call WaitReady(100): obScreen.PutText2 "20", 22, 8: obScreen.PutText2 Format(accountNo, "00000000"), 22, 21: Call SendKey(ControlKeyCode_Transmit, 1000): obScreen.WaitForHostSettle 500, 2000
    If Not VerifyScreen(SCREEN_INTERNAL_TXNS, 1, 19) Then Ws_Data.Range("H" & iRow).Value = "Not on IT": GoTo NextCase_Adjustment
    Call SendData("04", 22, 8, True, 1000): obScreen.WaitForHostSettle 500, 2000
    If Not VerifyScreen(SCREEN_INTEREST_AMENDMENTS, 1, 27) Then
        If Not VerifyScreen("INTEREST DETAILS", 2, 27) Then Ws_Data.Range("H" & iRow).Value = "Not on IA scrn": GoTo NextCase_Adjustment
    End If
    Debug.Print "ProcessSingle: Reached " & SCREEN_INTEREST_AMENDMENTS

    ' --- Rule 3: Initial Check on Entering INTEREST AMENDMENTS Screen ---
    Call WaitReady(200) ' Settle before check
    If Trim(obScreen.GetText(20, 2, 20)) = "ACCEPTED BY OPERATOR" Then
        Debug.Print "ProcessSingle: Screen already shows 'ACCEPTED BY OPERATOR' on entry. Skipping row."
        Ws_Data.Range("H" & iRow).Value = "Exception - Screen already accepted"
        GoTo PageDownAndExit_Adjustment ' Use new exit path
    End If

    Debug.Print "ProcessSingle: --- CHECKPOINT BEFORE DATA ENTRY ---"
    If obScreen Is Nothing Then Ws_Data.Range("H" & iRow).Value = "Error: obScreen lost": GoTo NextCase_Adjustment
    Debug.Print "ProcessSingle: obScreen is VALID. Row " & iRow & ". excel_D_Accrued: " & excel_D_Accrued
    
    screenType = "Normal" 
    tempStr = Trim(obScreen.GetText(3, 42, 16))
    If tempStr = "BUSINESS CURRENT" Then screenType = "BC"
    Debug.Print "ProcessSingle: Screen Type: " & screenType

    ' --- Data Entry Logic with Field Clearing (Rule 4) and Reason Codes ---
    Dim current_screen_arr_val As Double, current_screen_unar_val As Double, val_to_input_in_arr As Double, val_to_input_in_unar As Double, remaining_excel_val_for_unar_accr As Double
    Dim reasonCodeEntered_AccruedUnar As Boolean: reasonCodeEntered_AccruedUnar = False
    Dim reasonCodeEntered_CutoffUnar As Boolean: reasonCodeEntered_CutoffUnar = False

    ' ACCRUED INTEREST
    If excel_D_Accrued > 0 Then
        Debug.Print "Processing Accrued: " & excel_D_Accrued
        If screenType = "BC" Then
            Call ClearField(8, 35, 15): obScreen.PutText2 "dec", 8, 31: obScreen.PutText2 CStr(excel_D_Accrued), 8, 35
            Call ClearField(8, 47, 5): obScreen.PutText2 "01", 8, 47
        ElseIf screenType = "Normal" Then
            current_screen_arr_val = Val(Trim(obScreen.GetText(8, 21, 6))): current_screen_unar_val = Val(Trim(obScreen.GetText(9, 21, 6)))
            val_to_input_in_arr = 0: val_to_input_in_unar = 0
            If current_screen_arr_val > 0 Then val_to_input_in_arr = Application.WorksheetFunction.Min(excel_D_Accrued, current_screen_arr_val)
            remaining_excel_val_for_unar_accr = excel_D_Accrued - val_to_input_in_arr
            If remaining_excel_val_for_unar_accr > 0 And current_screen_unar_val > 0 Then val_to_input_in_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_unar_accr, current_screen_unar_val)
            If val_to_input_in_arr > 0 Then Call ClearField(8, 35, 15): obScreen.PutText2 "dec", 8, 31: obScreen.PutText2 CStr(val_to_input_in_arr), 8, 35: Call ClearField(9, 47, 5): obScreen.PutText2 "01", 9, 47: reasonCodeEntered_AccruedUnar = True
            If val_to_input_in_unar > 0 Then Call ClearField(9, 35, 15): obScreen.PutText2 "dec", 9, 31: obScreen.PutText2 CStr(val_to_input_in_unar), 9, 35: If Not reasonCodeEntered_AccruedUnar Then Call ClearField(9, 47, 5): obScreen.PutText2 "01", 9, 47
        End If
    End If

    ' CUTOFF INTEREST
    Dim current_screen_cutoff_arr_val As Double, current_screen_cutoff_unar_val As Double, val_to_input_in_cutoff_arr As Double, val_to_input_in_cutoff_unar As Double, remaining_excel_val_for_cutoff_unar As Double, cutoff_deferred As Boolean
    cutoff_deferred = False
    If excel_E_Cutoff > 0 Then
        Debug.Print "Processing Cutoff: " & excel_E_Cutoff
        If screenType = "BC" Then Call ClearField(12, 35, 15): obScreen.PutText2 "dec", 12, 31: obScreen.PutText2 CStr(excel_E_Cutoff), 12, 35: Call ClearField(12, 47, 5): obScreen.PutText2 "01", 12, 47
        ElseIf screenType = "Normal" Then
            current_screen_cutoff_arr_val = Val(Trim(obScreen.GetText(12, 21, 6))): current_screen_cutoff_unar_val = Val(Trim(obScreen.GetText(13, 21, 6)))
            If current_screen_cutoff_arr_val <= 0 And current_screen_cutoff_unar_val <= 0 Then Carry_Over_Cutoff_To_Applied_Amount = excel_E_Cutoff: cutoff_deferred = True: Debug.Print "Cutoff deferred: " & Carry_Over_Cutoff_To_Applied_Amount
            Else
                val_to_input_in_cutoff_arr = 0: val_to_input_in_cutoff_unar = 0
                If current_screen_cutoff_arr_val > 0 Then val_to_input_in_cutoff_arr = Application.WorksheetFunction.Min(excel_E_Cutoff, current_screen_cutoff_arr_val)
                remaining_excel_val_for_cutoff_unar = excel_E_Cutoff - val_to_input_in_cutoff_arr
                If remaining_excel_val_for_cutoff_unar > 0 And current_screen_cutoff_unar_val > 0 Then val_to_input_in_cutoff_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_cutoff_unar, current_screen_cutoff_unar_val)
                If val_to_input_in_cutoff_arr > 0 Then Call ClearField(12, 35, 15): obScreen.PutText2 "dec", 12, 31: obScreen.PutText2 CStr(val_to_input_in_cutoff_arr), 12, 35: Call ClearField(13, 47, 5): obScreen.PutText2 "01", 13, 47: reasonCodeEntered_CutoffUnar = True
                If val_to_input_in_cutoff_unar > 0 Then Call ClearField(13, 35, 15): obScreen.PutText2 "dec", 13, 31: obScreen.PutText2 CStr(val_to_input_in_cutoff_unar), 13, 35: If Not reasonCodeEntered_CutoffUnar Then Call ClearField(13, 47, 5): obScreen.PutText2 "01", 13, 47
            End If
        End If
    End If

    ' APPLIED INTEREST
    Total_Applied_Debtor_Amount = excel_F_Applied_Debit + Carry_Over_Cutoff_To_Applied_Amount
    Debug.Print "Applied Debtor: " & Total_Applied_Debtor_Amount & "(F:" & excel_F_Applied_Debit & ",CO:" & Carry_Over_Cutoff_To_Applied_Amount & "). Applied Credit(G):" & excel_G_Applied_Credit
    If screenType = "BC" Then
        If excel_G_Applied_Credit > 0 Then Call ClearField(14, 35, 15): Debug.Print "Applying Cr(BC):" & excel_G_Applied_Credit: obScreen.PutText2 "inc", 14, 31: obScreen.PutText2 CStr(excel_G_Applied_Credit), 14, 35: Call ClearField(14, 47, 5): obScreen.PutText2 "01", 14, 47
        If Total_Applied_Debtor_Amount > 0 Then Call ClearField(15, 35, 15): Debug.Print "Applying Dr(BC):" & Total_Applied_Debtor_Amount: obScreen.PutText2 "dec", 15, 31: obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 15, 35: Call ClearField(15, 47, 5): obScreen.PutText2 "01", 15, 47
    ElseIf screenType = "Normal" Then
        If excel_G_Applied_Credit > 0 Then Call ClearField(15, 35, 15): Debug.Print "Applying Cr(Norm):" & excel_G_Applied_Credit: obScreen.PutText2 "inc", 15, 31: obScreen.PutText2 CStr(excel_G_Applied_Credit), 15, 35: Call ClearField(15, 47, 5): obScreen.PutText2 "01", 15, 47
        If Total_Applied_Debtor_Amount > 0 Then Call ClearField(16, 35, 15): Debug.Print "Applying Dr(Norm):" & Total_Applied_Debtor_Amount: obScreen.PutText2 "dec", 16, 31: obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 16, 35: Call ClearField(16, 47, 5): obScreen.PutText2 "01", 16, 47
    End If
    Debug.Print "Data entry potentially complete"

    Call WaitReady(100): obScreen.PutText2 "CHARGEBACK", 18, 2
    Debug.Print "Input 'CHARGEBACK' at R18,C2"
    
    For k = 1 To 3
        Call SendKey(ControlKeyCode_Transmit, 750)
    Next k
    Debug.Print "ProcessSingle: Sent Enter x3"

    ' --- Rule 2: Confirmation of Successful Amendment ---
    Call WaitReady(500) ' Settle before checking for acceptance
    hostStatusMessage = Trim(obScreen.GetText(20, 2, 20)) ' Read where "ACCEPTED BY OPERATOR" should be
    If hostStatusMessage = "ACCEPTED BY OPERATOR" Then
        Debug.Print "ProcessSingle: Amendment ACCEPTED BY OPERATOR for row " & iRow
        Ws_Data.Range("H" & iRow).Value = "Completed"
        ProcessSingleAdjustment = True
    Else
        hostStatusMessage = Trim(obScreen.GetText(23, 3, 78)) ' Check typical error line
        Debug.Print "ProcessSingle: Amendment FAILED. Status at (20,2):'" & Trim(obScreen.GetText(20,2,20)) & "'. Error line (23,3):'" & hostStatusMessage & "'"
        Ws_Data.Range("H" & iRow).Value = "Exception - Not Accepted. HostMsg: " & Left(hostStatusMessage, 50)
        ' Still proceed to PageDown as per clarification
    End If
    
PageDownAndExit_Adjustment: ' New label for common exit path
    Call SendKey(ControlKeyCode_PageDown, 1500) ' Rule 1: Use PageDown, increased wait
    Debug.Print "ProcessSingle: Sent PageDown"
    
    ' Verify return to App Menu (optional, as error/success is already logged for amendment)
    If Not VerifyScreen(SCREEN_APP_MENU, 1, 28) Then
        Debug.Print "ProcessSingle: Did not return to App Menu after PageDown. Current screen: " & Left(Trim(obScreen.GetText(1,1,80)),50)
        If Ws_Data.Range("H" & iRow).Value Like "*Completed*" Or Ws_Data.Range("H" & iRow).Value Like "*Accepted*" Then
            ' If amendment was okay but navigation back failed, append to status
            Ws_Data.Range("H" & iRow).Value = Ws_Data.Range("H" & iRow).Value & " (NavBackFail)"
        End If
        ' If it was an exception already, the primary error is more important.
    End If
    GoTo NextCase_Adjustment ' Common exit point for logging user/timestamp

NextCase_Adjustment:
    If ProcessSingleAdjustment = False And Ws_Data.Range("H" & iRow).Value = "" Then Ws_Data.Range("H" & iRow).Value = "Error or Incomplete"
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username")): Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    Exit Function
ErrorHandler_Adjustment:
    Ws_Data.Range("H" & iRow).Value = "VBA Error: " & Err.Description & " (L: " & Erl & ")"
    Debug.Print "---!!! VBA Error in PSA for row " & iRow & ": " & Err.Description & " (L: " & Erl & ") !!!---"
    On Error Resume Next: Ws_Data.Range("I" & iRow).Value = UCase(Environ("username")): Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS"): On Error GoTo 0
    ProcessSingleAdjustment = False
End Function

'===============================================================================
' CONNECTION SUB (Should be stable now)
'===============================================================================
Sub ConnectExtra()
    Dim edpPathFromSheet As String, ws As Worksheet, currentAction As String
    Dim targetSessionViewTitle As String, OleObj As Object, tempView As Object
    Dim sessionIsOpen As Boolean

    On Error GoTo ConnectExtra_ErrorHandler
    currentAction = "Initializing ConnectExtra"
    Debug.Print currentAction

    edpPathFromSheet = "" ' Initialize
    On Error Resume Next
    Set ws = Sheet4
    If Err.Number = 0 Then
        Set OleObj = ws.OLEObjects("txtEDPPath")
        If Err.Number = 0 Then
            If TypeOf OleObj.Object Is MSForms.TextBox Then edpPathFromSheet = OleObj.Object.Text
            Else Debug.Print "ConnectExtra: txtEDPPath not TextBox. Type: " & TypeName(OleObj.Object)
            End If
        Else Debug.Print "ConnectExtra: OLEObject 'txtEDPPath' not found. Err: " & Err.Description
        End If
    Else Debug.Print "ConnectExtra: Sheet4 CodeName not found. Err: " & Err.Description
    End If
    Err.Clear: On Error GoTo ConnectExtra_ErrorHandler

    If edpPathFromSheet <> "" Then stEDPFile = edpPathFromSheet
    Else Debug.Print "ConnectExtra: Path from Sheet4 empty. Prompting."; stEDPFile = Application.GetOpenFilename(title:="Choose Reflection Session", fileFilter:="Reflection Files *.rd3x (*.rd3x),")
    End If

    If stEDPFile = "False" Or stEDPFile = "" Then MsgBox "No session file. Exiting.", vbCritical, SCRIPT_TITLE: Set obScreen = Nothing: Exit Sub
    
    strBoPath = stEDPFile
    sessionName = Mid(strBoPath, InStrRev(strBoPath, "\") + 1)
    targetSessionViewTitle = sessionName

    currentAction = "GetObject(, ""Reflection Workspace"")"
    Debug.Print currentAction
    On Error Resume Next
    Set app = GetObject(, "Reflection Workspace")
    If Err.Number <> 0 Or app Is Nothing Then
        Err.Clear: Debug.Print "GetObject FAILED. Attempting CreateObject..."
        currentAction = "CreateObject(""Reflection Workspace"")"
        Set app = CreateObject("Reflection Workspace")
        If Err.Number <> 0 Or app Is Nothing Then Err.Clear: Debug.Print "CreateObject FAILED.": GoTo ConnectExtra_ErrorHandler_FinalMsg
    End If
    Debug.Print "App Object obtained. TypeName: " & TypeName(app)
    On Error GoTo ConnectExtra_ErrorHandler

    currentAction = "app.GetObject(""Frame"")"
    Debug.Print currentAction
    Set ThisFrame = app.GetObject("Frame")
    If ThisFrame Is Nothing Then Debug.Print "Frame obj is Nothing.": GoTo ConnectExtra_ErrorHandler_FinalMsg
    Debug.Print "Frame Object obtained. TypeName: " & TypeName(ThisFrame)

    If Not ThisFrame.Visible Then ThisFrame.Visible = True
    ThisFrame.Activate: Debug.Print "Frame Visible/Activated."

    currentAction = "ThisFrame.GetViewByTitleText(""" & targetSessionViewTitle & """)"
    Debug.Print currentAction
    On Error Resume Next
    Set osView = ThisFrame.GetViewByTitleText(targetSessionViewTitle)
    If Err.Number <> 0 Or osView Is Nothing Then
        Err.Clear: Debug.Print "GetViewByTitleText FAILED for '" & targetSessionViewTitle & "'. Err: " & Err.Description
        Debug.Print "Iterating views for: " & sessionName
        sessionIsOpen = False
        Dim viewsCollection As Object
        Set viewsCollection = Nothing
        currentAction = "Accessing ThisFrame.Views for iteration"
        On Error Resume Next
        Set viewsCollection = ThisFrame.Views
        If Err.Number = 0 And Not viewsCollection Is Nothing Then
            If viewsCollection.Count > 0 Then
                 For Each tempView In viewsCollection
                    If InStr(1, tempView.TitleText, sessionName, vbTextCompare) > 0 Then
                        Set osView = tempView: sessionIsOpen = True: Debug.Print "Found view by iteration: " & osView.TitleText: Exit For
                    End If
                Next tempView
            Else Debug.Print "ThisFrame.Views.Count is 0."
            End If
        Else Debug.Print "Could not access ThisFrame.Views or Nothing. Err: " & Err.Description
        End If
        Err.Clear: On Error GoTo ConnectExtra_ErrorHandler
        If Not sessionIsOpen Then
            Debug.Print "View not found. Attempting CreateView: " & strBoPath
            currentAction = "ThisFrame.CreateView(""" & strBoPath & """)"
            Set osView = ThisFrame.CreateView(strBoPath)
            If Err.Number <> 0 Or osView Is Nothing Then Err.Clear: Debug.Print "CreateView FAILED. Err: " & Err.Description: GoTo ConnectExtra_ErrorHandler_FinalMsg
            End If
        End If
    End If
    Debug.Print "View obtained. Title: '" & osView.TitleText & "'. TypeName: " & TypeName(osView)
    On Error GoTo ConnectExtra_ErrorHandler

    currentAction = "osView.Control": Debug.Print currentAction
    Set ibmTerminal = osView.Control
    If ibmTerminal Is Nothing Then Debug.Print "Terminal obj Nothing.": GoTo ConnectExtra_ErrorHandler_FinalMsg
    Debug.Print "Terminal Object. TypeName: " & TypeName(ibmTerminal)

    currentAction = "ibmTerminal.Screen": Debug.Print currentAction
    Set obScreen = ibmTerminal.Screen
    If obScreen Is Nothing Then Debug.Print "Screen obj Nothing.": GoTo ConnectExtra_ErrorHandler_FinalMsg
    Debug.Print "Screen Object. TypeName: " & TypeName(obScreen)

    On Error Resume Next
    ibmTerminal.DisableKeystrokeProductivity = True: If Err.Number <> 0 Then Debug.Print "Info Err DisableKeystrokeProd: " & Err.Description: Err.Clear
    ibmTerminal.DisableScreenHistory = True: If Err.Number <> 0 Then Debug.Print "Info Err DisableScreenHist: " & Err.Description: Err.Clear
    On Error GoTo ConnectExtra_ErrorHandler

    Debug.Print "ConnectExtra: Success."
    Exit Sub
ConnectExtra_ErrorHandler:
    MsgBox "ConnectExtra Error (" & currentAction & "): " & Err.Number & " - " & Err.Description, vbCritical, SCRIPT_TITLE
ConnectExtra_ErrorHandler_FinalMsg:
    Call CleanUpReflectionObjects
End Sub

'===============================================================================
' HELPER FUNCTIONS
'===============================================================================
Private Sub WaitReady(Optional settleTimeMs As Long = 300, Optional timeoutMs As Long = 10000)
    If obScreen Is Nothing Then Exit Sub
    Dim startTime As Date: startTime = Now
    On Error Resume Next
    Do While obScreen.OIA.XStatus <> 0
        If DateDiff("s", startTime, Now) * 1000 > timeoutMs Then Debug.Print "WaitReady: Timeout XStatus.": Exit Do
        obScreen.WaitForHostSettle 100, 50: DoEvents
        If Err.Number <> 0 Then Debug.Print "WaitReady: Err in loop.": Exit Sub
    Loop
    obScreen.WaitForHostSettle settleTimeMs, timeoutMs
    If Err.Number <> 0 Then Debug.Print "WaitReady: Err final settle."
    On Error GoTo 0
End Sub

Private Function VerifyScreen(expectedText As String, rowNum As Long, colNum As Long, Optional ByVal length As Long = 0) As Boolean
    If obScreen Is Nothing Then VerifyScreen = False: Exit Function
    Call WaitReady(100)
    If length = 0 Then
        If expectedText = "" Then length = 80 Else length = Len(expectedText)
        End If
    End If
    Dim actualText As String
    On Error Resume Next
    actualText = obScreen.GetText(rowNum, colNum, length)
    If Err.Number <> 0 Then Debug.Print "VerifyScreen FAIL GetText R" & rowNum & "C" & colNum & ": " & Err.Description: VerifyScreen = False: Exit Function
    On Error GoTo 0
    
    If UCase(Trim(actualText)) = UCase(expectedText) Then
        VerifyScreen = True
    Else
        Debug.Print "VerifyScreen FAIL: Exp '" & expectedText & "',Found '" & Trim(actualText) & "'@R" & rowNum & "C" & colNum & "L" & length
        VerifyScreen = False
    End If
End Function

Private Sub SendData(data As String, rowNum As Long, colNum As Long, Optional sendTransmit As Boolean = True, Optional waitAfterMs As Long = 750)
    If obScreen Is Nothing Then Exit Sub
    Call WaitReady(100)
    obScreen.PutText2 data, rowNum, colNum
    If sendTransmit Then
        obScreen.SendControlKey ControlKeyCode_Transmit
        Call WaitReady(waitAfterMs)
    End If
End Sub

Private Sub SendKey(keyCode As Long, Optional waitAfterMs As Long = 750)
    If obScreen Is Nothing Then Exit Sub
    Call WaitReady(100)
    obScreen.SendControlKey keyCode
    Call WaitReady(waitAfterMs)
End Sub

' --- New Helper Sub to Clear Fields using Delete Key ---
Private Sub ClearField(targetRow As Long, targetCol As Long, numDeletes As Integer)
    If obScreen Is Nothing Then Exit Sub
    Dim i As Integer
    
    On Error Resume Next ' In case MoveCursor or SendKey fails
    obScreen.MoveCursor targetRow, targetCol ' Move cursor to start of field
    If Err.Number <> 0 Then
        Debug.Print "ClearField: Error moving cursor to R" & targetRow & "C" & targetCol & ". Error: " & Err.Description
        Err.Clear
        Exit Sub ' Cannot proceed if cursor move fails
    End If
    On Error GoTo 0 ' Restore error handling

    Debug.Print "ClearField: Clearing R" & targetRow & "C" & targetCol & " with " & numDeletes & " deletes."
    For i = 1 To numDeletes
        obScreen.SendControlKey ControlKeyCode_Delete ' Send Delete key
        ' Optional: A very short pause if needed between deletes, but usually not necessary
        ' Application.Wait (Now + TimeValue("0:00:00.05")) ' 50 milliseconds
    Next i
    Call WaitReady(50) ' Short settle after deletes
End Sub


Private Sub CleanUpReflectionObjects()
    Debug.Print "CleanUpReflectionObjects: Releasing..."
    On Error Resume Next
    Set obScreen = Nothing: Set ibmTerminal = Nothing: Set osView = Nothing
    Set ThisFrame = Nothing: Set app = Nothing
    Debug.Print "CleanUpReflectionObjects: Released."
    On Error GoTo 0
End Sub
