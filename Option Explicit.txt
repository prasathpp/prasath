' Attribute VB_Name = "mod_InterestAmendment_Automation_V10"
Option Explicit

' --- Attachmate/Reflection COM Object Declarations ---
Public objReflectionApp As Object
Public objFrame As Object
Public objView As Object
Public objTerminal As Object
Public objScreen As Object

' --- Constants for the Specific Automation ---
' --- Session File ---
Private Const TARGET_SESSION_EXACT_TITLE As String = "NTS Back Office - Prod.rd3x" ' Exact title for GetViewByTitleText

' --- Common Screen Titles & Coordinates (Derived from your sources) ---
Private Const SCREEN_APP_MENU As String = "APPLICATION SELECTION MENU"           ' R1, C28, L30
Private Const SCREEN_OPT_HANDLER_MAIN As String = "OPTION HANDLER FUNCTION SCREEN" ' R1, C26, L35
Private Const SCREEN_OPT_HANDLER_SUB As String = "SP2001"                       ' R2 (subtitle check)
Private Const SCREEN_BO_SYSTEM As String = "BACK OFFICE SYSTEM"                 ' R1, C7, L20
Private Const SCREEN_MASTER_INDEX As String = "MASTER INDEX"                   ' R1, C28, L12
Private Const SCREEN_FILE_MAINT_IDX As String = "FILE MAINTENANCE INPUT INDEX"  ' R1, C21, L30 (or L40 as per source)
Private Const SCREEN_INTERNAL_TXNS As String = "INTERNAL TXNS"                  ' R1, C19 (observed/target)
Private Const SCREEN_INTEREST_AMENDMENTS As String = "INTEREST AMENDMENTS"      ' R1, C30 (observed/target estimate)
Private Const SCREEN_INTEREST_DETAILS_SUB As String = "INTEREST DETAILS"        ' R2, C30 (observed/target fallback)
Private Const SCREEN_RBS_HEADER As String = "ROYAL BANK OF SCOTLAND"            ' R1, C1, L24 (intermediate header)
Private Const SCREEN_SECURITY_REMINDER As String = "SECURITY REMINDER"          ' R1, C29, L20
Private Const SCREEN_CMD_NOT_RECOGNIZED As String = "Command not recognized"      ' R20, C36, L22 (Error message)

' --- Common Input Coordinates ---
Private Const CMD_LINE_ROW As Long = 21
Private Const CMD_LINE_COL As Long = 13
Private Const OPTION_INPUT_ROW As Long = 21 ' Used on Option Handler, BO System etc.
Private Const OPTION_INPUT_COL As Long = 16
Private Const ACTION_INPUT_ROW As Long = 22 ' Used on Master Index, File Maint Index
Private Const ACTION_INPUT_COL As Long = 8
Private Const SORT_CODE_INPUT_ROW As Long = 22 ' Used on Master Index
Private Const SORT_CODE_INPUT_COL As Long = 74
Private Const ACCOUNT_INPUT_ROW As Long = 22 ' Used on File Maint Index, Customer Info Index
Private Const ACCOUNT_INPUT_COL As Long = 21
Private Const SECURITY_REMINDER_INPUT_ROW As Long = 22
Private Const SECURITY_REMINDER_INPUT_COL As Long = 11 ' 'Y' input field

' --- Common Commands/Options ---
Private Const CMD_TERM_ALL As String = "TERM ALL"
Private Const OPT_BO_SYSTEM As String = "19"       ' Option for Back Office System from Option Handler
Private Const OPT_MASTER_INDEX As String = "01"    ' Option for Master Index from Back Office System
Private Const ACT_FILE_MAINT_IDX As String = "20"  ' Action for File Maintenance Index from Master Index
Private Const ACT_INTERNAL_TXNS As String = "20"   ' Action for Internal Txns from File Maintenance Index (per target path)
Private Const ACT_INTEREST_AMEND As String = "04"  ' Action for Interest Amendments from Internal Txns

' --- Script Title for Messages ---
Private Const SCRIPT_TITLE As String = "Interest Amendment Automation V10"

' --- Max attempts for loops/navigation ---
Private Const MAX_SCREEN_VERIFY_ATTEMPTS As Integer = 5
Private Const MAX_NAVIGATION_ATTEMPTS As Integer = 15 ' For multi-step navigation sequences


' --- Main Processing Sub ---
' This sub processes a single record for demonstration purposes.
Sub ProcessSingleAmendment_V10()
    On Error GoTo ErrorHandler

    Dim ws As Worksheet
    Dim sortCode As String, accountNumber As String, brand As String
    Dim success As Boolean
    Dim dataSheetName As String
    Dim testRow As Long

    ' !!!!! DEFINE YOUR DATA SHEET NAME AND TEST ROW HERE !!!!!
    ' <<<< CONFIRM "Sheet1" IS THE ACTUAL NAME OF YOUR DATA SHEET TAB
    dataSheetName = "Sheet1"
    ' <<<< This should be the first row with data you want to test (e.g., row with 524131)
    testRow = 2
    ' !!!!! --------------------------------------------- !!!!!

    Debug.Print "--- Starting " & SCRIPT_TITLE & " - ProcessSingleAmendment_V10 ---"

    ' 1. Connect to Reflection
    ' IMPORTANT: "NTS Back Office - Prod.rd3x" must be OPEN in Reflection BEFORE running this macro.
    If Not ConnectToReflection_V10(TARGET_SESSION_EXACT_TITLE) Then
        ' Error message is shown within the Connect function
        GoTo CleanupAndExit
    End If
    Debug.Print SCRIPT_TITLE & ": Successfully connected to Reflection session."

    ' 2. Set worksheet and get data for test row
    On Error Resume Next ' To catch error if sheet name is wrong
    Set ws = ThisWorkbook.Worksheets(dataSheetName)
    If Err.Number <> 0 Or ws Is Nothing Then
        On Error GoTo 0 ' Reset error handling
        MsgBox "Could not find or set worksheet named: '" & dataSheetName & "'." & vbCrLf & _
               "Please check the sheet name in the VBA code (dataSheetName variable) and in your Excel file.", vbCritical, SCRIPT_TITLE
        GoTo CleanupAndExit
    End If
    On Error GoTo 0 ' Reset error handling
    Debug.Print "Using data from sheet: '" & ws.Name & "', attempting to read from Row: " & testRow

    ' Extract data - Ensure these columns match your data layout (A=SC, B=Acc, C=Brand for this example)
    Dim cellValueSortCode As Variant ' Use Variant to check for Empty easily
    cellValueSortCode = ws.Cells(testRow, "A").Value

    ' Basic data validation before attempting navigation
    If IsEmpty(cellValueSortCode) Or Trim(CStr(cellValueSortCode)) = "" Then
        MsgBox "No data found in test row " & testRow & ", Column A on sheet '" & dataSheetName & "'." & vbCrLf & _
               "Value appears empty or contains only spaces. Please check your test data and the 'testRow' variable in the VBA code.", vbExclamation, SCRIPT_TITLE
        ws.Cells(testRow, "H").Value = "Skipped - No Sort Code" ' Status in Col H (adjust column if needed)
        GoTo CleanupAndExit
    End If

    sortCode = Trim(CStr(cellValueSortCode))
    accountNumber = Trim(CStr(ws.Cells(testRow, "B").Value))
    brand = UCase(Trim(CStr(ws.Cells(testRow, "C").Value)))

    Debug.Print "-----------------------------------------------------"
    Debug.Print "Processing Excel Row: " & testRow & " | S/C: [" & sortCode & "] | Acc: [" & accountNumber & "] | Brand: [" & brand & "]"

    ' Additional check for required fields after extraction
    If sortCode = "" Or accountNumber = "" Or brand = "" Then
        Debug.Print "Skipped row " & testRow & " - Missing S/C, Account, or Brand after trimming."
        ws.Cells(testRow, "H").Value = "Skipped - Missing Data" ' Status in Col H (adjust column if needed)
        GoTo CleanupAndExit
    End If


    ' 3. Perform navigation to the target screen (Interest Amendments)
    Debug.Print SCRIPT_TITLE & ": Attempting navigation..."
    success = NavigateToInterestAmendments_V10(sortCode, accountNumber, brand)

    If success Then
        Debug.Print SCRIPT_TITLE & ": Successfully navigated to the target screen for row " & testRow & "."
        ws.Cells(testRow, "H").Value = "Navigated - OK" ' Status in Col H (adjust column if needed)
        MsgBox "PAUSED: On the target screen (Interest Amendments or Details) for S/C: " & sortCode & ", A/N: " & accountNumber & "." & vbCrLf & _
               "You can now manually verify/perform the amendment and then click OK to allow the macro to clean up.", vbInformation, SCRIPT_TITLE
        ' --- YOUR AMENDMENT LOGIC WOULD GO HERE ---
        ' After manual action, the macro will resume upon clicking OK and proceed to cleanup.
        ' If automating the amendment, place those steps here *after* successful navigation.
        ' ------------------------------------------

        ' Optional: Navigate back to a known state (like Master Index) if processing multiple records later
        ' Call NavigateBackToMasterIndex_V10 ' Need to implement this based on PF2 logic if required

    Else
        Debug.Print SCRIPT_TITLE & ": Navigation FAILED for row " & testRow & "."
        ws.Cells(testRow, "H").Value = "Navigation Failed" ' Status in Col H (adjust column if needed)
        ' An error message box was already shown by the navigation function.
    End If

CleanupAndExit:
    ' 4. Clean up and finish
    Call CleanUpReflectionObjects_V10

    Debug.Print "--- Finished " & SCRIPT_TITLE & " - ProcessSingleAmendment_V10 ---"
    Exit Sub

ErrorHandler:
    ' Handle any unexpected errors during the macro execution
    MsgBox "An unexpected error occurred in '" & SCRIPT_TITLE & "':" & vbCrLf & _
           "Error " & Err.Number & ": " & Err.Description & vbCrLf & _
           "Macro execution will stop.", vbCritical, SCRIPT_TITLE
    Debug.Print SCRIPT_TITLE & ": Caught unexpected Error " & Err.Number & ": " & Err.Description
    Resume CleanupAndExit ' Go to the cleanup section after showing the error
End Sub


' --- Connection Logic (V10 - Uses GetViewByTitleText) ---
' Connects to an existing Reflection Workspace and finds the specified session
' using GetViewByTitleText. Returns True if connection and object retrieval is successful, False otherwise.
Private Function ConnectToReflection_V10(ByVal targetSessionExactTitle As String) As Boolean
    On Error GoTo ConnectErrorHandler_V10
    ConnectToReflection_V10 = False ' Assume failure initially

    Debug.Print "Connect_V10: Attempting GetObject(""Reflection Workspace"")..."
    On Error Resume Next ' Temporarily disable error handling for GetObject
    Set objReflectionApp = GetObject("Reflection Workspace")
    If Err.Number <> 0 Or objReflectionApp Is Nothing Then
        Err.Clear ' Clear the "Object not found" error
        Debug.Print "Connect_V10: GetObject(""Reflection Workspace"") FAILED."
        MsgBox "Could not connect to Reflection Workspace." & vbCrLf & _
               "Please ensure Reflection is running and that 'Enable Reflection Automation' is checked in Reflection settings.", vbCritical, SCRIPT_TITLE
        Exit Function ' Exit the function indicating failure
    End If
    Debug.Print "Connect_V10: RApp obtained. TypeName: " & TypeName(objReflectionApp)
    On Error GoTo ConnectErrorHandler_V10 ' Restore error handling

    Debug.Print "Connect_V10: Attempting objReflectionApp.GetObject(""Frame"")..."
    Set objFrame = objReflectionApp.GetObject("Frame")
    If objFrame Is Nothing Then
         Debug.Print "Connect_V10: Frame object is Nothing."
         MsgBox "Could not get the Reflection Frame object.", vbCritical, SCRIPT_TITLE
         Exit Function
    End If
    Debug.Print "Connect_V10: objFrame obtained. TypeName: " & TypeName(objFrame)

    ' Ensure the frame is visible and brought to front (optional but helpful for user experience)
    If Not objFrame.Visible Then objFrame.Visible = True
    objFrame.Activate ' Brings the main Reflection Workspace window to front
    Debug.Print "Connect_V10: Frame Visible/Activated."

    ' Use GetViewByTitleText based on previous success, searching for the exact title
    Debug.Print "Connect_V10: Attempting objFrame.GetViewByTitleText(""" & targetSessionExactTitle & """)..."
    On Error Resume Next ' Allow GetViewByTitleText to fail if title doesn't match
    Set objView = objFrame.GetViewByTitleText(targetSessionExactTitle)
    If Err.Number <> 0 Or objView Is Nothing Then
        Err.Clear ' Clear the "Object not found" error
        Debug.Print "Connect_V10: objFrame.GetViewByTitleText FAILED or returned Nothing."
        MsgBox "Could not find a Reflection session with the EXACT title: '" & targetSessionExactTitle & "'." & vbCrLf & _
               "Please ensure the correct session file is open in Reflection and its window title matches exactly.", vbCritical, SCRIPT_TITLE
        Exit Function ' Exit function if the target view was not found
    End If
    Debug.Print "Connect_V10: objFrame.GetViewByTitleText SUCCEEDED. View Title: '" & objView.TitleText & "'. TypeName(objView): " & TypeName(objView)
    On Error GoTo ConnectErrorHandler_V10 ' Restore error handling

    ' Skipping explicit objView.Activate as it caused Error 438 previously.
    Debug.Print "Connect_V10: Skipping explicit objView.Activate."

    Debug.Print "Connect_V10: Attempting objView.Control..."
    Set objTerminal = objView.Control
    If objTerminal Is Nothing Then
        Debug.Print "Connect_V10: Terminal object is Nothing."
        MsgBox "Could not get the Reflection Terminal control from the found view.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "Connect_V10: objTerminal obtained. TypeName: " & TypeName(objTerminal)

    Debug.Print "Connect_V10: Attempting objTerminal.Screen..."
    Set objScreen = objTerminal.Screen
    If objScreen Is Nothing Then
        Debug.Print "Connect_V10: Screen object is Nothing."
        MsgBox "Could not get the Reflection Screen object from the terminal control.", vbCritical, SCRIPT_TITLE
        Exit Function
    End If
    Debug.Print "Connect_V10: objScreen obtained. TypeName: " & TypeName(objScreen)

    ' Optional but recommended settings for automation (ignore errors if properties don't exist)
    On Error Resume Next
    objTerminal.DisableKeystrokeProductivity = True ' Disable features that might interfere with scripting input
    If Err.Number <> 0 Then Debug.Print "Connect_V10: Info - Error setting DisableKeystrokeProductivity: " & Err.Description: Err.Clear
    objTerminal.DisableScreenHistory = True ' Disable screen history if not needed
    If Err.Number <> 0 Then Debug.Print "Connect_V10: Info - Error setting DisableScreenHistory: " & Err.Description: Err.Clear
    On Error GoTo ConnectErrorHandler_V10 ' Restore error handling

    ConnectToReflection_V10 = True ' Connection successful
    Debug.Print "Connect_V10: All core Reflection objects set successfully."
    Exit Function ' Exit function indicating success

ConnectErrorHandler_V10:
    ' Generic error handler for the connection function
    Debug.Print "Connect_V10: Error (captured) - " & Err.Number & ": " & Err.Description
    ConnectToReflection_V10 = False ' Ensure function returns False on any error
    ' A specific error message box might be added here if not handled by specific checks above
    Exit Function ' Exit function on error
End Function

' Releases the Reflection COM objects to free up resources.
Private Sub CleanUpReflectionObjects_V10()
    On Error Resume Next ' Ignore errors during cleanup

    Set objScreen = Nothing
    Set objTerminal = Nothing
    Set objView = Nothing
    Set objFrame = Nothing
    Set objReflectionApp = Nothing

    On Error GoTo 0 ' Reset error handling
    Debug.Print SCRIPT_TITLE & ": Reflection objects released."
End Sub

' --- Screen Interaction Helpers (V10) ---

' Waits for the host OIA area to indicate readiness (XStatus = 0) and screen content to settle.
' Includes a check for the Security Reminder screen within the wait loop and after OIA is ready.
Private Sub WaitHostSettle_V10(Optional ByVal settleTimeoutMilliseconds As Long = 10000)
    If objScreen Is Nothing Then
        Debug.Print "WaitHostSettle_V10: objScreen is Nothing. Cannot wait."
        Exit Sub
    End If
    Dim startTime As Date: startTime = Now

    Debug.Print "WaitHostSettle_V10: Waiting for host ready (XStatus=0 or timeout " & settleTimeoutMilliseconds & "ms)..."

    ' Wait for OIA XStatus to become 0
    Do While objScreen.OIA.XStatus <> 0
        ' Check for timeout
        If DateDiff("s", startTime, Now) * 1000 > settleTimeoutMilliseconds Then
            Debug.Print "WaitHostSettle_V10: Timeout waiting for XStatus=0."
            MsgBox "Timeout waiting for host to become ready. Macro will stop.", vbCritical, SCRIPT_TITLE
            End ' Stop execution on timeout
        End If

        ' Wait for a short period and check for Security Reminder
        objScreen.WaitForHostSettle 50, 20: DoEvents
        CheckForAndHandleSecurityReminder_V10 ' Handle reminder if it appears

    Loop

    ' Check for Security Reminder one last time after OIA is 0
    CheckForAndHandleSecurityReminder_V10

    ' Add a small final settle time for screen contents to stabilize
    objScreen.WaitForHostSettle 200, 1000

    Debug.Print "WaitHostSettle_V10: Host is ready (XStatus=0 and settled)."
End Sub

' Checks for the Security Reminder screen and handles it by sending 'Y' and Transmit.
' Returns True if the reminder was detected and handled, False otherwise.
Private Function CheckForAndHandleSecurityReminder_V10() As Boolean
    CheckForAndHandleSecurityReminder_V10 = False
    If objScreen Is Nothing Then
        Debug.Print "CheckForAndHandleSecurityReminder_V10: objScreen is Nothing."
        Exit Function
    End If

    ' Check for the SECURITY REMINDER screen title
    If VerifyScreenTitle_V10(SCREEN_SECURITY_REMINDER, SECURITY_REMINDER_ROW, SECURITY_REMINDER_COL, SECURITY_REMINDER_LEN, False) Then ' Use non-terminating verify
        Debug.Print "CheckForAndHandleSecurityReminder_V10: Detected Security Reminder. Sending 'Y'."
        objScreen.PutText2 "Y", SECURITY_REMINDER_INPUT_ROW, SECURITY_REMINDER_INPUT_COL
        objScreen.SendControlKey ControlKeyCode_Transmit
        Debug.Print "CheckForAndHandleSecurityReminder_V10: Sent 'Y' and Transmit. Waiting for next screen..."
        CheckForAndHandleSecurityReminder_V10 = True
        WaitHostSettle_V10() ' Wait for the host to process the dismissal and reach the next screen
    End If
End Function

' Sends data to a specific field on the screen and sends Transmit.
' Uses WaitHostSettle_V10 before and after sending input.
Private Sub SendDataAndTransmit_V10(data As String, rowNum As Long, colNum As Long)
    If objScreen Is Nothing Then
        Debug.Print "SendDataAndTransmit_V10: objScreen is Nothing. Cannot send data."
        MsgBox "Internal Error: Reflection screen object not available.", vbCritical, SCRIPT_TITLE
        End ' Stop execution on critical error
    End If

    Call WaitHostSettle_V10() ' Wait for the screen to be ready for input

    Debug.Print "SendDataAndTransmit_V10: Putting data '" & data & "' at R" & rowNum & "C" & colNum & "."
    objScreen.PutText2 data, rowNum, colNum

    Debug.Print "SendDataAndTransmit_V10: Sending Transmit key."
    objScreen.SendControlKey ControlKeyCode_Transmit

    Call WaitHostSettle_V10(5000) ' Wait longer for the host to process the input and update the screen
End Sub

' Sends a control key (e.g., PF key) to the screen.
' Uses WaitHostSettle_V10 before and after sending the key.
Private Sub SendControlKey_V10(keyCode As Long)
    If objScreen Is Nothing Then
        Debug.Print "SendControlKey_V10: objScreen is Nothing. Cannot send key."
        MsgBox "Internal Error: Reflection screen object not available.", vbCritical, SCRIPT_TITLE
        End ' Stop execution on critical error
    End If

    Call WaitHostSettle_V10() ' Wait for the screen to be ready before sending key

    Debug.Print "SendControlKey_V10: Sending key code " & keyCode & "."
    objScreen.SendControlKey keyCode

    Call WaitHostSettle_V10() ' Wait for the host to process the key and update the screen
End Sub


' Verifies if the expected screen title text is present at a specific location.
' If terminateOnError is True, it stops the macro and shows a message box on failure.
' Uses WaitHostSettle_V10 before checking content.
Private Function VerifyScreenTitle_V10(expectedText As String, rowNum As Long, colNum As Long, expectedLength As Long, terminateOnError As Boolean) As Boolean
    If objScreen Is Nothing Then
        Debug.Print "VerifyScreenTitle_V10: objScreen is Nothing. Cannot verify."
        If terminateOnError Then
             MsgBox "Internal Error: Reflection screen object not available during screen verification.", vbCritical, SCRIPT_TITLE
             End ' Stop execution
        End If
        VerifyScreenTitle_V10 = False
        Exit Function
    End If

    ' Always wait for the screen to settle before attempting verification
    Call WaitHostSettle_V10(2000) ' Use a slightly longer wait for critical screen checks

    Dim actualText As String: actualText = ""
     On Error Resume Next ' GetText might error on bad coordinates, prevent crash
    actualText = Trim(objScreen.GetText(rowNum, colNum, expectedLength))
     On Error GoTo 0 ' Restore error handling

    If UCase(actualText) = UCase(expectedText) Then
        VerifyScreenTitle_V10 = True
        Debug.Print "VerifyScreenTitle_V10: Successfully verified screen title: '" & expectedText & "'."
    Else
        VerifyScreenTitle_V10 = False
        Debug.Print "VerifyScreenTitle_V10 FAILED: Expected '" & expectedText & "' at R" & rowNum & "C" & colNum & "L" & expectedLength & ", Found '" & actualText & "'."

        If terminateOnError Then
             MsgBox "Navigation Error: Expected screen '" & expectedText & "' was not found." & vbCrLf & _
                    "Current screen text at R" & rowNum & "C" & colNum & ": '" & actualText & "'." & vbCrLf & _
                    "Macro execution will stop.", vbCritical, SCRIPT_TITLE
             End ' Stop execution immediately on critical verification failure
        End If
    End If
End Function

' --- Navigation Logic (V10) ---
' Navigates the host system from the Application Selection Menu to the Interest Amendments screen.
' Incorporates comprehensive screen verification at each step.
' Returns True if navigation is successful, False otherwise. Stops execution on critical failures.
Private Function NavigateToInterestAmendments_V10(ByVal sc As String, ByVal acct As String, ByVal brnd As String) As Boolean
    On Error GoTo NavigationErrorHandler
    NavigateToInterestAmendments_V10 = False ' Default to failure

    If objScreen Is Nothing Then
        Debug.Print "Navigate_V10: objScreen object is not available. Cannot navigate."
        MsgBox "Internal Error: Reflection screen object not available for navigation.", vbCritical, SCRIPT_TITLE
        End ' Stop execution
    End If

    ' --- Determine Confirmation Code based on Brand (from your source) ---
    Dim confirmCode As String
    Select Case brnd
        Case "RBS", "RBG", "RBI", "VIR": confirmCode = "PRCIR#T#"
        Case "NWB", "CTS", "NWO", "IOM": confirmCode = "PRCIN#T#"
        Case "UBN": confirmCode = "PRCIJ#T#"
        Case "UBR": confirmCode = "PRCIK#T#"
        Case Else
            Debug.Print "Navigate_V10: Invalid Brand '" & brnd & "'. Cannot proceed."
            MsgBox "Invalid Brand specified: '" & brnd & "'. Navigation aborted.", vbExclamation, SCRIPT_TITLE
            Exit Function ' Exit function indicating failure
    End Select
    Debug.Print "Navigate_V10: Using confirm code: " & confirmCode & " for Brand: " & brnd

    ' --- Step 1: Ensure on APPLICATION SELECTION MENU ---
    Debug.Print "Navigate_V10: Verifying start screen: " & SCREEN_APP_MENU & "."
    ' VerifyScreenTitle_V10 will stop the macro if the screen is not correct
    Call VerifyScreenTitle_V10(SCREEN_APP_MENU, SCREEN_APP_MENU_ROW, SCREEN_APP_MENU_COL, SCREEN_APP_MENU_LENGTH, True)
    Debug.Print "Navigate_V10: Confirmed on " & SCREEN_APP_MENU & "."

    ' --- Step 2: Send TERM ALL ---
    Debug.Print "Navigate_V10: Sending " & CMD_TERM_ALL & "..."
    Call SendDataAndTransmit_V10(CMD_TERM_ALL, CMD_LINE_ROW, CMD_LINE_COL)
    Debug.Print "Navigate_V10: " & CMD_TERM_ALL & " sent."
    ' After TERM ALL, screen might stay the same or clear. We proceed to send the brand code.

    ' --- Step 3: Send Brand Code ---
    Debug.Print "Navigate_V10: Sending Brand code '" & confirmCode & "'..."
    Call SendDataAndTransmit_V10(confirmCode, CMD_LINE_ROW, CMD_LINE_COL)
    Debug.Print "Navigate_V10: Brand code sent."

    ' --- Step 3a/b: Handle potential intermediate screens & verify arrival at OPTION HANDLER ---
    ' Check for "Command not recognized" error message first
    Debug.Print "Navigate_V10: Checking for '" & SCREEN_CMD_NOT_RECOGNIZED & "' error."
    If VerifyScreenTitle_V10(SCREEN_CMD_NOT_RECOGNIZED, R20, C36, L22, False) Then ' Coordinates from your source code, length 22
        Debug.Print "Navigate_V10: Brand code '" & confirmCode & "' not recognized. Navigation failed."
        MsgBox "Brand code '" & confirmCode & "' not recognized on the host system. Navigation aborted.", vbCritical, SCRIPT_TITLE
        Exit Function ' Exit function indicating failure
    End If
     Debug.Print "Navigate_V10: '" & SCREEN_CMD_NOT_RECOGNIZED & "' screen NOT found."


    ' Check for "ROYAL BANK OF SCOTLAND" header or blank screen, loop with STAR if needed (from your source)
    Debug.Print "Navigate_V10: Checking for " & SCREEN_OPT_HANDLER_MAIN & " or intermediate screens..."
    Dim starLoopCount As Long: starLoopCount = 0
    Const maxStarLoops As Long = 15 ' Prevent infinite loop

    ' Loop until Option Handler is reached or max attempts exceeded
    Do While Not VerifyScreenTitle_V10(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_MAIN_ROW, SCREEN_OPT_HANDLER_MAIN_COL, SCREEN_OPT_HANDLER_MAIN_LENGTH, False) And starLoopCount < maxStarLoops

        ' Use VerifyScreenTitle_V10 with False to check screens without terminating immediately
        If VerifyScreenTitle_V10(SCREEN_RBS_HEADER, R1, C1, L24, False) Then ' Coords from your source
             Debug.Print "Navigate_V10: Detected " & SCREEN_RBS_HEADER & ". Sending Transmit."
             Call SendControlKey_V10(ControlKeyCode_Transmit) ' Send Transmit, waits internally
             Debug.Print "Navigate_V10: Sent Transmit after " & SCREEN_RBS_HEADER & "."
        ElseIf Trim(objScreen.GetText(R1, C1, L80)) = "" Then ' Check if screen is effectively blank on the first line
             Debug.Print "Navigate_V10: Detected blank screen. Sending STAR."
             ' Send STAR to R1, C1 and Transmit (from your source logic)
             Call SendDataAndTransmit_V10("STAR", R1, C1) ' Coords from your source
             Debug.Print "Navigate_V10: Sent STAR to blank screen."
        Else
             ' Log unexpected screen content but continue looping up to max attempts
             Debug.Print "Navigate_V10: On unexpected screen while waiting for " & SCREEN_OPT_HANDLER_MAIN & ". Current text at R1C1L80: '" & Trim(objScreen.GetText(R1, C1, L80)) & "'."
             ' Consider sending PF3 here if needed for recovery, but let's stick to STAR/Transmit for now
             Call SendControlKey_V10(ControlKeyCode_Transmit) ' Maybe just send transmit if unsure? Or PF3? Let's stick to STAR/Transmit as per source pattern.
        End If

        starLoopCount = starLoopCount + 1
        Call WaitHostSettle_V10(500) ' Add a small explicit pause inside the loop

        ' Re-check if Option Handler is reached after attempting recovery
        If VerifyScreenTitle_V10(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_MAIN_ROW, SCREEN_OPT_HANDLER_MAIN_COL, SCREEN_OPT_HANDLER_MAIN_LENGTH, False) Then
            Debug.Print "Navigate_V10: Reached " & SCREEN_OPT_HANDLER_MAIN & " after " & starLoopCount & " attempts."
            Exit Do ' Successfully reached Option Handler, exit STAR loop
        End If

    Loop

    ' Final verification after the loop - this time terminate on failure
    Debug.Print "Navigate_V10: Final check for " & SCREEN_OPT_HANDLER_MAIN & "."
    If Not VerifyScreenTitle_V10(SCREEN_OPT_HANDLER_MAIN, SCREEN_OPT_HANDLER_MAIN_ROW, SCREEN_OPT_HANDLER_MAIN_COL, SCREEN_OPT_HANDLER_MAIN_LENGTH, True) Then
         ' As a final check, like your source, verify the SP2001 subtitle if main title check alone wasn't sufficient.
         ' If we are here, the primary VerifyScreenTitle_V10(..., True) failed and would have stopped.
         ' This secondary check is only needed if we wanted to allow navigation success with subtitle fallback,
         ' but for robust stopping, the main title check with terminate=True is better.
         ' Keeping the secondary check structure just for logging if needed, though main verify already failed.
         If InStr(1, UCase(Trim(objScreen.GetText(R2, C1, L80))), UCase(SCREEN_OPT_HANDLER_SUB)) > 0 Then ' Coords from your source
             Debug.Print "Navigate_V10: Found subtitle '" & SCREEN_OPT_HANDLER_SUB & "' but primary title '" & SCREEN_OPT_HANDLER_MAIN & "' was missing."
             ' This case is handled by the terminate=True in the line above.
         Else
              Debug.Print "Navigate_V10: Did not find '" & SCREEN_OPT_HANDLER_MAIN & "' or subtitle '" & SCREEN_OPT_HANDLER_SUB & "'."
              ' This case is handled by the terminate=True in the line above.
         End If
         ' If we reach here, VerifyScreenTitle_V10(..., True) already stopped the macro.
         Exit Function ' Should not be reached if terminate=True failed
    End If
    Debug.Print "Navigate_V10: Confirmed on " & SCREEN_OPT_HANDLER_MAIN & "."


    ' --- Step 4: Send Option 19 (Back Office System) ---
    Debug.Print "Navigate_V10: Sending option " & OPT_BO_SYSTEM & "."
    Call SendDataAndTransmit_V10(OPT_BO_SYSTEM, OPTION_INPUT_ROW, OPTION_INPUT_COL)
    Debug.Print "Navigate_V10: Option " & OPT_BO_SYSTEM & " sent."

    ' --- Step 4a: Verify arrival at BACK OFFICE SYSTEM ---
    Debug.Print "Navigate_V10: Verifying screen: " & SCREEN_BO_SYSTEM & "."
    Call VerifyScreenTitle_V10(SCREEN_BO_SYSTEM, SCREEN_BO_SYSTEM_ROW, SCREEN_BO_SYSTEM_COL, SCREEN_BO_SYSTEM_LENGTH, True)
    Debug.Print "Navigate_V10: Confirmed on " & SCREEN_BO_SYSTEM & "."


    ' --- Step 5: Send Option 01 (Master Index) ---
    Debug.Print "Navigate_V10: Sending option " & OPT_MASTER_INDEX & "."
    Call SendDataAndTransmit_V10(OPT_MASTER_INDEX, OPTION_INPUT_ROW, OPTION_INPUT_COL)
    Debug.Print "Navigate_V10: Option " & OPT_MASTER_INDEX & " sent."

    ' --- Step 5a: Verify arrival at MASTER INDEX ---
    Debug.Print "Navigate_V10: Verifying screen: " & SCREEN_MASTER_INDEX & "."
    Call VerifyScreenTitle_V10(SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH, True)
    Debug.Print "Navigate_V10: Confirmed on " & SCREEN_MASTER_INDEX & "."


    ' --- Step 6: Master Index - Send Action 20 (File Maintenance Input Index), Enter Sort Code ---
    ' Use Format to ensure correct zero-padding (from your source)
    Dim formattedSC As String: formattedSC = Format(sc, "000000")
    Debug.Print "Navigate_V10: Sending Action " & ACT_FILE_MAINT_IDX & " and S/C " & formattedSC & "."
    Call WaitHostSettle_V10(100) ' Settle before multi-part input
    objScreen.PutText2 ACT_FILE_MAINT_IDX, ACTION_INPUT_ROW, ACTION_INPUT_COL
    objScreen.PutText2 formattedSC, SORT_CODE_INPUT_ROW, SORT_CODE_INPUT_COL
    Call SendControlKey_V10(ControlKeyCode_Transmit) ' Send Transmit, waits internally
    Debug.Print "Navigate_V10: Action " & ACT_FILE_MAINT_IDX & " + S/C sent."

    ' --- Step 6a: Verify arrival at FILE MAINTENANCE INPUT INDEX ---
    Debug.Print "Navigate_V10: Verifying screen: " & SCREEN_FILE_MAINT_IDX & "."
    Call VerifyScreenTitle_V10(SCREEN_FILE_MAINT_IDX, SCREEN_FILE_MAINT_IDX_ROW, SCREEN_FILE_MAINT_IDX_COL, SCREEN_FILE_MAINT_IDX_LENGTH, True)
    Debug.Print "Navigate_V10: Confirmed on " & SCREEN_FILE_MAINT_IDX & "."


    ' --- Step 7: File Maint Idx - Send Action 20 (Internal Txns), Enter Account Number ---
    ' Use Format to ensure correct zero-padding (from your source)
    ' Note: This is Action 20 leading to Internal Txns, based on observed path, not Action 01 to Customer Info Index.
    Dim formattedAcct As String: formattedAcct = Format(acct, "00000000")
    Debug.Print "Navigate_V10: Sending Action " & ACT_INTERNAL_TXNS & " and A/N " & formattedAcct & "."
    Call WaitHostSettle_V10(100) ' Settle before multi-part input
    objScreen.PutText2 ACT_INTERNAL_TXNS, ACTION_INPUT_ROW, ACTION_INPUT_COL
    objScreen.PutText2 formattedAcct, ACCOUNT_INPUT_ROW, ACCOUNT_INPUT_COL
    Call SendControlKey_V10(ControlKeyCode_Transmit) ' Send Transmit, waits internally
    Debug.Print "Navigate_V10: Action " & ACT_INTERNAL_TXNS & " + A/N sent."

    ' --- Step 7a: Verify arrival at INTERNAL TXNS ---
    Debug.Print "Navigate_V10: Verifying screen: " & SCREEN_INTERNAL_TXNS & "."
    Call VerifyScreenTitle_V10(SCREEN_INTERNAL_TXNS, SCREEN_INTERNAL_TXNS_ROW, SCREEN_INTERNAL_TXNS_COL, Len(SCREEN_INTERNAL_TXNS), True)
    Debug.Print "Navigate_V10: Confirmed on " & SCREEN_INTERNAL_TXNS & "."


    ' --- Step 8: Internal Txns - Send Action 04 (Interest Amendments) ---
    Debug.Print "Navigate_V10: Sending Action " & ACT_INTEREST_AMEND & "."
    Call SendDataAndTransmit_V10(ACT_INTEREST_AMEND, ACTION_INPUT_ROW, ACTION_INPUT_COL)
    Debug.Print "Navigate_V10: Action " & ACT_INTEREST_AMEND & " sent."

    ' --- Step 8a: Verify arrival at target screen (Interest Amendments or Details) ---
    Debug.Print "Navigate_V10: Verifying arrival at target screen: " & SCREEN_INTEREST_AMENDMENTS & " or fallback " & SCREEN_INTEREST_DETAILS_SUB & "."
    ' Check for the primary target screen title (Interest Amendments)
    If VerifyScreenTitle_V10(SCREEN_INTEREST_AMENDMENTS, SCREEN_INTEREST_AMENDMENTS_ROW, SCREEN_INTEREST_AMENDMENTS_COL, Len(SCREEN_INTEREST_AMENDMENTS), False) Then
        Debug.Print "Navigate_V10: Successfully reached primary target: " & SCREEN_INTEREST_AMENDMENTS & "."
        NavigateToInterestAmendments_V10 = True ' Navigation Success!
    ' If primary not found, check for the fallback screen title (Interest Details)
    ElseIf VerifyScreenTitle_V10(SCREEN_INTEREST_DETAILS_SUB, SCREEN_INTEREST_DETAILS_SUB_ROW, SCREEN_INTEREST_DETAILS_SUB_COL, Len(SCREEN_INTEREST_DETAILS_SUB), False) Then
         Debug.Print "Navigate_V10: Successfully reached fallback screen: " & SCREEN_INTEREST_DETAILS_SUB & "."
         NavigateToInterestAmendments_V10 = True ' Reaching the Details screen is also considered success for access
    Else
        ' Neither target nor fallback screen was reached - Fatal Error
        Debug.Print "Navigate_V10: Did not reach " & SCREEN_INTEREST_AMENDMENTS & " or " & SCREEN_INTEREST_DETAILS_SUB & "."
        MsgBox "Navigation Error: Failed to reach the expected Interest screen." & vbCrLf & _
               "Expected '" & SCREEN_INTEREST_AMENDMENTS & "' or '" & SCREEN_INTEREST_DETAILS_SUB & "'." & vbCrLf & _
               "Macro execution will stop.", vbCritical, SCRIPT_TITLE
        End ' Stop execution immediately
    End If

    ' If we reached here, navigation was successful (either primary or fallback interest screen)
    Exit Function ' Exit function indicating success

NavigationErrorHandler:
    ' Handler for errors specifically within the navigation function
    Debug.Print "NavigateToInterestAmendments_V10 Error (captured) - " & Err.Number & ": " & Err.Description
    MsgBox "An error occurred during navigation: " & vbCrLf & _
           "Error " & Err.Number & ": " & Err.Description & vbCrLf & _
           "Macro execution will stop.", vbCritical, SCRIPT_TITLE
    NavigateToInterestAmendments_V10 = False ' Ensure function returns False
    End ' Stop execution immediately on error

End Function

' --- Back Navigation (Example: Back to Master Index using PF2) ---
' This function navigates back to the Master Index screen.
' It's useful for resetting position after processing a record.
Private Function NavigateBackToMasterIndex_V10() As Boolean
    On Error GoTo BackNavigationErrorHandler
    NavigateBackToMasterIndex_V10 = False ' Default to failure

    If objScreen Is Nothing Then
        Debug.Print "NavigateBackToMasterIndex_V10: objScreen is Nothing."
        Exit Function
    End If

    Dim iCount As Integer: iCount = 0
    Const MAX_PF2_ATTEMPTS As Integer = 15 ' Safeguard against infinite loops

    Debug.Print "NavigateBackToMasterIndex_V10: Attempting to navigate back to " & SCREEN_MASTER_INDEX & "."

    ' Loop while not on the Master Index screen and attempts are within limit
    Do While Not VerifyScreenTitle_V10(SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH, False) And iCount < MAX_PF2_ATTEMPTS

        Debug.Print "NavigateBackToMasterIndex_V10: Not yet on " & SCREEN_MASTER_INDEX & ". Sending PF2. Attempt " & iCount + 1 & "."
        Call SendControlKey_V10(ControlKeyCode_F2) ' Send PF2, waits internally

        iCount = iCount + 1
    Loop

    ' Final check after the loop
    If VerifyScreenTitle_V10(SCREEN_MASTER_INDEX, SCREEN_MASTER_INDEX_ROW, SCREEN_MASTER_INDEX_COL, SCREEN_MASTER_INDEX_LENGTH, False) Then
        Debug.Print "NavigateBackToMasterIndex_V10: Successfully reached " & SCREEN_MASTER_INDEX & "."
        NavigateBackToMasterIndex_V10 = True
    Else
        Debug.Print "NavigateBackToMasterIndex_V10: Failed to reach " & SCREEN_MASTER_INDEX & " after " & MAX_PF2_ATTEMPTS & " attempts."
        MsgBox "Navigation Error: Failed to navigate back to Master Index!", vbCritical, SCRIPT_TITLE
        ' Decide here if you want to End execution or handle failure differently.
        ' For robustness in a batch process, you might want to log and skip to the next record.
        ' For now, matching the source code's implicit 'End' behavior on navigation failure:
        End ' Stop execution if critical back navigation fails
    End If

    Exit Function ' Exit function

BackNavigationErrorHandler:
    Debug.Print "NavigateBackToMasterIndex_V10 Error (captured) - " & Err.Number & ": " & Err.Description
     MsgBox "An error occurred during back navigation: " & vbCrLf & _
           "Error " & Err.Number & ": " & Err.Description & vbCrLf & _
           "Macro execution will stop.", vbCritical, SCRIPT_TITLE
    NavigateBackToMasterIndex_V10 = False
    End ' Stop execution immediately on error

End Function


' --- Missing Constants (need to add these based on observed screen coordinates/lengths) ---
' You will need to add actual values for these constants:
' Private Const SCREEN_BO_SYSTEM_ROW As Long = 1
' Private Const SCREEN_BO_SYSTEM_COL As Long = 7
' Private Const SCREEN_BO_SYSTEM_LENGTH As Long = 20
'
' Private Const SCREEN_MASTER_INDEX_ROW As Long = 1
' Private Const SCREEN_MASTER_INDEX_COL As Long = 28
' Private Const SCREEN_MASTER_INDEX_LENGTH As Long = 12
'
' Private Const SCREEN_FILE_MAINT_IDX_ROW As Long = 1
' Private Const SCREEN_FILE_MAINT_IDX_COL As Long = 21
' Private Const SCREEN_FILE_MAINT_IDX_LENGTH As Long = 30 ' Or 40 per your source code comment
'
' Private Const SCREEN_INTERNAL_TXNS_ROW As Long = 1
' Private Const SCREEN_INTERNAL_TXNS_COL As Long = 19
'
' Private Const SCREEN_INTEREST_AMENDMENTS_ROW As Long = 1 ' Estimate - needs verification
' Private Const SCREEN_INTEREST_AMENDMENTS_COL As Long = 30 ' Estimate - needs verification
'
' Private Const SCREEN_INTEREST_DETAILS_SUB_ROW As Long = 2 ' Estimate - needs verification
' Private Const SCREEN_INTEREST_DETAILS_SUB_COL As Long = 30 ' Estimate - needs verification
'
' Private Const R1 As Long = 1 ' Generic R/C constants from your source
' Private Const C1 As Long = 1
' Private Const L80 As Long = 80
' Private Const R20 As Long = 20
' Private Const C36 As Long = 36
' Private Const L22 As Long = 22
' Private Const R2 As Long = 2
'
' --- Missing Keys (if not already defined implicitly by Reflection) ---
' Some environments might need these defined explicitly if ControlKeyCode_Transmit etc. aren't recognized
' Private Const ControlKeyCode_Transmit As Long = ' Value for Enter/Transmit key
' Private Const ControlKeyCode_F2 As Long = ' Value for PF2 key
' Private Const ControlKeyCode_F3 As Long = ' Value for PF3 key etc.
' Private Const ControlKeyCode_Pa1 As Long = ' Value for PA1 key
