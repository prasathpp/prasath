' Attribute VB_Name = "mod_InterestAmend_FocusCore"
Option Explicit

' --- Reflection COM Objects ---
Dim RApp As Object
Dim RFrame As Object
Dim RView As Object
Dim RTerminal As Object
Dim RScreen As Object

' --- Key Screen Title Constants ---
Private Const SCREEN_APP_MENU As String = "APPLICATION SELECTION MENU"
' ... (other screen constants as needed for navigation later)

' --- Script Title for MsgBoxes ---
Private Const SCRIPT_TITLE As String = "Focused Interest Amendment"

' --- Main Processing Sub ---
Sub ProcessSingleAmendment_Focus()
    Dim ws As Worksheet
    Dim sortCode As String, accountNumber As String, brand As String
    Dim success As Boolean

    ' 1. Connect to Reflection and get the target session
    '    Using the logic that previously succeeded in getting all objects set.
    If Not ConnectAndSetScreen("NTS Back Office - Prod.rd3x") Then
        MsgBox "Failed to connect to Reflection session and set screen object." & vbCrLf & _
               "Ensure 'NTS Back Office - Prod.rd3x' is open.", vbCritical, SCRIPT_TITLE
        Exit Sub
    End If
    Debug.Print "ProcessSingle: Successfully connected and RScreen is set."

    ' 2. Set worksheet and get data for ONE test row
    Set ws = ThisWorkbook.ActiveSheet ' Or ThisWorkbook.Worksheets("SheetName")
    
    ' --- FOR TESTING - Process only one specific row, e.g., row 2 ---
    Dim testRow As Long
    testRow = 2 ' <<<< Change this to your desired test row number
    ' ---

    If ws.Cells(testRow, "A").Value = "" Then
        MsgBox "No data in test row " & testRow & ", Column A.", vbExclamation, SCRIPT_TITLE
        Exit Sub
    End If

    sortCode = Trim(CStr(ws.Cells(testRow, "A").Value))
    accountNumber = Trim(CStr(ws.Cells(testRow, "B").Value))
    brand = UCase(Trim(CStr(ws.Cells(testRow, "C").Value)))

    Debug.Print "-----------------------------------------------------"
    Debug.Print "Processing Excel Row: " & testRow & " | S/C: " & sortCode & " | Acc: " & accountNumber & " | Brand: " & brand

    If sortCode = "" Or accountNumber = "" Or brand = "" Then
        Debug.Print "Skipped row " & testRow & " - Missing data."
        ws.Cells(testRow, "H").Value = "Skipped - Missing Data"
        Exit Sub
    End If

    ' 3. Perform navigation for the current account
    '    (We will build this function next, for now, just confirm connection)
    success = NavigateToTargetScreen_Focus(sortCode, accountNumber, brand) ' Placeholder name

    If success Then
        Debug.Print "Successfully navigated to INTEREST AMENDMENTS screen for row " & testRow
        ws.Cells(testRow, "H").Value = "Navigated - OK"
        MsgBox "PAUSED: On INTEREST AMENDMENTS screen for S/C: " & sortCode & ", A/N: " & accountNumber, vbInformation, SCRIPT_TITLE
        ' Placeholder for actual amendment logic
    Else
        Debug.Print "Navigation FAILED for row " & testRow
        ws.Cells(testRow, "H").Value = "Navigation Failed"
    End If

    CleanUpReflectionObjects_Focus
    MsgBox "Finished processing test row " & testRow, vbInformation, SCRIPT_TITLE
End Sub

' --- PROVEN Connection Logic (based on V8/V9 successful debug) ---
Private Function ConnectAndSetScreen(ByVal targetSessionFilePart As String) As Boolean
    On Error GoTo ErrorHandler
    ConnectAndSetScreen = False

    Debug.Print "ConnectFocus: Attempting GetObject(""Reflection Workspace"")"
    On Error Resume Next ' Allow GetObject to fail if Reflection not running
    Set RApp = GetObject("Reflection Workspace")
    If Err.Number <> 0 Or RApp Is Nothing Then
        Err.Clear
        Debug.Print "ConnectFocus: GetObject(""Reflection Workspace"") FAILED. Ensure Reflection is running."
        Exit Function
    End If
    Debug.Print "ConnectFocus: RApp obtained. TypeName: " & TypeName(RApp)
    On Error GoTo ErrorHandler ' Restore main error handler

    Set RFrame = RApp.GetObject("Frame")
    If RFrame Is Nothing Then Debug.Print "ConnectFocus: RFrame is Nothing.": Exit Function
    Debug.Print "ConnectFocus: RFrame obtained. TypeName: " & TypeName(RFrame)

    If Not RFrame.Visible Then RFrame.Visible = True
    RFrame.Activate ' Brings Reflection Workspace to front

    Debug.Print "ConnectFocus: Attempting RFrame.GetViewByTitleText(""" & targetSessionFilePart & """)..."
    On Error Resume Next ' For GetViewByTitleText
    Set RView = RFrame.GetViewByTitleText(targetSessionFilePart)
    If Err.Number <> 0 Or RView Is Nothing Then
        Err.Clear
        Debug.Print "ConnectFocus: RFrame.GetViewByTitleText FAILED. Error: " & Err.Description
        Exit Function
    End If
    Debug.Print "ConnectFocus: RView obtained. Title: '" & RView.TitleText & "'. TypeName: " & TypeName(RView)
    On Error GoTo ErrorHandler

    ' Skipping RView.Activate as it previously caused Error 438
    ' and RFrame.Activate + GetViewByTitleText should suffice if session is already open.

    Debug.Print "ConnectFocus: Attempting Set RTerminal = RView.Control..."
    On Error Resume Next ' For RView.Control
    Set RTerminal = RView.Control
    If Err.Number <> 0 Or RTerminal Is Nothing Then
        Debug.Print "ConnectFocus: Error on Set RTerminal = RView.Control. Error " & Err.Number & ": " & Err.Description
        Err.Clear
        Exit Function
    End If
    Debug.Print "ConnectFocus: RTerminal obtained. TypeName: " & TypeName(RTerminal)
    On Error GoTo ErrorHandler

    Debug.Print "ConnectFocus: Attempting Set RScreen = RTerminal.Screen..."
    On Error Resume Next ' For RTerminal.Screen
    Set RScreen = RTerminal.Screen
    If Err.Number <> 0 Or RScreen Is Nothing Then
        Debug.Print "ConnectFocus: Error on Set RScreen = RTerminal.Screen. Error " & Err.Number & ": " & Err.Description
        Err.Clear
        Exit Function
    End If
    Debug.Print "ConnectFocus: RScreen obtained. TypeName: " & TypeName(RScreen)
    On Error GoTo ErrorHandler
    
    ' Optional settings - allow them to fail gracefully
    On Error Resume Next
    RTerminal.DisableKeystrokeProductivity = True
    If Err.Number <> 0 Then Debug.Print "ConnectFocus: Info - Error DisableKeystrokeProductivity: " & Err.Description: Err.Clear
    RTerminal.DisableScreenHistory = True
    If Err.Number <> 0 Then Debug.Print "ConnectFocus: Info - Error DisableScreenHistory: " & Err.Description: Err.Clear
    On Error GoTo ErrorHandler

    ConnectAndSetScreen = True
    Debug.Print "ConnectFocus: All core Reflection objects (RApp, RFrame, RView, RTerminal, RScreen) set successfully."
    Exit Function
ErrorHandler:
    Debug.Print "ConnectAndSetScreen Error " & Err.Number & ": " & Err.Description
    ConnectAndSetScreen = False
End Function

Private Sub CleanUpReflectionObjects_Focus()
    Set RScreen = Nothing
    Set RTerminal = Nothing
    Set RView = Nothing
    Set RFrame = Nothing
    Set RApp = Nothing
    Debug.Print "Focused Reflection objects released."
End Sub

' --- Placeholder for Navigation Logic ---
Private Function NavigateToTargetScreen_Focus(ByVal sc As String, ByVal acct As String, ByVal brnd As String) As Boolean
    Debug.Print "NavigateToTargetScreen_Focus: Called for S/C=" & sc & ", Acct=" & acct & ", Brand=" & brnd
    If RScreen Is Nothing Then
        Debug.Print "NavigateToTargetScreen_Focus: RScreen object is not available. Cannot navigate."
        NavigateToTargetScreen_Focus = False
        Exit Function
    End If

    ' For now, just verify we are on App Menu as per manual setup instruction
    Call WaitReady_Focus(100)
    If Not VerifyScreen_Focus(SCREEN_APP_MENU, 1, 28) Then
         Debug.Print "NavigateToTargetScreen_Focus: Not on " & SCREEN_APP_MENU & ". Please ensure you start on this screen."
         MsgBox "Macro expected to start on '" & SCREEN_APP_MENU & "'. Current screen is different.", vbExclamation, SCRIPT_TITLE
         NavigateToTargetScreen_Focus = False
         Exit Function
    End If
    Debug.Print "NavigateToTargetScreen_Focus: Confirmed on " & SCREEN_APP_MENU

    ' >>>>>>> INSERT THE PROVEN NAVIGATION STEPS FROM YOUR InterestCheck HERE <<<<<<<
    ' (TERM ALL, confirmCode, Option 19, Option 01, Master Index entries, etc.)
    ' Use SendData_Focus and VerifyScreen_Focus helpers.
    ' Example for one step:
    ' Call SendData_Focus("TERM ALL", 21, 13)
    ' If Not VerifyScreen_Focus("EXPECTED_TEXT_AFTER_TERM_ALL", R, C) Then Exit Function
    ' ... and so on for all navigation steps to SCREEN_INTEREST_AMENDMENTS
    ' This part needs to be carefully rebuilt based on the sequence you know works.

    ' For now, assume navigation to the final screen would succeed IF steps were here
    ' And we are just testing the connection.
    ' Replace with actual navigation and verification:
    Debug.Print "NavigateToTargetScreen_Focus: Placeholder - Assuming navigation to INTEREST AMENDMENTS would occur here."
    MsgBox "ConnectAndSetScreen worked! RScreen is available." & vbCrLf & _
           "Navigation steps would follow here. For now, this is the end of the test for one row.", vbInformation
           
    NavigateToTargetScreen_Focus = True ' TEMPORARY - CHANGE THIS AFTER ADDING REAL NAVIGATION
End Function

' --- Minimalist Screen Interaction Helpers ---
Private Sub WaitReady_Focus(Optional settleTimeMs As Long = 200, Optional timeoutMs As Long = 10000)
    If RScreen Is Nothing Then Exit Sub
    Dim startTime As Date: startTime = Now
    Do While RScreen.OIA.XStatus <> 0
        If DateDiff("s", startTime, Now) * 1000 > timeoutMs Then Exit Do
        RScreen.WaitForHostSettle 100, 50: DoEvents
    Loop
    RScreen.WaitForHostSettle settleTimeMs, timeoutMs
End Sub

Private Function VerifyScreen_Focus(expectedText As String, rowNum As Long, colNum As Long, Optional ByVal length As Long = 0) As Boolean
    If RScreen Is Nothing Then VerifyScreen_Focus = False: Exit Function
    Call WaitReady_Focus(100)
    If length = 0 Then length = Len(expectedText)
    Dim actualText As String: actualText = Trim(RScreen.GetText(rowNum, colNum, length))
    If UCase(actualText) = UCase(expectedText) Then VerifyScreen_Focus = True Else VerifyScreen_Focus = False
    If Not VerifyScreen_Focus Then Debug.Print "VerifyScreen_Focus FAILED: Expected '" & expectedText & "', Found '" & actualText & "' at R" & rowNum & "C" & colNum
End Function

Private Sub SendData_Focus(data As String, rowNum As Long, colNum As Long, Optional sendTransmit As Boolean = True)
    If RScreen Is Nothing Then Exit Sub
    Call WaitReady_Focus(100)
    RScreen.PutText2 data, rowNum, colNum
    If sendTransmit Then RScreen.SendControlKey ControlKeyCode_Transmit: Call WaitReady_Focus(500)
End Sub
