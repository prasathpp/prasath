Attribute VB_Name = "mod_PEVE_ReflectionCommon"
Option Explicit

'''''''''''''''''''''''''''''''''''Attachmate Declaration''''''''''''''''''''''''''''''''''''''''''''''
Public obScreen As Attachmate_Reflection_Objects_Emulation_IbmHosts.IbmScreen
Public ibmTerminal As Attachmate_Reflection_Objects_Emulation_IbmHosts.ibmTerminal
Public app As Attachmate_Reflection_Objects_Framework.ApplicationObject ' Reflection Workspace Application
Public ThisFrame As Attachmate_Reflection_Objects.frame                 ' The main Reflection window frame
Public sessionName As String                                            ' Name of the specific session file (e.g., "NTS Back Office - Prod.rd3x")
Public Mysession As Variant ' Used to extract sessionName from path
Public osView As Attachmate_Reflection_Objects.View                     ' Represents an open session window/tab

' --- Variables used by ConnectExtra, should be declared at module level if not passed ---
' These were Public in your General Declarations. If that module is separate and not imported,
' they need to be handled (e.g., pass as params, or re-declare here if this module is standalone for connection)
Public strBoPath As String ' Full path to the .rd3x session file
Private stEDPFile As String ' Temporary variable for file path in ConnectExtra


' --- Assumed from your General Declarations, used in MsgBox in BackToMasterIndex ---
' Public sPrj_Name As String ' If this is used, ensure it's defined globally or pass it.
                             ' For this example, I'll use a generic title if sPrj_Name isn't available.
Private Const COMMON_SCRIPT_TITLE As String = "Reflection Common" ' Fallback title

'===============================================================================
' DESCRIPTION:      This sub is used to connect to an Attachmate Reflection session.
'                   It initializes the public obScreen object.
'===============================================================================
Sub ConnectExtra()
    On Error GoTo MyHandler

    ' Ensure Sheet4 exists and txtEDPPath is a valid TextBox name on that sheet
    ' Using CodeName (e.g., Sheet4) is generally robust.
    If Sheet4.txtEDPPath.Text = "" Then ' Assuming Sheet4 is the CodeName of your sheet
        stEDPFile = Application.GetOpenFilename(Title:="Please choose a Reflection Session: Backoffice", fileFilter:="Reflection Files *.rd3x (*.rd3x),")
        If stEDPFile = "False" Then ' User cancelled
            MsgBox "Reflection session selection cancelled. Exiting.", vbExclamation, COMMON_SCRIPT_TITLE
            End ' Critical to stop if no session
        End If
    Else
        stEDPFile = Sheet4.txtEDPPath.Text
    End If

    If strBoPath = "" Then
       strBoPath = stEDPFile
    End If
    
    If strBoPath = "" Then
        MsgBox "Reflection session file path (strBoPath) is not set. Cannot connect.", vbCritical, COMMON_SCRIPT_TITLE
        End
    End If

    Mysession = Split(strBoPath, "\")
    sessionName = Mysession(UBound(Mysession)) ' e.g., "NTS Back Office - Prod.rd3x"
    
    ' Get existing Reflection Workspace or create it
    On Error Resume Next
    Set app = GetObject(, "ReflectionWorkspace.Application") ' Try to get running instance
    If Err.Number <> 0 Then
        Err.Clear
        Debug.Print "ConnectExtra: Reflection Workspace not running, attempting to create new instance."
        Set app = CreateObject("ReflectionWorkspace.Application")
        If Err.Number <> 0 Or app Is Nothing Then
            MsgBox "Could not connect to or create Reflection Workspace." & vbCrLf & Err.Description, vbCritical, COMMON_SCRIPT_TITLE
            End
        End If
    End If
    On Error GoTo MyHandler ' Restore specific error handler for subsequent operations

    If app Is Nothing Then
        MsgBox "Failed to initialize Reflection Workspace application object.", vbCritical, COMMON_SCRIPT_TITLE
        End
    End If
    
    With app
         Do While .IsInitialized = False
           .Wait 200 ' Milliseconds
         Loop
         Set ThisFrame = .GetObject("Frame")
         If Not ThisFrame.Visible Then ThisFrame.Visible = True ' Make sure it's visible
         ThisFrame.Activate ' Bring to front
    End With
    
    ' Try to get the view; if not open, try to open it
    On Error Resume Next
    Set osView = ThisFrame.GetViewByTitleText(sessionName) ' Check if session window is already open
    If Err.Number <> 0 Or osView Is Nothing Then
        Err.Clear
        Debug.Print "ConnectExtra: View '" & sessionName & "' not found by title. Attempting to create/open view with path: " & strBoPath
        Set osView = ThisFrame.CreateView(strBoPath) ' Open the session file
        If Err.Number <> 0 Or osView Is Nothing Then
             MsgBox "Failed to open or find Reflection session: " & sessionName & vbCrLf & "Path: " & strBoPath & vbCrLf & Err.Description, vbCritical, COMMON_SCRIPT_TITLE
             End
        End If
        ' Wait for the newly created view to connect if it was just opened
        Dim tempTerminal As Object
        Set tempTerminal = osView.Control
        If Not tempTerminal Is Nothing Then
            Dim connectStartTime As Date
            connectStartTime = Now
            Do While Not tempTerminal.IsConnected
                If DateDiff("s", connectStartTime, Now) > 30 Then ' 30 second timeout for connection
                    MsgBox "Timeout waiting for session '" & sessionName & "' to connect to host.", vbExclamation, COMMON_SCRIPT_TITLE
                    End
                End If
                app.Wait 500 ' Wait before re-checking connection status
            Loop
            Debug.Print "ConnectExtra: Session '" & sessionName & "' is connected to host."
        Else
            MsgBox "Failed to get terminal control for new view: " & sessionName, vbCritical, COMMON_SCRIPT_TITLE
            End
        End If
        Set tempTerminal = Nothing
    End If
    On Error GoTo MyHandler ' Restore error handler

    If osView Is Nothing Then
        MsgBox "Could not obtain the Reflection session view: " & sessionName, vbCritical, COMMON_SCRIPT_TITLE
        End
    End If
    
    osView.Activate ' Ensure the specific session view is active

    Set ibmTerminal = osView.Control
    Set obScreen = ibmTerminal.Screen
    
    If obScreen Is Nothing Then
        MsgBox "Failed to set the obScreen object. Cannot interact with session.", vbCritical, COMMON_SCRIPT_TITLE
        End
    End If

    ibmTerminal.DisableKeystrokeProductivity = True
    ibmTerminal.DisableScreenHistory = True
    
    Debug.Print "ConnectExtra: Successfully connected to session and set obScreen."
    Exit Sub
                         
MyHandler:
    MsgBox "Error in ConnectExtra:" & vbCrLf & Err.Number & ": " & Err.Description & _
           vbCrLf & vbCrLf & "Session targeted: " & sessionName, vbCritical, "Reflection Connection Error"
    End ' Stop execution on unhandled error in ConnectExtra
End Sub

'===============================================================================
' DESCRIPTION:      This function is used to validate screen text.
' RETURN VALUE:     TRUE if text matches, FALSE otherwise.
'===============================================================================
Function Validate_Screen(strText As String, iRow As Integer, iCol As Integer, iLen As Integer) As Boolean
    If obScreen Is Nothing Then
        Debug.Print "Validate_Screen: obScreen object is not set!"
        Validate_Screen = False
        Exit Function
    End If
    
    ' Wait for screen to be ready before reading text
    Dim startTime As Date
    startTime = Now
    Do While obScreen.OIA.XStatus <> 0
        If DateDiff("s", startTime, Now) > 10 Then ' 10 second timeout for screen ready
            Debug.Print "Validate_Screen: Timeout waiting for XStatus before reading text."
            Validate_Screen = False
            Exit Function
        End If
        obScreen.WaitForHostSettle 50, 20  ' Milliseconds
        DoEvents
    Loop
    
    Dim actualText As String
    actualText = VBA.Trim(obScreen.GetText(iRow, iCol, iLen))
    
    If UCase(actualText) = UCase(VBA.Trim(strText)) Then
        Validate_Screen = True
    Else
        Validate_Screen = False
        Debug.Print "Validate_Screen FAILED: Expected=[" & strText & "], Found=[" & actualText & "] at R" & iRow & "C" & iCol & "L" & iLen
    End If
End Function

'===============================================================================
' DESCRIPTION:      This sub waits until the Back Office screen is ready and handles security pop-ups.
'===============================================================================
Sub WaitForScreen()
    If obScreen Is Nothing Then
        Debug.Print "WaitForScreen: obScreen object is not set!"
        Exit Sub
    End If

    Dim startTime As Date
    startTime = Now
    Do While obScreen.OIA.XStatus <> 0
        If DateDiff("s", startTime, Now) > 20 Then ' 20 second timeout for screen ready
            Debug.Print "WaitForScreen: Timeout waiting for XStatus."
            Exit Sub ' Or raise an error
        End If
        obScreen.WaitForHostSettle 50, 20  ' Milliseconds
        DoEvents
    Loop
    ' Additional settle time can be useful after XStatus is 0 but before host is fully done painting
    obScreen.WaitForHostSettle 100, 50 ' Short extra settle

    Call Check_SecurityScreen
End Sub

'===============================================================================
' DESCRIPTION:      This sub checks for and handles the "SECURITY REMINDER" screen.
'===============================================================================
Sub Check_SecurityScreen()
    If obScreen Is Nothing Then Exit Sub

    ' Coordinates for "SECURITY REMINDER": Row 1, Col 29, Length 20 (as per your original)
    ' Assuming "SECURITY REMINDER" is the exact text for the constant.
    Const SCREEN_SECURITY_TITLE As String = "SECURITY REMINDER"
    If Validate_Screen(SCREEN_SECURITY_TITLE, 1, 29, Len(SCREEN_SECURITY_TITLE)) = True Then
        Debug.Print "Check_SecurityScreen: Security Reminder found. Acknowledging..."
        obScreen.PutText2 "Y", 22, 11 ' Assuming "Y" at R22,C11
        obScreen.SendControlKey ControlKeyCode_Transmit
        Call WaitForScreen ' Wait for the screen to change after acknowledging
    End If
End Sub

'===============================================================================
' DESCRIPTION:      This sub navigates back to the "MASTER INDEX" screen.
'===============================================================================
Sub BackToMasterIndex()
    If obScreen Is Nothing Then Exit Sub

    Dim iCount As Integer
    Dim targetScreenText As String
    targetScreenText = "MASTER INDEX" ' As per your original code's check

    iCount = 0
    Call WaitForScreen ' Ensure current screen is ready before sending F2

    ' Text "MASTER INDEX" is checked at R1, C27, L13 in your original
    Do While Trim(obScreen.GetText(1, 27, 13)) <> targetScreenText
        obScreen.SendControlKey ControlKeyCode_F2
        Debug.Print "BackToMasterIndex: Sent F2 (Attempt " & iCount + 1 & ")"
        Call WaitForScreen ' Wait for screen to change
        iCount = iCount + 1
        If iCount > 10 Then ' Max 10 attempts to prevent infinite loop
            ' Assuming sPrj_Name is a globally defined variable for your project name
            ' If not, replace sPrj_Name with a string like "Reflection Automation"
            Dim msgBoxTitle As String
            On Error Resume Next ' In case sPrj_Name isn't defined
            msgBoxTitle = sPrj_Name
            If Err.Number <> 0 Then msgBoxTitle = "Back Office Error"
            On Error GoTo 0
            MsgBox "Unexpected Back Office Error! Could not return to MASTER INDEX after " & iCount & " F2 presses.", vbCritical, msgBoxTitle
            End ' Critical failure
        End If
    Loop
    Debug.Print "BackToMasterIndex: Successfully returned to MASTER INDEX."
End Sub
