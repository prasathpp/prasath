' Attribute VB_Name = "mod_NewBackOfficeAutomation_V2"
Option Explicit

' --- Attachmate Reflection Object Declarations ---
Public objReflectionApp As Object ' ReflectionWorkspace.Application
Public objFrame As Object         ' Attachmate_Reflection_Objects.Frame
Public objView As Object          ' Attachmate_Reflection_Objects.View
Public objTerminal As Object      ' Attachmate_Reflection_Objects_Emulation_IbmHosts.ibmTerminal
Public objScreen As Object        ' Attachmate_Reflection_Objects_Emulation_IbmHosts.IbmScreen

' --- Constants ---
' *** IMPORTANT: This is the PARTIAL title or unique part of the session file name we're looking for. ***
Private Const TARGET_SESSION_FILENAME_PART As String = "NTS Back Office - Prod.rd3x"
' If the full window title is consistently "NTS Back Office - Prod.rd3x" then you can use that.
' But using the filename part is often more reliable if Reflection Workspace adds prefixes/suffixes.

Private Const TARGET_SCREEN_TEXT As String = "APPLICATION SELECTION MENU"
Private Const TARGET_SCREEN_ROW As Long = 1
Private Const TARGET_SCREEN_COL As Long = 28
Private Const TARGET_SCREEN_LENGTH As Long = 30

Private Const INPUT_COMMAND As String = "TERM ALL"
Private Const INPUT_ROW As Long = 21
Private Const INPUT_COL As Long = 13

Private Const MAX_NAVIGATION_ATTEMPTS As Integer = 10

' --- Main Subroutine to Perform the Action ---
Sub ExecuteTermAllOnBackOffice_V2()
    On Error GoTo ErrorHandler

    ' 1. Connect to and activate the existing Reflection session
    If Not ConnectAndActivateSession_V2(TARGET_SESSION_FILENAME_PART) Then ' Pass the filename part
        MsgBox "Could not connect to or activate the session containing: " & TARGET_SESSION_FILENAME_PART & vbCrLf & _
               "Please ensure the session is open and the title contains this text.", vbCritical, "Session Connection Error"
        GoTo Cleanup
    End If

    ' 2. Navigate to the "APPLICATION SELECTION MENU"
    If Not NavigateToApplicationSelectionMenu_V2() Then
        MsgBox "Failed to navigate to the '" & TARGET_SCREEN_TEXT & "' screen after " & MAX_NAVIGATION_ATTEMPTS & " attempts.", vbExclamation, "Navigation Error"
        GoTo Cleanup
    End If

    ' 3. Screen is ready, perform the input
    Call WaitForScreenReady_V2(1000)
    objScreen.PutText2 INPUT_COMMAND, INPUT_ROW, INPUT_COL
    objScreen.SendControlKey ControlKeyCode_Transmit
    
    Call WaitForScreenReady_V2(5000)

    MsgBox "'" & INPUT_COMMAND & "' entered successfully on '" & TARGET_SCREEN_TEXT & "'.", vbInformation, "Action Completed"

Cleanup:
    Set objScreen = Nothing
    Set objTerminal = Nothing
    Set objView = Nothing
    Set objFrame = Nothing
    Set objReflectionApp = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "An unexpected error occurred: " & vbCrLf & _
           "Error Number: " & Err.Number & vbCrLf & _
           "Description: " & Err.Description, vbCritical, "VBA Runtime Error"
    Resume Cleanup
End Sub

' --- Helper Function: Connect to an existing and activate Reflection Session (Version 2) ---
Private Function ConnectAndActivateSession_V2(ByVal uniquePartOfSessionTitle As String) As Boolean
    On Error GoTo ConnectErrorHandler
    ConnectAndActivateSession_V2 = False

    Dim viewFound As Boolean
    Dim tempView As Object ' To iterate through views

    ' Get the existing Reflection Workspace Application object
    Set objReflectionApp = GetObject(, "ReflectionWorkspace.Application")
    If objReflectionApp Is Nothing Then
        Debug.Print "Reflection Workspace application not found."
        Exit Function
    End If
    
    Do While objReflectionApp.IsInitialized = False
        objReflectionApp.Wait 200
    Loop

    Set objFrame = objReflectionApp.GetObject("Frame")
    If objFrame Is Nothing Then
        Debug.Print "Reflection Frame object not found."
        Exit Function
    End If

    If Not objFrame.Visible Then
        objFrame.Visible = True
    End If
    objFrame.Activate ' Ensure the main Reflection window is active

    ' Iterate through all open views to find the one containing the unique part of the title
    viewFound = False
    If objFrame.Views.Count > 0 Then
        Debug.Print "Searching for session containing: '" & uniquePartOfSessionTitle & "'"
        For Each tempView In objFrame.Views
            Debug.Print "Checking View: '" & tempView.TitleText & "'"
            ' Use InStr with vbTextCompare for a case-insensitive substring match
            If InStr(1, tempView.TitleText, uniquePartOfSessionTitle, vbTextCompare) > 0 Then
                Set objView = tempView
                viewFound = True
                Debug.Print "Found matching session: '" & objView.TitleText & "'"
                Exit For
            End If
        Next tempView
    Else
        Debug.Print "No views are currently open in Reflection Workspace."
    End If

    If Not viewFound Or objView Is Nothing Then
        Debug.Print "Session containing '" & uniquePartOfSessionTitle & "' not found after checking all views."
        Exit Function
    End If

    objView.Activate ' Activate the specific session view

    Set objTerminal = objView.Control
    Set objScreen = objTerminal.Screen

    If objTerminal Is Nothing Or objScreen Is Nothing Then
        Debug.Print "Failed to get Terminal or Screen object from the found view."
        Exit Function
    End If

    objTerminal.DisableKeystrokeProductivity = True
    objTerminal.DisableScreenHistory = True

    ConnectAndActivateSession_V2 = True
    Exit Function

ConnectErrorHandler:
    Debug.Print "Error in ConnectAndActivateSession_V2: " & Err.Description
    ConnectAndActivateSession_V2 = False
End Function

' --- Helper Sub: Wait for the screen to be ready (Version 2) ---
Private Sub WaitForScreenReady_V2(Optional ByVal settleTimeoutMilliseconds As Long = 2000)
    If objScreen Is Nothing Then Exit Sub
    Dim startTime As Date
    startTime = Now
    Do While objScreen.OIA.XStatus <> 0
        If DateDiff("s", startTime, Now) * 1000 > settleTimeoutMilliseconds Then
            Debug.Print "Timeout waiting for XStatus."
            Exit Do
        End If
        objScreen.WaitForHostSettle 100, 50
        DoEvents
    Loop
    objScreen.WaitForHostSettle 500, 200
End Sub

' --- Helper Function: Navigate to the Application Selection Menu using Page Down (Version 2) ---
Private Function NavigateToApplicationSelectionMenu_V2() As Boolean
    Dim attempts As Integer
    Dim currentScreenText As String
    NavigateToApplicationSelectionMenu_V2 = False
    If objScreen Is Nothing Then
        Debug.Print "Screen object not available for navigation."
        Exit Function
    End If

    For attempts = 1 To MAX_NAVIGATION_ATTEMPTS
        Call WaitForScreenReady_V2(3000)
        currentScreenText = Trim(objScreen.GetText(TARGET_SCREEN_ROW, TARGET_SCREEN_COL, TARGET_SCREEN_LENGTH))
        If UCase(currentScreenText) = UCase(TARGET_SCREEN_TEXT) Then
            NavigateToApplicationSelectionMenu_V2 = True
            Exit Function
        End If
        If attempts < MAX_NAVIGATION_ATTEMPTS Then
            Debug.Print "Attempt " & attempts & ": Not on target screen. Current text: '" & currentScreenText & "'. Sending Page Down."
            objScreen.SendControlKey ControlKeyCode_PageDown
        Else
            Debug.Print "Attempt " & attempts & ": Max attempts reached. Current text: '" & currentScreenText & "'."
        End If
    Next attempts
    Debug.Print "Failed to reach '" & TARGET_SCREEN_TEXT & "' after " & MAX_NAVIGATION_ATTEMPTS & " Page Down attempts."
End Function
