Option Explicit

' Placeholder for a global project name, ensure this is defined somewhere if used in MsgBoxes
' Public Const sPrj_Name As String = "My Automation Project"

Sub ProcessInterestAdjustments_Main()
    Dim Ws_Data As Worksheet
    Dim lastRow As Long
    Dim i As Long

    ' --- CONFIGURATION ---
    Const START_ROW As Long = 2 ' Assuming data starts from row 2
    Const DATA_SHEET_NAME As String = "Sheet1" ' !!! UPDATE THIS to your actual sheet name !!!
    ' --- END CONFIGURATION ---

    On Error GoTo MainErrorHandler

    Set Ws_Data = ThisWorkbook.Worksheets(DATA_SHEET_NAME)

    ' Find the last row with data in Column A (Sort Code)
    lastRow = Ws_Data.Cells(Rows.Count, "A").End(xlUp).Row

    If lastRow < START_ROW Then
        MsgBox "No data found in sheet '" & DATA_SHEET_NAME & "'.", vbInformation, sPrj_Name
        Exit Sub
    End If

    ' Connect to Reflection - ensure obScreen is available after this
    Call ConnectExtra
    If obScreen Is Nothing Then
        MsgBox "Failed to connect to Reflection. Exiting.", vbCritical, sPrj_Name
        Exit Sub
    End If
    Call WaitForScreen ' Initial wait and security check

    ' Loop through each row
    For i = START_ROW To lastRow
        ' Clear previous status for the current row (optional)
        Ws_Data.Range("H" & i & ":J" & i).ClearContents
        
        ' Process the adjustment for the current row
        Call ProcessSingleAdjustment(i, Ws_Data)
        
        ' Check if obScreen became Nothing (e.g. session closed by error in ProcessSingleAdjustment)
        If obScreen Is Nothing Then
             Ws_Data.Range("H" & i).Value = "Critical Error - Session Lost"
             Exit For ' Stop further processing if session is lost
        End If
    Next i

    MsgBox "Processing complete.", vbInformation, sPrj_Name
    Exit Sub

MainErrorHandler:
    MsgBox "An unexpected error occurred in the main sub: " & Err.Description, vbCritical, sPrj_Name
    If Not Ws_Data Is Nothing Then Set Ws_Data = Nothing
End Sub


Function ProcessSingleAdjustment(iRow As Long, Ws_Data As Worksheet) As Boolean
    Dim sortCode As String
    Dim accountNo As String
    Dim iBrand As String
    Dim confirm As String
    
    Dim excel_D_Accrued As Double
    Dim excel_E_Cutoff As Double
    Dim excel_F_Applied_Debit As Double
    Dim excel_G_Applied_Credit As Double
    
    Dim Carry_Over_Cutoff_To_Applied_Amount As Double
    Dim Total_Applied_Debtor_Amount As Double
    
    Dim screenType As String ' "BC", "Normal", "Unknown"
    Dim tempStr As String
    Dim loopCounter As Integer

    ' Initialize
    ProcessSingleAdjustment = False ' Assume failure until success
    Carry_Over_Cutoff_To_Applied_Amount = 0
    
    On Error GoTo ErrorHandler_Adjustment ' Basic error trapping for this function

    ' --- Read data from Excel for the current row ---
    sortCode = Format(Ws_Data.Range("A" & iRow).Value, "000000")
    accountNo = Format(Ws_Data.Range("B" & iRow).Value, "00000000")
    iBrand = UCase(Trim(CStr(Ws_Data.Range("C" & iRow).Value)))
    
    excel_D_Accrued = Val(CStr(Ws_Data.Range("D" & iRow).Value))
    excel_E_Cutoff = Val(CStr(Ws_Data.Range("E" & iRow).Value))
    excel_F_Applied_Debit = Val(CStr(Ws_Data.Range("F" & iRow).Value))
    excel_G_Applied_Credit = Val(CStr(Ws_Data.Range("G" & iRow).Value))

    ' Check if essential data is present
    If sortCode = "000000" Or accountNo = "00000000" Or iBrand = "" Then
        Ws_Data.Range("H" & iRow).Value = "Missing Sort Code, Account, or Brand"
        GoTo NextCase_Adjustment
    End If

    ' --- 1. APPLICATION SELECTION MENU ---
    Call WaitForScreen
    obScreen.WaitForHostSettle 500, 200
    If Validate_Screen("APPLICATION SELECTION MENU", 1, 28, 30) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Application Menu. Text: " & obScreen.GetText(1, 28, 30)
        GoTo NextCase_Adjustment
    End If

    If iBrand = "RBS" Or iBrand = "RBG" Or iBrand = "RBI" Or iBrand = "VIR" Then
        confirm = "PRCIR#T#"
    ElseIf iBrand = "NWB" Or iBrand = "CTS" Or iBrand = "NWO" Or iBrand = "IOM" Then
        confirm = "PRCIN#T#"
    ElseIf iBrand = "UBN" Then
        confirm = "PRCIJ#T#"
    ElseIf iBrand = "UBR" Then
        confirm = "PRCIK#T#"
    Else
        Ws_Data.Range("H" & iRow).Value = "Unknown Brand: " & iBrand
        GoTo NextCase_Adjustment
    End If

    obScreen.PutText2 "TERM ALL", 21, 13
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen
    obScreen.PutText2 confirm, 21, 13
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen
    obScreen.WaitForHostSettle 500, 200

    If Validate_Screen("Command not recognized", 20, 36, 30) = True Then
        Ws_Data.Range("H" & iRow).Value = "Brand command not recognized."
        GoTo NextCase_Adjustment
    End If
    
    'INC7235475 handling (from InterestCheck) - ROYAL BANK OF SCOTLAND screen
    If Validate_Screen("ROYAL BANK OF SCOTLAND", 1, 1, 24) = True Then
        obScreen.SendControlKey ControlKeyCode_Transmit
        Call WaitForScreen
        obScreen.WaitForHostSettle 500, 200
        
        If Validate_Screen("", 1, 1, 80) = True Then 'Check for potentially blank screen after
            loopCounter = 1
            Do
                If Validate_Screen("", 1, 1, 80) = True Then
                    obScreen.PutText2 "STAR", 1, 1
                    obScreen.SendControlKey ControlKeyCode_Transmit
                    Call WaitForScreen
                    obScreen.WaitForHostSettle 500, 200
                Else
                    If Validate_Screen("ROYAL BANK OF SCOTLAND", 1, 1, 24) = True Then
                        obScreen.SendControlKey ControlKeyCode_Transmit
                        Call WaitForScreen
                        obScreen.WaitForHostSettle 500, 200
                    End If
                End If
                obScreen.WaitForHostSettle 500, 200
                loopCounter = loopCounter + 1
            Loop While Validate_Screen("Option Handler Function Screen", 1, 26, 35) = False And loopCounter <= 10
            If Validate_Screen("Option Handler Function Screen", 1, 26, 35) = False Then
                 Ws_Data.Range("H" & iRow).Value = "Failed to navigate past STAR screen."
                 GoTo NextCase_Adjustment
            End If
        End If
    End If

    ' --- 2. Option Handler Function Screen ---
    If Validate_Screen("Option Handler Function Screen", 1, 26, 35) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Option Handler. Text: " & obScreen.GetText(1, 26, 35)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "19", 21, 16
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 3. BACK OFFICE SYSTEM ---
    If Validate_Screen("BACK OFFICE SYSTEM", 1, 7, 20) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Back Office System. Text: " & obScreen.GetText(1, 7, 20)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "01", 22, 16
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 4. MASTER INDEX ---
    If Trim(obScreen.GetText(1, 28, 12)) <> "MASTER INDEX" Then ' As per your screenshot, title starts at 28
         ' Alternative check from BackToMasterIndex if needed: If Trim(obScreen.GetText(1, 27, 13)) <> "MASTER INDEX" Then
        Ws_Data.Range("H" & iRow).Value = "Not on Master Index. Text: " & obScreen.GetText(1, 28, 12)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "20", 22, 8
    obScreen.PutText2 sortCode, 22, 74
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 5. FILE MAINTENANCE INPUT INDEX ---
    If Trim(obScreen.GetText(1, 21, 40)) <> "FILE MAINTENANCE INPUT INDEX" Then
        Ws_Data.Range("H" & iRow).Value = "Not on File Maint Input Index. Text: " & obScreen.GetText(1, 21, 40)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "20", 22, 8   ' Option for INTERNAL TRANSACTIONS
    obScreen.PutText2 accountNo, 22, 21 ' Account Number
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 6. INTERNAL TRANSACTIONS ---
    If Validate_Screen("INTERNAL TRANSACTIONS", 1, 19, 21) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Internal Transactions. Text: " & obScreen.GetText(1, 19, 21)
        GoTo NextCase_Adjustment
    End If
    obScreen.PutText2 "04", 22, 8  ' Option for INTEREST AMENDMENTS
    obScreen.SendControlKey ControlKeyCode_Transmit
    Call WaitForScreen

    ' --- 7. INTEREST AMENDMENTS ---
    If Validate_Screen("INTEREST AMENDMENTS", 1, 27, 19) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Not on Interest Amendments. Text: " & obScreen.GetText(1, 27, 19)
        GoTo NextCase_Adjustment
    End If

    ' --- Distinguish Screen Type ---
    screenType = "Unknown"
    tempStr = Trim(obScreen.GetText(3, 42, 16)) ' Read a bit longer to catch "BUSINESS CURRENT" fully
    If tempStr = "BUSINESS CURRENT" Then
        screenType = "BC"
    Else
        tempStr = Trim(obScreen.GetText(3, 42, 14)) ' Read for "SELECT ACCOUNT"
        If tempStr = "SELECT ACCOUNT" Then
            screenType = "Normal"
        End If
    End If

    If screenType = "Unknown" Then
        Ws_Data.Range("H" & iRow).Value = "Unknown Interest Amendments screen type. Text at (3,42): " & obScreen.GetText(3, 42, 16)
        GoTo NextCase_Adjustment
    End If

    ' --- Perform Data Entry based on Screen Type ---
    Dim current_screen_arr_val As Double
    Dim current_screen_unar_val As Double
    Dim val_to_input_in_arr As Double
    Dim val_to_input_in_unar As Double
    Dim remaining_excel_val_for_unar As Double

    ' --- Process Column D: Accrued Interest ---
    If excel_D_Accrued > 0 Then
        If screenType = "BC" Then
            obScreen.PutText2 "dec", 8, 31
            obScreen.PutText2 CStr(excel_D_Accrued), 8, 35 ' Ensure CStr or Format for number
            obScreen.PutText2 "01", 8, 47
        ElseIf screenType = "Normal" Then
            current_screen_arr_val = Val(Trim(obScreen.GetText(8, 21, 6)))
            current_screen_unar_val = Val(Trim(obScreen.GetText(9, 21, 6)))
            val_to_input_in_arr = 0
            val_to_input_in_unar = 0

            If current_screen_arr_val > 0 Then
                val_to_input_in_arr = Application.WorksheetFunction.Min(excel_D_Accrued, current_screen_arr_val)
            End If
            remaining_excel_val_for_unar = excel_D_Accrued - val_to_input_in_arr
            If remaining_excel_val_for_unar > 0 And current_screen_unar_val > 0 Then
                val_to_input_in_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_unar, current_screen_unar_val)
            End If

            If val_to_input_in_arr > 0 Then
                obScreen.PutText2 "dec", 8, 31
                obScreen.PutText2 CStr(val_to_input_in_arr), 8, 35
                ' No CODE for Normal Accrued ARR DR INT
            End If
            If val_to_input_in_unar > 0 Then
                obScreen.PutText2 "dec", 9, 31
                obScreen.PutText2 CStr(val_to_input_in_unar), 9, 35
                obScreen.PutText2 "01", 9, 47
            End If
        End If
    End If ' End excel_D_Accrued > 0

    ' --- Process Column E: Cutoff Interest ---
    Dim current_screen_cutoff_arr_val As Double
    Dim current_screen_cutoff_unar_val As Double
    Dim val_to_input_in_cutoff_arr As Double
    Dim val_to_input_in_cutoff_unar As Double
    Dim remaining_excel_val_for_cutoff_unar As Double
    Dim cutoff_deferred As Boolean
    cutoff_deferred = False

    If excel_E_Cutoff > 0 Then
        If screenType = "BC" Then
            obScreen.PutText2 "dec", 12, 31
            obScreen.PutText2 CStr(excel_E_Cutoff), 12, 35
            obScreen.PutText2 "01", 12, 47
        ElseIf screenType = "Normal" Then
            current_screen_cutoff_arr_val = Val(Trim(obScreen.GetText(12, 21, 6)))
            current_screen_cutoff_unar_val = Val(Trim(obScreen.GetText(13, 21, 6)))

            If current_screen_cutoff_arr_val <= 0 And current_screen_cutoff_unar_val <= 0 Then
                Carry_Over_Cutoff_To_Applied_Amount = excel_E_Cutoff
                cutoff_deferred = True
            Else
                val_to_input_in_cutoff_arr = 0
                val_to_input_in_cutoff_unar = 0
                If current_screen_cutoff_arr_val > 0 Then
                    val_to_input_in_cutoff_arr = Application.WorksheetFunction.Min(excel_E_Cutoff, current_screen_cutoff_arr_val)
                End If
                remaining_excel_val_for_cutoff_unar = excel_E_Cutoff - val_to_input_in_cutoff_arr
                If remaining_excel_val_for_cutoff_unar > 0 And current_screen_cutoff_unar_val > 0 Then
                    val_to_input_in_cutoff_unar = Application.WorksheetFunction.Min(remaining_excel_val_for_cutoff_unar, current_screen_cutoff_unar_val)
                End If

                If val_to_input_in_cutoff_arr > 0 Then
                    obScreen.PutText2 "dec", 12, 31
                    obScreen.PutText2 CStr(val_to_input_in_cutoff_arr), 12, 35
                     ' No CODE for Normal Cutoff ARR DR INT
                End If
                If val_to_input_in_cutoff_unar > 0 Then
                    obScreen.PutText2 "dec", 13, 31
                    obScreen.PutText2 CStr(val_to_input_in_cutoff_unar), 13, 35
                    obScreen.PutText2 "01", 13, 47
                End If
            End If
        End If
    End If ' End excel_E_Cutoff > 0

    ' --- Process Columns F & G: Applied Interest ---
    Total_Applied_Debtor_Amount = excel_F_Applied_Debit + Carry_Over_Cutoff_To_Applied_Amount
    ' Excel_G_Applied_Credit is the Total_Applied_Creditor_Amount

    If screenType = "BC" Then
        ' Applied Creditor (from G)
        If excel_G_Applied_Credit > 0 Then
            obScreen.PutText2 "inc", 14, 31
            obScreen.PutText2 CStr(excel_G_Applied_Credit), 14, 35
            obScreen.PutText2 "01", 14, 47
        End If
        ' Applied Debtor (from F + Carry_Over)
        If Total_Applied_Debtor_Amount > 0 Then
            obScreen.PutText2 "dec", 15, 31
            obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 15, 35
            obScreen.PutText2 "01", 15, 47
        End If
    ElseIf screenType = "Normal" Then
        ' Applied Creditor (from G)
        If excel_G_Applied_Credit > 0 Then
            obScreen.PutText2 "inc", 15, 31
            obScreen.PutText2 CStr(excel_G_Applied_Credit), 15, 35
            obScreen.PutText2 "01", 15, 47
        End If
        ' Applied Debtor (from F + Carry_Over)
        If Total_Applied_Debtor_Amount > 0 Then
            obScreen.PutText2 "dec", 16, 31
            obScreen.PutText2 CStr(Total_Applied_Debtor_Amount), 16, 35
            obScreen.PutText2 "01", 16, 47
        End If
    End If

    ' --- Press Enter 3 times ---
    Dim k As Integer
    For k = 1 To 3
        obScreen.SendControlKey ControlKeyCode_Transmit
        Call WaitForScreen
        obScreen.WaitForHostSettle 300, 100 ' Short settle after transmit
    Next k

    ' --- Navigate Back to APPLICATION SELECTION MENU ---
    ' !!! This key combination needs to be verified for your Reflection setup !!!
    obScreen.SendKeys "<S_ESC>" ' Shift+Esc
    Call WaitForScreen
    obScreen.WaitForHostSettle 500, 200

    If Validate_Screen("APPLICATION SELECTION MENU", 1, 28, 30) <> True Then
        Ws_Data.Range("H" & iRow).Value = "Failed to return to App Menu after Shift+Esc. Text: " & obScreen.GetText(1, 28, 30)
        GoTo NextCase_Adjustment ' Still go to cleanup, but status indicates this issue
    End If

    ' If we reached here, this row was successful
    Ws_Data.Range("H" & iRow).Value = "Completed"
    ProcessSingleAdjustment = True

NextCase_Adjustment:
    ' Update user and timestamp regardless of status if not "Completed" already
    If Ws_Data.Range("H" & iRow).Value = "" Then Ws_Data.Range("H" & iRow).Value = "Unknown Error" ' Default if no error set
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username"))
    Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    Exit Function

ErrorHandler_Adjustment:
    Ws_Data.Range("H" & iRow).Value = "VBA Error: " & Err.Description
    ' Attempt to log user/timestamp even on VBA error before exiting function
    On Error Resume Next ' To prevent error within error handler for these lines
    Ws_Data.Range("I" & iRow).Value = UCase(Environ("username"))
    Ws_Data.Range("J" & iRow).Value = Format(Now, "DD/MM/YYYY HH:MM:SS")
    On Error GoTo 0 ' Restore normal error handling
    
    ' If the error is severe (e.g., obScreen object lost), set obScreen to Nothing
    ' This can be checked by the main loop to stop processing.
    If Err.Number = 91 Or Err.Number = 424 Then ' Object variable not set
        Set obScreen = Nothing
    End If
    
    ProcessSingleAdjustment = False ' Explicitly ensure False on error
End Function
