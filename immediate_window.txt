Sub FormatAccountStatement()
    Dim wb As Workbook
    Dim wsInterest As Worksheet
    Dim wsDays As Worksheet

    Set wb = ActiveWorkbook
    Set wsInterest = wb.Sheets("Interest calculated")
    Set wsDays = wb.Sheets("Interst Days calculated")

    ' Apply AutoFilter and sort by column B
    With wsInterest
        .AutoFilterMode = False
        .Range("A1").AutoFilter
    
        .Range("A1").CurrentRegion.Sort _
            Key1:=.Range("B1"), _
            Order1:=xlAscending, _
            header:=xlYes
    End With



    ' Copy specific columns from "Interst Days calculated"
    wsDays.Range("E:F,H:H,AA:AA").Copy

    ' Paste to column O in "Interest calculated"
    wsInterest.Range("O1").PasteSpecial Paste:=xlPasteValues
    Application.CutCopyMode = False

    ' Remove duplicates in pasted data (columns O to R, based on column P)
    wsInterest.Range("O1:R442").RemoveDuplicates Columns:=2, header:=xlYes

    ' Copy columns C, J to L and paste to column S
    With wsInterest
        .Range("C:C,J:L").Copy
        .Range("S1").PasteSpecial Paste:=xlPasteValues
        Application.CutCopyMode = False

        ' Format header row
        With .Rows("1:1")
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
        End With

        ' Rearranging columns: move S to W, T to S
        .Columns("S:S").Cut
        .Columns("W:W").Insert Shift:=xlToRight
        .Columns("T:T").Cut
        .Columns("S:S").Insert Shift:=xlToRight
    End With
End Sub



Sub FormatSortAccount()

    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim sortCodeValue As Variant
    Dim accountValue As Variant

    ' --- Configuration ---
    Set ws = ActiveSheet ' Or specify a sheet: Set ws = ThisWorkbook.Sheets("Sheet1")

    ' Assuming headers are in row 1, data starts in row 2
    Const START_ROW As Long = 2

    ' Define column letters (or you can use column numbers: 1 for A, 2 for B, etc.)
    Const SORT_CODE_COLUMN As String = "A"
    Const ACCOUNT_COLUMN As String = "B"
    ' --- End Configuration ---

    ' Turn off screen updating for faster execution
    Application.ScreenUpdating = False

    ' Find the last row with data in the Sort Code column (or Account, whichever might be longer)
    ' This assumes column A (Sort Code) will reliably have data to the end.
    ' If not, you might want to check both columns or a known reference column.
    lastRow = ws.Cells(Rows.Count, SORT_CODE_COLUMN).End(xlUp).Row
    If ws.Cells(Rows.Count, ACCOUNT_COLUMN).End(xlUp).Row > lastRow Then
        lastRow = ws.Cells(Rows.Count, ACCOUNT_COLUMN).End(xlUp).Row
    End If

    ' Check if there's any data to process
    If lastRow < START_ROW Then
        MsgBox "No data found to process starting from row " & START_ROW & ".", vbInformation
        Application.ScreenUpdating = True
        Exit Sub
    End If

    ' Loop through each row from START_ROW to the lastRow
    For i = START_ROW To lastRow

        ' --- Process Sort Code ---
        sortCodeValue = ws.Cells(i, SORT_CODE_COLUMN).Value

        ' Check if the cell is not empty
        If Not IsEmpty(sortCodeValue) And Trim(CStr(sortCodeValue)) <> "" Then
            ' Set the cell format to Text first to ensure leading zeros are kept
            ws.Cells(i, SORT_CODE_COLUMN).NumberFormat = "@"
            ' Format the value to be 6 digits with leading zeros
            ws.Cells(i, SORT_CODE_COLUMN).Value = Format(sortCodeValue, "000000")
        Else
            ' Optional: Handle empty cells if needed (e.g., clear them or leave as is)
            ' ws.Cells(i, SORT_CODE_COLUMN).ClearContents
        End If

        ' --- Process Account Number ---
        accountValue = ws.Cells(i, ACCOUNT_COLUMN).Value

        ' Check if the cell is not empty
        If Not IsEmpty(accountValue) And Trim(CStr(accountValue)) <> "" Then
            ' Set the cell format to Text first
            ws.Cells(i, ACCOUNT_COLUMN).NumberFormat = "@"
            ' Format the value to be 8 digits with leading zeros
            ws.Cells(i, ACCOUNT_COLUMN).Value = Format(accountValue, "00000000")
        Else
            ' Optional: Handle empty cells
            ' ws.Cells(i, ACCOUNT_COLUMN).ClearContents
        End If

    Next i

    ' Turn screen updating back on
    Application.ScreenUpdating = True

    MsgBox "Formatting complete for " & (lastRow - START_ROW + 1) & " data rows!", vbInformation

End Sub

