Error applying sensitivity label to 'Book14': Wrong number of arguments or invalid property assignment (LabelName: Restricted, LabelID: b59aeb30-a57c-43c8-b724-82722089b0f7, SiteID: 7c917db0-71f2-438e-9554-388ffcab8764)
Error applying sensitivity label to 'Book15': Wrong number of arguments or invalid property assignment (LabelName: Restricted, LabelID: b59aeb30-a57c-43c8-b724-82722089b0f7, SiteID: 7c917db0-71f2-438e-9554-388ffcab8764)
Error applying sensitivity label to 'Book16': Wrong number of arguments or invalid property assignment (LabelName: Restricted, LabelID: b59aeb30-a57c-43c8-b724-82722089b0f7, SiteID: 7c917db0-71f2-438e-9554-388ffcab8764)
Error applying sensitivity label to 'Book17': Wrong number of arguments or invalid property assignment (LabelName: Restricted, LabelID: b59aeb30-a57c-43c8-b724-82722089b0f7, SiteID: 7c917db0-71f2-438e-9554-388ffcab8764)



Option Explicit ' Enforces variable declaration, good practice!

' --- CONFIGURATION FOR SENSITIVITY LABELS ---
' TODO: USER ACTION REQUIRED!
' Please verify SENSITIVITY_LABEL_NAME_TO_APPLY is the exact display name of the label
' in your Excel UI that corresponds to the IDs below.

' Set this to True if you want the macro to attempt to apply the sensitivity label.
' Set to False to disable this feature entirely.
Private Const AUTO_APPLY_SENSITIVITY_LABEL As Boolean = True

' The exact name of the sensitivity label you want to apply (e.g., "Restricted").
' This MUST match the name as known by your organization's MIP/AIP setup.
' Since .GetLabel().Name failed in your test, manually ensure this is the correct display name.
Private Const SENSITIVITY_LABEL_NAME_TO_APPLY As String = "Restricted" ' <<< VERIFY THIS NAME IS CORRECT

' The Label ID for the sensitivity label.
Private Const SENSITIVITY_LABEL_ID As String = "b59aeb30-a57c-43c8-b724-82722089b0f7" ' <<< From your output

' The Site ID (often Tenant ID) associated with the sensitivity label.
Private Const SENSITIVITY_SITE_ID As String = "7c917db0-71f2-438e-9554-388ffcab8764"  ' <<< From your output
' --- END CONFIGURATION ---

Sub SplitDataIntoMultipleWorkbooks_Improved()
    Dim srcWS As Worksheet ' Source Worksheet
    Dim srcWB As Workbook  ' Source Workbook
    Dim newWB As Workbook  ' Newly created Workbook
    Dim headerRange As Range
    Dim totalRows As Long, rowsPerWorkbook As Long, extraRows As Long
    Dim startRow As Long, endRow As Long
    Dim splitCount As Long, numberOfSplits As Long
    Dim savePath As String
    Dim baseFileName As String
    Dim splitFileName As String
    Dim fldr As FileDialog
    Dim splitsInput As Variant
    Dim attemptLabelApplicationThisRun As Boolean

    ' --- Performance Settings ---
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False ' Suppress overwrite prompts, etc.
    Application.Calculation = xlCalculationManual

    ' --- Determine if we should attempt label application this run ---
    attemptLabelApplicationThisRun = AUTO_APPLY_SENSITIVITY_LABEL
    If attemptLabelApplicationThisRun Then
        If SENSITIVITY_LABEL_ID = "YOUR_LABEL_ID_HERE" Or SENSITIVITY_LABEL_ID = "" Or _
           SENSITIVITY_SITE_ID = "YOUR_SITE_ID_HERE" Or SENSITIVITY_SITE_ID = "" Or _
           SENSITIVITY_LABEL_NAME_TO_APPLY = "" Or _
           SENSITIVITY_LABEL_ID = "b59aeb30-a57c-43c8-b724-82722089b0f7" And SENSITIVITY_LABEL_NAME_TO_APPLY = "Restricted" And SENSITIVITY_LABEL_ID = "YOUR_LABEL_ID_HERE" Then ' Check for unconfigured defaults
            MsgBox "Sensitivity label automation is enabled (AUTO_APPLY_SENSITIVITY_LABEL = True), " & _
                   "but one or more required label constants (Name, ID, SiteID) appear to be " & _
                   "default placeholders or potentially incomplete." & vbCrLf & vbCrLf & _
                   "Please verify these constants at the top of the VBA module are correct for your organization." & vbCrLf & _
                   "If they are already correct, you can ignore this message. " & _
                   "Sensitivity labels will be attempted for this run.", vbExclamation, "Verify Label Configuration"
            ' We will still attempt, but warn the user to double-check the constants.
        End If
    End If

    ' --- Get Source Data ---
    ' Use ThisWorkbook if the macro is in the same workbook as the data.
    Set srcWB = ActiveWorkbook ' Or ActiveWorkbook if appropriate for your setup
    
    On Error Resume Next
    Set srcWS = srcWB.ActiveSheet ' Assumes data is on the active sheet of the workbook containing the macro
    On Error GoTo 0
    If srcWS Is Nothing Then
        MsgBox "Could not determine the source worksheet. Please ensure a sheet is active in the workbook containing this macro.", vbCritical
        GoTo CleanUpAndExit
    End If

    ' Get the total number of rows of data, assuming headers in row 1
    totalRows = srcWS.Cells(srcWS.Rows.Count, 1).End(xlUp).Row

    If totalRows <= 1 Then
        MsgBox "Not enough data to split. Please ensure your data has at least one row of data below the header.", vbExclamation
        GoTo CleanUpAndExit
    End If

    ' --- Get User Input for Number of Splits ---
    splitsInput = Application.InputBox("Enter the number of parts you want to split the data into:", "Split Data", Type:=1) ' Type:=1 ensures a number
    
    If VarType(splitsInput) = vbBoolean And splitsInput = False Then ' User pressed Cancel
        MsgBox "Operation cancelled by user.", vbInformation
        GoTo CleanUpAndExit
    End If
    
    If splitsInput <= 0 Or Int(splitsInput) <> splitsInput Then
        MsgBox "Invalid input. Please enter a positive whole number greater than zero for the number of splits.", vbExclamation
        GoTo CleanUpAndExit
    End If
    numberOfSplits = CLng(splitsInput)

    ' Define the header range (assuming headers are in the first row)
    Set headerRange = srcWS.Rows(1)

    ' Calculate rows per workbook and extra rows if any (excluding header)
    rowsPerWorkbook = (totalRows - 1) \ numberOfSplits
    extraRows = (totalRows - 1) Mod numberOfSplits

    If rowsPerWorkbook = 0 Then
        MsgBox "Not enough rows to split across " & numberOfSplits & " workbooks (each part would get 0 data rows). " & _
               "Please use fewer splits or ensure there is more data.", vbExclamation
        GoTo CleanUpAndExit
    End If

    ' --- Get Save Path from User ---
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder to Save the Split Files"
        .AllowMultiSelect = False
        If .Show <> -1 Then ' -1 means OK was pressed
            MsgBox "Operation cancelled by user (folder selection).", vbInformation
            GoTo CleanUpAndExit
        End If
        savePath = .SelectedItems(1)
    End With
    Set fldr = Nothing

    If Right(savePath, 1) <> Application.PathSeparator Then
        savePath = savePath & Application.PathSeparator
    End If

    If Dir(savePath, vbDirectory) = "" Then
        MsgBox "The selected save path does not exist or is invalid: " & savePath, vbExclamation
        GoTo CleanUpAndExit
    End If

    baseFileName = Left(srcWB.Name, InStrRev(srcWB.Name, ".") - 1)

    ' --- Start Splitting ---
    startRow = 2 ' Data starts from row 2

    For splitCount = 1 To numberOfSplits
        If startRow <= totalRows Then
            Set newWB = Workbooks.Add

            headerRange.Copy Destination:=newWB.Sheets(1).Rows(1)
            
            endRow = startRow + rowsPerWorkbook - 1
            If extraRows > 0 Then
                endRow = endRow + 1
                extraRows = extraRows - 1
            End If

            If endRow > totalRows Then endRow = totalRows
            If startRow > endRow Then Exit For

            srcWS.Rows(startRow & ":" & endRow).Copy Destination:=newWB.Sheets(1).Rows(2)

            splitFileName = savePath & baseFileName & "_part" & splitCount & ".xlsx"

            ' --- Attempt to Apply Sensitivity Label BEFORE SaveAs ---
            If attemptLabelApplicationThisRun Then
                On Error Resume Next
                Dim sl As Object ' Represents the SensitivityLabel object
                Set sl = newWB.SensitivityLabel
                
                If Err.Number = 0 And Not sl Is Nothing Then
                    sl.SetLabel SENSITIVITY_LABEL_ID, SENSITIVITY_LABEL_NAME_TO_APPLY, SENSITIVITY_SITE_ID
                    If Err.Number <> 0 Then
                        Debug.Print "Error applying sensitivity label to '" & newWB.Name & "': " & Err.Description & _
                                    " (LabelName: " & SENSITIVITY_LABEL_NAME_TO_APPLY & ", LabelID: " & SENSITIVITY_LABEL_ID & ", SiteID: " & SENSITIVITY_SITE_ID & ")"
                        ' Optionally inform user once if it fails consistently.
                        ' Example: If Not labelErrorOccurredThen ... MsgBox ... labelErrorOccurredThen = True
                    End If
                Else
                    Debug.Print "SensitivityLabel object not available or errored for '" & newWB.Name & "'. Error: " & Err.Description
                    If attemptLabelApplicationThisRun Then ' Show message only once per run if feature itself is unavailable
                        MsgBox "Could not access the SensitivityLabel feature on workbook '" & newWB.Name & "'. This might be due to your Excel version, " & _
                               "security policies, or incorrect label configuration (IDs/Name)." & vbCrLf & vbCrLf & _
                               "Labels will not be applied automatically for the remainder of this operation.", vbInformation, "Sensitivity Label Feature Note"
                        attemptLabelApplicationThisRun = False ' Stop trying for subsequent files in this run
                    End If
                    Err.Clear
                End If
                On Error GoTo 0 ' Reset main error handler for other errors
            End If

            newWB.SaveAs Filename:=splitFileName, FileFormat:=xlOpenXMLWorkbook
            newWB.Close SaveChanges:=False

            startRow = endRow + 1
        Else
            Exit For
        End If
    Next splitCount

    MsgBox "Data has been successfully split into " & IIf(splitCount - 1 < 0, 0, splitCount - 1) & " workbooks and saved to:" & vbCrLf & savePath, vbInformation

CleanUpAndExit:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic

    Set srcWS = Nothing
    Set srcWB = Nothing
    Set newWB = Nothing
    Set headerRange = Nothing
    Set fldr = Nothing
End Sub

