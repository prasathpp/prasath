Sub FormatAccountStatement()
    Dim wb As Workbook
    Dim wsInterest As Worksheet
    Dim wsDays As Worksheet
    Dim newWb As Workbook
    Dim newWs As Worksheet         ' This will be the first sheet in newWb
    Dim filteredWs As Worksheet    ' This will be the second, filtered sheet in newWb
    Dim lastRowInterest As Long
    Dim lastRowCutRange As Long
    Dim col As Variant
    Dim r As Long
    Dim sumEFGH As Double
    Dim lastRowFiltered As Long

    ' --- Initial Setup & Original Workbook Operations ---
    Set wb = ActiveWorkbook
    On Error Resume Next
    Set wsInterest = wb.Sheets("Interest calculated")
    Set wsDays = wb.Sheets("Interst Days calculated")
    On Error GoTo 0

    If wsInterest Is Nothing Then
        MsgBox "Sheet 'Interest calculated' not found!", vbExclamation
        Exit Sub
    End If
    If wsDays Is Nothing Then
        MsgBox "Sheet 'Interst Days calculated' not found!", vbExclamation
        Exit Sub
    End If

    With wsInterest
        .AutoFilterMode = False
        If .FilterMode Then .ShowAllData
        If .Cells(Rows.Count, "A").End(xlUp).Row > 1 Then
            .Range("A1").AutoFilter
            .AutoFilter.Sort.SortFields.Clear
            .AutoFilter.Sort.SortFields.Add Key:=.Range("B1"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            With .AutoFilter.Sort
                .header = xlYes
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                .Apply
            End With
        End If
    End With

    wsDays.Range("E:F,H:H,AA:AA").Copy
    wsInterest.Range("O1").PasteSpecial Paste:=xlPasteValues
    Application.CutCopyMode = False

    lastRowInterest = wsInterest.Cells(Rows.Count, "O").End(xlUp).Row
    If lastRowInterest < 1 Then lastRowInterest = 1

    If lastRowInterest > 1 Then
        wsInterest.Range("O1:R" & lastRowInterest).RemoveDuplicates Columns:=2, header:=xlYes
    End If

    With wsInterest
        .Range("C:C,J:L").Copy
        .Range("S1").PasteSpecial Paste:=xlPasteValues
        Application.CutCopyMode = False

        With .Rows("1:1")
            .WrapText = True
            .Font.Bold = False
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
        End With

        If Not .Columns("S").EntireColumn.Hidden And Application.WorksheetFunction.CountA(.Columns("S")) > 0 Then
            .Columns("S:S").Cut
            .Columns("W:W").Insert Shift:=xlToRight
        End If
        If Not .Columns("T").EntireColumn.Hidden And Application.WorksheetFunction.CountA(.Columns("T")) > 0 Then
            .Columns("T:T").Cut
            .Columns("S:S").Insert Shift:=xlToRight
        End If
        Application.CutCopyMode = False
    End With

    ' --- Create New Workbook and Process First Sheet (newWs) ---
    Set newWb = Workbooks.Add
    Set newWs = newWb.Sheets(1)
    newWs.Name = "Raw Data" ' Give the first sheet a name

    lastRowCutRange = 0
    For Each col In Array("O", "P", "Q", "R", "S", "T", "U", "V")
        If wsInterest.Cells(Rows.Count, col).End(xlUp).Row > lastRowCutRange Then
            lastRowCutRange = wsInterest.Cells(Rows.Count, col).End(xlUp).Row
        End If
    Next col

    If lastRowCutRange >= 1 Then
        wsInterest.Range("O1:V" & lastRowCutRange).Cut Destination:=newWs.Range("A1")
    Else
        MsgBox "No data found in columns O:V of 'Interest calculated' sheet to move.", vbInformation
        newWb.Close SaveChanges:=False
        Set newWb = Nothing
        Set newWs = Nothing
        Exit Sub
    End If

    newWs.Activate ' Ensure it's active for FormatSortAccount if it relies on ActiveSheet implicitly
    Call FormatSortAccount(newWs)

    With newWs.Rows(1)
        .WrapText = True
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
    End With
    newWs.Columns.AutoFit

    ' --- Create Second Sheet in newWb and Filter Data ---
    Set filteredWs = newWb.Sheets.Add(After:=newWb.Sheets(newWb.Sheets.Count))
    filteredWs.Name = "Filtered Data"

    ' Copy all data from the first new sheet (newWs) to the filtered sheet (filteredWs)
    newWs.Cells.Copy Destination:=filteredWs.Range("A1")
    filteredWs.Activate ' Work on the filtered sheet

    ' Find the last row of data on the filtered sheet (assuming Column A is a reliable indicator)
    lastRowFiltered = filteredWs.Cells(Rows.Count, "A").End(xlUp).Row

    ' Loop backwards from the last row to the second row (to avoid issues when deleting rows)
    ' Data headers are in row 1, actual data starts from row 2
    If lastRowFiltered >= 2 Then ' Only proceed if there's data beyond headers
        For r = lastRowFiltered To 2 Step -1
            sumEFGH = 0 ' Reset sum for each row
            ' Calculate sum of columns E, F, G, H for the current row
            ' Using Application.WorksheetFunction.Sum is robust as it treats non-numeric text as 0
            On Error Resume Next ' To handle potential errors if cells are completely un-summable (though Sum usually handles this)
            sumEFGH = Application.WorksheetFunction.Sum(filteredWs.Range(filteredWs.Cells(r, "E"), filteredWs.Cells(r, "H")))
            On Error GoTo 0

            ' If the sum is not greater than 0 (i.e., sum <= 0), delete the entire row
            If sumEFGH <= 0 Then
                filteredWs.Rows(r).Delete
            End If
        Next r
    End If

    ' Optional: Autofit columns in the filtered worksheet as well
    filteredWs.Columns.AutoFit
    
    ' Activate the first sheet of the new workbook before finishing, or the filtered sheet, as preferred
    newWs.Activate 
    ' filteredWs.Activate ' Uncomment if you want the filtered sheet to be active at the end

    MsgBox "Process complete. New workbook created with 'Raw Data' and 'Filtered Data' sheets.", vbInformation

End Sub


' --- RunMainProcess and FormatSortAccount subs remain unchanged ---

Sub RunMainProcess()
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    Call FormatAccountStatement

    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    ' MsgBox "Main process complete.", vbInformation ' Message from FormatAccountStatement is now more specific
End Sub


Sub FormatSortAccount(ByVal targetWs As Worksheet)
    Dim lastRow As Long
    Dim i As Long
    Dim sortCodeValue As Variant
    Dim accountValue As Variant

    Const START_ROW As Long = 2
    Const SORT_CODE_COLUMN As String = "A"
    Const ACCOUNT_COLUMN As String = "B"

    lastRow = targetWs.Cells(Rows.Count, SORT_CODE_COLUMN).End(xlUp).Row
    If targetWs.Cells(Rows.Count, ACCOUNT_COLUMN).End(xlUp).Row > lastRow Then
        lastRow = targetWs.Cells(Rows.Count, ACCOUNT_COLUMN).End(xlUp).Row
    End If

    If lastRow < START_ROW Then
        Exit Sub
    End If

    For i = START_ROW To lastRow
        sortCodeValue = targetWs.Cells(i, SORT_CODE_COLUMN).Value
        If Not IsEmpty(sortCodeValue) And Trim(CStr(sortCodeValue)) <> "" Then
            targetWs.Cells(i, SORT_CODE_COLUMN).NumberFormat = "@"
            targetWs.Cells(i, SORT_CODE_COLUMN).Value = Format(sortCodeValue, "000000")
        End If

        accountValue = targetWs.Cells(i, ACCOUNT_COLUMN).Value
        If Not IsEmpty(accountValue) And Trim(CStr(accountValue)) <> "" Then
            targetWs.Cells(i, ACCOUNT_COLUMN).NumberFormat = "@"
            targetWs.Cells(i, ACCOUNT_COLUMN).Value = Format(accountValue, "00000000")
        End If
    Next i
End Sub
